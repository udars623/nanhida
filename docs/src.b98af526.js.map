{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/grid.js","src/effects/effectStartPhase.js","src/enemyAI.js","src/pathFinder.js","src/button.js","src/stage.js","src/stages/stage0.js","src/stages/stage1.js","src/stages/stage2.js","src/stages/stage3.js","src/stages/stage4.js","src/stages/stageList.js","src/unitBase.js","src/units/protoPlayer.js","src/units/pKenshi.js","src/units/pKenshiJinlai.js","src/units/pTomato.js","src/units/pBlueberry.js","src/units/pCabbage.js","src/units/protoEnemy.js","src/units/eKenshi.js","src/units/eArcher.js","src/units/eCavLance.js","src/units/eCavBow.js","src/units/eDKAxe.js","src/units/unitCreator.js","src/skills/moveAssist.js","src/skills/moveAssistList.js","src/ui/threatMap.js","src/game.js","src/mapSelecter.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","Threat","gameResult","None","Win","Lose","GameEnded","moveTypes","infantry","cavalry","flyer","unitTypes","unitBase","pKenshi","pTomato","pBlueberry","pCabbage","pKenshiJinlai","eKenshi","eArcher","eCavLance","eCavBow","eDKAxe","moveAssist","reposition","drawBack","swap","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","CTRL_STATE_MA_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","unit","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","toggleThreat","x","maxGrid","y","findSelfUnitByGridPos","isActive","eventSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","unitID","checkMoveAssist","stateConfirmMATarget","eventExecuteMovement","eventExecuteAttack","eventExecuteMoveAssist","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","length","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","Grid","gridSize","xMax","yMax","lineHalfWidth","ctx","fillStyle","fillRect","effectStartPhase","isEnemyPhase","frame","maxFrame","image","document","getElementById","drawX","drawY","eventEffectEnd","drawImage","dAtk","MAX_DIST","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","executeWait","target","su","dAttacks","attackRange","minDist","bestGP","forEach","dgp","checkIfGpInMaxGrid","pathData","dist","newGP","suIdx","flagDone","listAttackable","destGP","findBestAttackPosition","executeMoveAttack","listPossibleDest","wideSearch","pathFinder","floodFill","distTarget","executeMove","i","len","stamina","res","findOppoUnitAndAttack","tryGetClose","makeOneMove","dx","dy","PathFinder","eList","pList","hStage","stage","visited","path","startGP","searchRange","flagIgnoreUnit","prev","attackable","j","queue","head","tail","addAttackable","xNew","yNew","gpNew","checkPassable","goalGP","moveDist","retrievePath","xOrigin","yOrigin","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","gridPosToPos","drawScale","drawScaleMax","Math","min","T","Stage","terrainMap","unitList","imageCache","appearTurn","eventPlaceUnit","typeID","params","turn","PHASE_ENEMY","getTerrain","U","createStage","StageList","list","defaultStageIdx","Stage0","Stage1","Stage2","Stage3","Stage4","idxStr","stageClass","parseInt","UnitBase","coordinate","imageID","imageSize","staminaMax","moveDistMax","moveType","hp","attack","alive","resetControlState","resetProposal","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","ignoreUnit","checkTerrain","abs","isReachable","acceptPath","eventActionExecuted","executeAction","eventBattle","damage","eventUnitDeath","isInPhase","ProtoPlayer","PKenshi","PTomato","PBlueberry","PCabbage","ProtoEnemy","EKenshi","EArcher","ECavLance","ECavBow","uType","UnitCreator","PKenshiJinlai","EDKAxe","MoveAssist","dUser","dTarget","user","dir","getDirection","gpNewUser","checkStopable","gpNewTarget","eventMovedByMoveAssist","eventUseMoveAssist","MoveAssistList","repo","copyToFourDirs","maID","checkEligibility","execute","ThreatMap","flagShowThreat","threatMap","thickness","drawOffsetX","drawOffsetY","drawDX","drawDY","gridPosToPosX","gridPosToPosY","k","Game","canvas","PHASE_NONE","grid","stageList","unitCreator","moveAssistList","buttonList","makeButtons","resetGameState","effectList","framesBeforeChangePhase","enemyAI","inputHandler","playerInputHandler","newUnit","createUnit","initAfterCreation","start","stageIdxStr","loadStage","initStage","playerPhase","requirePathUpdate","object","eventRequirePathUpdate","updateThreatMap","count","countActiveUnits","endPhase","eventNewTurn","endTurn","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","result","button","checkClick","eventClick","attacker","eventLoseHP","removeObjectFromList","effect","update","procChangePhase","alert","draw","drawThreat","drawUnitBG","drawUnit","gpx","gpy","floor","splice","MapSelecter","innerHTML","getStageListStringForMapSelecter","e","options","selectedIndex","value","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","mapSelecter","startDefaultStage","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","scriptCollapsibles","collapsibles","getElementsByClassName","classList","toggle","content","nextElementSibling","style","display"],"mappings":"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","file":"src.b98af526.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1,\r\n\t\tThreat: 2,\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2,\r\n\t\tGameEnded: 3\r\n    },\r\n\tmoveTypes: {\r\n\t\tinfantry: 0,\r\n\t\tcavalry: 1,\r\n\t\tflyer: 2\r\n\t},\r\n\tunitTypes: {\r\n\t\tunitBase: 0,\r\n\t\t\r\n\t\tpKenshi: 1,\r\n\t\tpTomato: 2,\r\n\t\tpBlueberry: 3,\r\n\t\tpCabbage: 4,\r\n\t\tpKenshiJinlai: 5,\r\n\t\t\r\n\t\teKenshi: 11,\r\n\t\teArcher: 12,\r\n\t\teCavLance: 13,\r\n\t\teCavBow: 14,\r\n\t\teDKAxe: 15\r\n\t},\r\n\tmoveAssist: {\r\n\t\treposition: 0,\r\n\t\tdrawBack: 1,\r\n\t\tswap: 2\r\n\t}\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\nconst CTRL_STATE_MA_TARGET_CHOSEN = 4; // move assist target selected\r\n\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n    stateDeselect() {\r\n        this.currentUnit.eventDeselect();\r\n        this.currentUnit = null;\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\t\r\n\tstateConfirmMATarget(unit) {\r\n        this.ctrlState = CTRL_STATE_MA_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n\t}\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Threat) {\r\n            this.hGame.toggleThreat();\r\n\t\t\treturn true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n\t\t\t//localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.currentUnit = unit;\r\n                unit.eventSelect();\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.currentUnit = unit;\r\n                    unit.eventSelect();\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n\t\t\t\t\tlocalAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentUnit.gridPos,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\t\r\n\t\t\t\t\tthis.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmMATarget(unit);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n\t\t\t\t// execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\t// target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentDest,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t)  { // Move assist target confirmed\r\n                    this.stateConfirmMATarget(unit);\r\n                    return true;\r\n\t\t\t\t} else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_MA_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute move assist\r\n\t\t\t\tthis.hGame.eventExecuteMoveAssist(this.currentUnit, this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        this.hCanvas.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            this.hCanvas.addEventListener(\"touchmove\", event => {\r\n                event.preventDefault();\r\n            });\r\n            this.hCanvas.addEventListener(\"touchend\", event => {\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 22 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\n// remember to check 1~maxGrid when using this stuff\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n\t\tthis.maxGrid = this.hGame.maxGrid;\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 5;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n\t\tif (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n\t\t\texecuteWait(unit);\r\n\t\t\treturn;\r\n\t\t}\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos.x + \", \" + unit.gridPos.y + \" @ \" + dest.x + \", \" + dest.y + \" vs \"+ target.gridPos.x + \", \" + target.gridPos.y);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfindBestAttackPosition(su, target) {\r\n\t\tlet dAttacks = dAtk[su.attackRange];\r\n\t\t\r\n\t\tlet minDist = MAX_DIST;\r\n\t\tlet bestGP = null;\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\tif (this.checkIfGpInMaxGrid(target.gridPos.x + dgp.x, target.gridPos.y + dgp.y) &&\r\n\t\t\t\tsu.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y] < minDist\r\n\t\t\t) {\r\n\t\t\t\tlet newGP = {x : target.gridPos.x+dgp.x,  y : target.gridPos.y+dgp.y};\r\n\t\t\t\tlet unit = this.hGame.findUnitByGridPos(newGP);\r\n\t\t\t\tif (unit === null || unit.unitID === su.unitID) {\r\n\t\t\t\t\tminDist = su.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y];\r\n\t\t\t\t\tbestGP = newGP;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//alert(\"/findBestAttackPosition \" + su.unitID + \",\" + target.unitID +\" @(\" + bestGP.x +\",\"+bestGP.y + \")\");\r\n\t\t\r\n\t\treturn bestGP;\r\n\t}\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\t\tlet flagDone = false;\r\n\t\t\r\n        su.pathData.listAttackable.forEach(gp => {\r\n\t\t\tif (flagDone) return;\r\n\t\t\tlet target = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n\t\t\tif (target !== null) {\r\n\t\t\t\t//alert(\"found target\");\r\n\t\t\t\tlet destGP = this.findBestAttackPosition(su, target);\r\n\t\t\t\tif (destGP !== null) {\r\n\t\t\t\t\tthis.executeMoveAttack(\r\n\t\t\t\t\t\tsu, \r\n\t\t\t\t\t\tdestGP, \r\n\t\t\t\t\t\ttarget\r\n\t\t\t\t\t);\r\n\t\t\t\t\tflagDone = true;\r\n\t\t\t\t\treturn; // you can't just return true here because it's inside a anonymous func\r\n\t\t\t\t\t\t// and you can't assume fOUAA ends here because it's inside a forEach loop!\r\n\t\t\t\t\t\t// the moral is: old for loop RULES\r\n\t\t\t\t}\r\n            }\r\n        });\r\n        return flagDone;\r\n    }\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let wideSearch = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    wideSearch.dist[target.gridPos.x][target.gridPos.y];\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n                }\r\n            });\r\n        });\r\n        //alert(minDist + \", \" + bestGP);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    makeOneMove() {\r\n        let i = 0,\r\n            len = this.suList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (this.suList[i].stamina > 0) {\r\n                let res = this.findOppoUnitAndAttack(i);\r\n                if (res === false) res = this.tryGetClose(i);\r\n                if (res === false) this.executeWait(this.suList[i]);\r\n\t\t\t\t\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return an object pathData := {\r\n\t\t\tprev[x][y] := (gp) gp of parent node in the path tree.\r\n\t\t\tdist[x][y] := (int) dist from startGP.\r\n\t\t\tlistPossibleDest := [] of reachable gp. NOTE: MIGHT HAVE OTHER UNITS\r\n\t\t\tattackable[x][y] := (bool) whether that gp can be attacked by the unit.\r\n\t\t\tlistAttackable := [] of attackable gp. NOTE: MIGHT BE BLOCKED BY OTHER UNITS\r\n\t\t}\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [this.maxGrid.x + 1];\r\n        let dist = [this.maxGrid.x + 1];\r\n\t\tlet attackable = [this.maxGrid.x + 1];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [this.maxGrid.y + 1];\r\n            dist[i] = [this.maxGrid.y + 1];\r\n            attackable[i] = [this.maxGrid.y + 1];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n                attackable[i][j] = false;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\t\tlet listAttackable = [];\r\n\t\t\r\n\t\tlet dAttacks = dAtk[unit.attackRange];\r\n\t\tthis.addAttackable(dAttacks, attackable, listAttackable, startGP.x, startGP.y)\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] = dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.addAttackable(dAttacks, attackable, listAttackable, xNew, yNew);\r\n\t\t\t\t\t\t\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        let pathData = { \r\n\t\t\tprev: prev, \r\n\t\t\tdist: dist, \r\n\t\t\tlistPossibleDest: listPossibleDest,\r\n\t\t\tattackable: attackable,\r\n\t\t\tlistAttackable: listAttackable\r\n\t\t};\r\n\t\treturn pathData;\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [dist];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\t// unused\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n\t\r\n\t// private methods\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\taddAttackable(dAttacks, attackable, listAttackable, xOrigin, yOrigin)\r\n\t{\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\t//alert(dgp.x +\",\"+ dgp.y +\",\"+ xOrigin +\",\"+  yOrigin)\r\n\t\t\tif (this.checkIfGpInMaxGrid(xOrigin + dgp.x, yOrigin + dgp.y) &&\r\n\t\t\t\t!attackable[xOrigin + dgp.x][yOrigin + dgp.y]\r\n\t\t\t) {\r\n\t\t\t\tattackable[xOrigin + dgp.x][yOrigin + dgp.y] = true;\r\n\t\t\t\tlistAttackable.push({\r\n\t\t\t\t\tx : xOrigin + dgp.x, y : yOrigin + dgp.y\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\n/*\r\n\tHow to add button:\r\n\tUsually, you don't need to change this file.\r\n\t(1) Add the button in Game.makeButtons().\r\n\t(2) Add consts.buttons entry.\r\n\t(3) Add button trigger in AbsCon.clickButton().\r\n\t(4) Implement the functionality of button in Game, UnitBase, etc.\r\n*/\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavBow,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavLance,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage0 from \"/src/stages/stage0\";\r\nimport Stage1 from \"/src/stages/stage1\";\r\nimport Stage2 from \"/src/stages/stage2\";\r\nimport Stage3 from \"/src/stages/stage3\";\r\nimport Stage4 from \"/src/stages/stage4\";\r\n\r\n/*\r\n\tWhen adding a new stage:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update the str @ getStageListStringForMapSelecter()\r\n\t\r\n\tthe good side of this stupid implementation:\r\n\t\tnow you can use any name for stage files and imported modules.\r\n*/\r\n\r\nexport default class StageList {\r\n\tconstructor () {\r\n\t\tthis.list = [100];\r\n\t\tthis.defaultStageIdx = 4;\r\n\t\t\r\n\t\tthis.list[0] = Stage0;\r\n\t\tthis.list[1] = Stage1;\r\n\t\tthis.list[2] = Stage2;\r\n\t\tthis.list[3] = Stage3;\r\n\t\tthis.list[4] = Stage4;\r\n\t}\r\n\t\r\n\tloadStage(idxStr, hGame) {\r\n\t\tlet stageClass = this.list[parseInt(idxStr)];\r\n\t\t//alert(stageClass + \", \" + \"Stage \"+idxStr);\r\n\t\thGame.stage = stageClass();\r\n\t}\r\n\t\r\n\tgetStageListStringForMapSelecter() {\r\n\t\tlet str = `\r\n\t\tMap:\r\n\t\t<select id=\"divSelecter_list\">\r\n\t\t\t<option value=\"0\">Stage 00</option>\r\n\t\t\t<option value=\"1\">Stage 01</option>\r\n\t\t\t<option value=\"2\">Stage 02</option>\r\n\t\t\t<option value=\"3\">Stage 03</option>\r\n\t\t\t<option value=\"4\" selected>Stage 04</option>\r\n\t\t</select>\r\n\t\t<button id=\"divSelecter_confirm\">Confirm</button>\r\n\t\t<br />\r\n\t\t`;\r\n\t\treturn str;\r\n\t}\r\n\t\r\n}","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy) {\r\n        this.unitID = unitID;\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n        this.coordinate = hGame.gridPosToPos(gridPos);\r\n\r\n\t\tthis.imageID = \"img_kenshi\";\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.params = null;\r\n\t\tthis.moveType = consts.moveTypes.infantry;\r\n\t\t\r\n        this.pathData = null;\r\n    }\r\n\t\r\n\tinitAfterCreation() {\r\n\t\tthis.image = document.getElementById(this.imageID);\r\n\t\tthis.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\t\tthis.stamina = 0;\r\n\t\tthis.moveDist = this.moveDistMax;\r\n\t\t\r\n\t\tthis.resetControlState();\r\n\t\tthis.resetProposal();\r\n\t}\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n    }\r\n\r\n\t// super important stuff\r\n    eventRequirePathUpdate() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n\tcheckTerrain(gridPos) {\r\n\t\tif (this.moveType === consts.moveTypes.flyer) return true;\r\n\t\t\r\n\t\tif (this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        ) \treturn false;\r\n\r\n        return true;\r\n\t}\r\n\r\n\t// for MoveAssist.checkEligibility\r\n\tcheckStopable(gridPos, ignoreUnit) {\r\n\t\tlet unit = this.hGame.findUnitByGridPos(gridPos);\r\n\t\tif (unit !== null && \r\n\t\t\tunit !== ignoreUnit &&\r\n\t\t\tunit !== this\r\n\t\t) return false;\r\n\t\t\r\n\t\treturn this.checkTerrain(gridPos);\r\n\t}\r\n\r\n    checkPassable(gridPos, flagIgnoreEnemyUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (!flagIgnoreEnemyUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\treturn false;\r\n\r\n        return this.checkTerrain(gridPos);\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\t\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [path.length];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n    eventExecuteMovement() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.executeAction();\r\n    }\r\n\t\r\n\teventUseMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t\tthis.executeAction();\r\n\t}\r\n\t\r\n\teventMovedByMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t}\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n\t\tif (this.attackRange === 0) return false;\r\n        if (Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n            Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\treturn true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        return (\r\n            this.isEnemy ===\r\n            (this.hGame.currentPhase === this.hGame.PHASE_ENEMY)\r\n        );\r\n    }\r\n\r\n    update(df) {}\r\n\t\r\n\tdrawThreat(ctx) {\r\n\t\tif (this.isSelected) {\r\n\t\t\tctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n\t\t\tthis.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tif (!this.hGame.pathFinder.isReachable(this.pathData, gp)) {\r\n\t\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tctx.fillStyle = \"rgba(238,238,255,0.5)\";\r\n\t\t\tthis.pathData.listPossibleDest.forEach(gp => {\r\n\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\tctx.fillRect(\r\n\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n    drawUnitBG(ctx) {\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * 0.45,\r\n            this.coordinate.y - this.imageSize.y * 0.45,\r\n            this.imageSize.x * 0.9,\r\n            this.imageSize.y * 0.9\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * 0.45,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * 0.45,\r\n                        this.imageSize.x * 0.9,\r\n                        this.imageSize.y * 0.9\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * 0.45,\r\n                this.destProposalCoord.y - this.imageSize.y * 0.45,\r\n                this.imageSize.x * 0.9,\r\n                this.imageSize.y * 0.9\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n        if (this.hasDestProposal) {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.destProposalCoord.x -\r\n                    (this.imageSize.x * this.drawScale) / 2,\r\n                this.destProposalCoord.y -\r\n                    (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        } else {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n                this.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        }\r\n    }\r\n}\r\n","import UnitBase from \"/src/unitBase\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t}\r\n*/\r\n\r\nexport default class ProtoPlayer extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}\r\n","import ProtoPlayer from \"/src/units/protoPlayer\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\tthis.staminaMax = 2;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PTomato extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_tomato\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.drawBack;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PBlueberry extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_blueberry\";\r\n\t\tthis.staminaMax = 2;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.swap;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PCabbage extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_cabbage\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.reposition;\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t}\r\n*/\r\n\r\nexport default class ProtoEnemy extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\n\r\nexport default class EKenshi extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi2\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\n\r\nexport default class EArcher extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_eArcher\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 2;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class ECavLance extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_eKibaYari\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class ECavBow extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_eKibaYumi\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 2;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class eDKAxe extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_eDK\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.flyer;\r\n\t}\r\n}","import consts from \"/src/consts\"\r\nimport UnitBase from \"/src/unitBase\";\r\nimport PKenshi from \"/src/units/pKenshi\";\r\nimport PKenshiJinlai from \"/src/units/pKenshiJinlai\";\r\nimport PTomato from \"/src/units/pTomato\";\r\nimport PBlueberry from \"/src/units/pBlueberry\";\r\nimport PCabbage from \"/src/units/pCabbage\";\r\nimport EKenshi from \"/src/units/eKenshi\";\r\nimport EArcher from \"/src/units/eArcher\";\r\nimport ECavLance from \"/src/units/eCavLance\";\r\nimport ECavBow from \"/src/units/eCavBow\";\r\nimport EDKAxe from \"/src/units/eDKAxe\";\r\n\r\n/*\r\n\tWhen adding a new unit:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js\r\n*/\r\nlet uType = consts.unitTypes;\r\n\r\nexport default class UnitCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [60];\r\n\t\t\r\n\t\tthis.list[uType.unitBase] = UnitBase;\r\n\t\tthis.list[uType.pKenshi] = PKenshi;\r\n\t\tthis.list[uType.pKenshiJinlai] = PKenshiJinlai;\r\n\t\tthis.list[uType.pTomato] = PTomato;\r\n\t\tthis.list[uType.pBlueberry] = PBlueberry;\r\n\t\tthis.list[uType.pCabbage] = PCabbage;\r\n\t\t\r\n\t\tthis.list[uType.eKenshi] = EKenshi;\r\n\t\tthis.list[uType.eArcher] = EArcher;\r\n\t\tthis.list[uType.eCavLance] = ECavLance;\r\n\t\tthis.list[uType.eCavBow] = ECavBow;\r\n\t\tthis.list[uType.eDKAxe] = EDKAxe;\r\n\t}\r\n\t\r\n\tcreateUnit(unitID, hGame, gridPos, isEnemy, typeID, params) {\r\n\t\t//alert(unitID+\",\"+gridPos.x+\",\"+gridPos.y+\",\"+isEnemy+\",\"+typeID);\r\n\t\tif (typeID === uType.unitBase) {\r\n\t\t\t// this should never happen after units are implemented\r\n\t\t\tlet unit = new this.list[typeID](\r\n\t\t\t\tunitID, hGame, gridPos, isEnemy\r\n\t\t\t);\r\n\t\t\treturn unit;\r\n\t\t}\r\n\t\t\r\n\t\tlet unit = new this.list[typeID](\r\n\t\t\t unitID, hGame, gridPos, isEnemy, params\r\n\t\t);\r\n\t\treturn unit;\r\n\t}\r\n}","/* \r\n\tcurrently only support 1-grid MA\r\n\tbut extending to 8 dirs shouldn't be too difficult\r\n*/\r\n\r\nexport default class MoveAssist {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.dUser = [10]; // [2:{x,y}, 4, 6, 8]\r\n\t\tthis.dTarget = [10];\r\n\t\t\r\n\t\tfor (let i = 0; i <= 9; i ++) {\r\n\t\t\tthis.dUser[i] = null;\r\n\t\t\tthis.dTarget[i] = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// super() -> set values to dUser[2] & dTarget[2] -> call this\r\n\tcopyToFourDirs() {\r\n\t\tthis.dUser[8] = {\r\n\t\t\tx: this.dUser[2].x,\r\n\t\t\ty: -this.dUser[2].y\r\n\t\t}\r\n\t\tthis.dUser[6] = {\r\n\t\t\tx: this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dUser[4] = {\r\n\t\t\tx: -this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dTarget[8] = {\r\n\t\t\tx: this.dTarget[2].x,\r\n\t\t\ty: -this.dTarget[2].y\r\n\t\t}\r\n\t\tthis.dTarget[6] = {\r\n\t\t\tx: this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t\tthis.dTarget[4] = {\r\n\t\t\tx: -this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDirection(dest, target) {\r\n\t\tlet dx = target.gridPos.x - dest.x;\r\n\t\tlet dy = target.gridPos.y - dest.y;\r\n\t\tif (dx > 1 || dx < -1 || dy > 1 || dy < -1) return null;\r\n\t\treturn 5 + dx - 3*dy;\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(gp) {\r\n\t\tif (gp.x < 1 || gp.y < 1 || \r\n\t\t\tgp.x > this.hGame.maxGrid.x || \r\n\t\t\tgp.y > this.hGame.maxGrid.y\r\n\t\t) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tcheckEligibility(user, dest, target) {\r\n\t\t//alert(user.unitID + \" @ \" + dest.x + \",\" + dest.y + \" -> \" + target.unitID);\r\n\t\tlet dir = this.getDirection(dest, target);\r\n\t\tif (dir === null) return false;\r\n\t\tif (this.dUser[dir] === null) return false;\r\n\t\t//alert(\"pass 1\");\r\n\t\tlet gpNewUser = {\r\n\t\t\tx: dest.x + this.dUser[dir].x,\r\n\t\t\ty: dest.y + this.dUser[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewUser)) return false;\r\n\t\tif (!user.checkStopable(gpNewUser, target)) return false;\r\n\t\t//alert(\"pass 2\");\r\n\t\tlet gpNewTarget = {\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewTarget)) return false;\r\n\t\tif (!target.checkStopable(gpNewTarget, user)) return false;\r\n\t\t//alert(\"pass 3\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\texecute(user, target) {\r\n\t\t/* \tcorrent logic is: \r\n\t\t\tUB.eventUseMoveAssist ->\r\n\t\t\tUB.executeAction -> \r\n\t\t\tGame.eventActionExecuted ->\r\n\t\t\tGame.requirePathUpdate ->\r\n\t\t\tUB.eventRequirePathUpdate.\r\n\t\t\t\r\n\t\t\tTo avoid pathData problem, always call in the order of:\r\n\t\t\t(1) eventMovedByMoveAssist\r\n\t\t\t(2) eventUseMoveAssist.\r\n\t\t*/\r\n\t\tlet dir = this.getDirection(user.destProposalGP, target);\r\n\t\ttarget.eventMovedByMoveAssist({\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t});\r\n\t\tuser.eventUseMoveAssist({\r\n\t\t\tx: user.destProposalGP.x + this.dUser[dir].x,\r\n\t\t\ty: user.destProposalGP.y + this.dUser[dir].y\r\n\t\t});\r\n\t}\r\n\t\r\n}","import MoveAssist from \"/src/skills/moveAssist\";\r\nimport consts from \"/src/consts\"\r\n\r\nexport default class MoveAssistList {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.list = [10];\r\n\t\t\r\n\t\tlet repo = new MoveAssist(hGame);\r\n\t\trepo.dUser[2] = \t{x: 0, y: 0};\r\n\t\trepo.dTarget[2] = \t{x: 0, y: -2};\r\n\t\trepo.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.reposition] = repo;\r\n\t\t\r\n\t\tlet drawBack = new MoveAssist(hGame);\r\n\t\tdrawBack.dUser[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.drawBack] = drawBack;\r\n\t\t\r\n\t\tlet swap = new MoveAssist(hGame);\r\n\t\tswap.dUser[2] = \t{x: 0, y: +1};\r\n\t\tswap.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tswap.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.swap] = swap;\r\n\r\n\t}\r\n\t\r\n\tcheckEligibility(maID, user, dest, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\treturn this.list[maID].checkEligibility(user, dest, target);\r\n\t}\r\n\t\r\n\texecute(maID, user, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\t// assume checkEligibility is already passed\r\n\t\tthis.list[maID].execute(user, target);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\n\r\nexport default class ThreatMap {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.maxGrid = hGame.maxGrid;\r\n\t\t\r\n\t\tthis.flagShowThreat = false;\r\n\t\t\r\n\t\tthis.threatMap = [this.maxGrid.x+1];\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tthis.threatMap[x] = [this.maxGrid.y+1];\r\n\t\t}\r\n\t\t\r\n\t\tthis.thickness = 2;\r\n\t\tthis.drawOffsetX = [\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawOffsetY = [\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawDX = [\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t];\r\n\t\tthis.drawDY = [\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t];\r\n\t}\r\n\t\r\n\tupdateThreatMap() {\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tthis.threatMap[x][y] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.hGame.enemyUnitList.forEach(unit => {\r\n\t\t\tunit.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tthis.threatMap[gp.x][gp.y] = true;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.flagShowThreat = !this.flagShowThreat;\r\n\t\t//alert(this.flagShowThreat);\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tif (!this.flagShowThreat) return;\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tif (this.threatMap[x][y]) {\r\n\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,0.1)\";\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1\r\n\t\t\t\t\t);\r\n\t\t\t\t\tfor (let k = 0; k < 4; k ++) {\r\n\t\t\t\t\t\tif (! this.checkIfGpInMaxGrid(x + dx[k], y + dy[k])) continue;\r\n\t\t\t\t\t\tif (! this.threatMap[x + dx[k]][y + dy[k]]) {\r\n\t\t\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,1)\";\r\n\t\t\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) + this.drawOffsetX[k],\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) + this.drawOffsetY[k],\r\n\t\t\t\t\t\t\t\tthis.drawDX[k],\r\n\t\t\t\t\t\t\t\tthis.drawDY[k]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","//import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\nimport StageList from \"/src/stages/stageList\";\r\nimport UnitCreator from \"/src/units/unitCreator\";\r\nimport MoveAssistList from \"/src/skills/moveAssistList\";\r\nimport ThreatMap from \"/src/ui/threatMap\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\t\t\r\n\t\tthis.stageList = new StageList();\r\n\t\tthis.unitCreator = new UnitCreator();\r\n\t\tthis.moveAssistList = new MoveAssistList(this);\r\n\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n\t\t\r\n\t\tthis.resetGameState();\r\n    }\r\n\t\r\n\tresetGameState() {\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\t\r\n\t\t\r\n\t\tthis.threatMap = new ThreatMap(this);\r\n\t}\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t\t\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_threat\", consts.buttons.Threat, {x:7, y:8}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, typeID, params) {\r\n        this.unitID++;\r\n\t\t\r\n\t\t// WARNING: hasn't check the position yet!!!\r\n\t\t// need to implement check before using reinforcements!\r\n\t\t\r\n\t\tlet list = isEnemy ? this.enemyUnitList : this.playerUnitList;\r\n\t\tlet newUnit = this.unitCreator.createUnit(\r\n\t\t\tthis.unitID, this, gridPos, isEnemy, typeID, params\r\n\t\t);\r\n\t\tlist.push(newUnit);\r\n\t\tnewUnit.initAfterCreation();\r\n    }\r\n\t\r\n\tstartDefaultStage() {\r\n\t\tthis.start(this.stageList.defaultStageIdx);\r\n\t}\r\n\r\n    start(stageIdxStr) {\r\n\t\t//alert(\"start\")\r\n\t\tthis.resetGameState();\r\n\t\t\r\n\t\tthis.stageList.loadStage(stageIdxStr, this);\r\n\t\t\t\t\r\n        this.stage.initStage(this);\r\n\t\t\r\n        this.playerPhase();\r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\trequirePathUpdate() {\r\n\t\tthis.playerUnitList.forEach(object => object.eventRequirePathUpdate());\r\n        this.enemyUnitList.forEach(object => object.eventRequirePathUpdate());\r\n\t\t\r\n\t\tthis.updateThreatMap();\r\n\t}\r\n\r\n\tupdateThreatMap() {\r\n\t\tthis.threatMap.updateThreatMap();\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.threatMap.toggleThreat();\r\n\t}\r\n\r\n\tcountActiveUnits() {\r\n\t\tlet count = 0;\r\n\t\tlet list = null;\r\n\t\tif (this.currentPhase === this.PHASE_PLAYER) list = this.playerUnitList;\r\n\t\tif (this.currentPhase === this.PHASE_ENEMY) list = this.enemyUnitList;\r\n\t\tif (list === null) return 0;\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) count ++;\r\n\t\t});\r\n\t\treturn count;\r\n\t}\r\n\r\n    eventActionExecuted() {\r\n        if (this.countActiveUnits() === 0) {\r\n            this.endPhase();\r\n        }\r\n        \r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.effectList.push(new EffectStartPhase(this, true));\r\n        } else {\r\n            this.effectList.push(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else removeObjectFromList(unit, this.playerUnitList);\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n        else if (this.playerUnitList.length <= 0) {\r\n            this.gameResult = consts.gameResult.Lose;\r\n        }\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\tcheckMoveAssist(user, dest, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.checkEligibility(user.params.moveAssist, user, dest, target);\r\n\t}\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\teventExecuteMoveAssist(user, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.execute(user.params.moveAssist, user, target);\r\n\t}\r\n\r\n    update(df) {\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n        if (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n        this.playerInputHandler.update(df);\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n\t\t\r\n\t\tif (this.gameResult === consts.gameResult.Win) {\r\n\t\t\talert(\"You win!\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\t\tif (this.gameResult === consts.gameResult.Lose) {\r\n\t\t\talert(\"GAME OVER\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\t\r\n\t\tthis.playerUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\t\t\r\n\t\tthis.threatMap.draw(ctx);\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n        if (this.gameResult !== consts.gameResult.None) {\r\n            //alert(\"oxoxoxox\");\r\n        }\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\t\r\n\t// if making too many {} is really a problem then use this\r\n\tgridPosToPosX(gpx) {\r\n\t\treturn gpx * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\t\r\n\tgridPosToPosY(gpy) {\r\n\t\treturn gpy * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","export default class MapSelecter {\r\n\tconstructor (hGame) {\r\n\t\tlet divSelecter = document.getElementById(\"mapSelecter\");\r\n\t\tdivSelecter.innerHTML = hGame.stageList.getStageListStringForMapSelecter();\r\n\t\t\r\n\t\tlet button = document.getElementById(\"divSelecter_confirm\");\r\n\t\tbutton.addEventListener(\"click\", event => {\r\n\t\t\tvar e = document.getElementById(\"divSelecter_list\");\r\n\t\t\tvar result = e.options[e.selectedIndex].value;\r\n\t\t\t//alert(\"confirmed \" + result);\r\n\t\t\thGame.start(result);\r\n\t\t});\r\n\r\n\t}\r\n}","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport MapSelecter from \"/src/mapSelecter\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\nlet mapSelecter = new MapSelecter(game);\n\ngame.startDefaultStage();\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n\trequestAnimationFrame(gameLoop);\n}\n\nfunction scriptCollapsibles() {\n\t// https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapsible\n\tlet collapsibles = document.getElementsByClassName(\"collapsible\");\n\tfor (let i = 0; i < collapsibles.length; i++) {\n\t\tcollapsibles[i].addEventListener(\"click\", function() {\n\t\t\tthis.classList.toggle(\"active\");\n\t\t\tlet content = this.nextElementSibling; // wtf this is handy\n\t\t\tif (content.style.display === \"block\") {\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t}\n\t\t});\n\t}\n}\n\nscriptCollapsibles() ;\n\nrequestAnimationFrame(gameLoop);\n"]}