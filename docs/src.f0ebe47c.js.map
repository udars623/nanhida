{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/grid.js","src/effects/effectStartPhase.js","src/effects/effectGameOver.js","src/effects/effectStageClear.js","src/enemyAI.js","src/pathFinder.js","src/button.js","src/stage.js","src/stages/stage0.js","src/stages/stage1.js","src/stages/stage2.js","src/stages/stage3.js","src/stages/stage4.js","src/stages/stageList.js","src/unitBase.js","src/units/protoPlayer.js","src/texts/texts_jp.js","src/units/pKenshi.js","src/units/pKenshiJinlai.js","src/units/pTomato.js","src/units/pBlueberry.js","src/units/pCabbage.js","src/units/protoEnemy.js","src/units/eKenshi.js","src/units/eArcher.js","src/units/eCavLance.js","src/units/eCavBow.js","src/units/eDKAxe.js","src/units/unitCreator.js","src/skills/skillPassive.js","src/skills/passive/extraStamina.js","src/skills/skillCreator.js","src/skills/moveAssist.js","src/skills/moveAssistList.js","src/ui/threatMap.js","src/ui/statusPanel.js","src/game.js","src/mapSelecter.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","Threat","gameResult","None","Win","Lose","GameEnded","moveTypes","infantry","cavalry","flyer","unitTypes","unitBase","pKenshi","pTomato","pBlueberry","pCabbage","pKenshiJinlai","eKenshi","eArcher","eCavLance","eCavBow","eDKAxe","moveAssist","reposition","drawBack","swap","skills","none","extraStamina","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","CTRL_STATE_MA_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","unit","eventSelect","eventSelectUnit","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","toggleThreat","x","maxGrid","y","findSelfUnitByGridPos","isActive","stateSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","unitID","checkMoveAssist","stateConfirmMATarget","eventExecuteMovement","eventExecuteAttack","eventExecuteMoveAssist","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","length","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","Grid","gridSize","xMax","yMax","lineHalfWidth","ctx","fillStyle","fillRect","effectStartPhase","isEnemyPhase","frame","maxFrame","image","document","getElementById","drawX","drawY","eventEffectEnd","drawImage","effectGameOver","drawScale","drawAngle","phase","phaseLength","Math","PI","trX","trY","translate","rotate","effectStageClear","dAtk","MAX_DIST","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","executeWait","target","su","dAttacks","attackRange","minDist","bestGP","forEach","dgp","checkIfGpInMaxGrid","pathData","dist","newGP","suIdx","flagDone","listAttackable","destGP","findBestAttackPosition","executeMoveAttack","listPossibleDest","wideSearch","pathFinder","floodFill","distTarget","executeMove","i","len","stamina","res","findOppoUnitAndAttack","tryGetClose","makeOneMove","dx","dy","PathFinder","eList","pList","hStage","stage","visited","path","startGP","searchRange","flagIgnoreUnit","prev","attackable","j","queue","head","tail","addAttackable","xNew","yNew","gpNew","checkPassable","goalGP","moveDist","retrievePath","xOrigin","yOrigin","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","gridPosToPos","drawScaleMax","min","T","Stage","terrainMap","unitList","imageCache","appearTurn","eventPlaceUnit","typeID","params","turn","PHASE_ENEMY","getTerrain","U","createStage","StageList","list","defaultStageIdx","Stage0","Stage1","Stage2","Stage3","Stage4","idxStr","stageClass","parseInt","UnitBase","coordinate","nameStr","imageID","imageSize","staminaMax","moveDistMax","moveType","skillList","skillLevelPair","newSkill","skillCreator","createSkill","skill","level","isPassive","applyOnce","createSkills","applyPassiveSkills","hp","attack","alive","resetControlState","resetProposal","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","ignoreUnit","checkTerrain","abs","isReachable","acceptPath","eventActionExecuted","executeAction","eventBattle","damage","eventUnitDeath","flag","isInPhase","isAlive","graveImage","ProtoPlayer","texts","PKenshi","PKenshiJinlai","PTomato","PBlueberry","PCabbage","ProtoEnemy","EKenshi","EArcher","ECavLance","ECavBow","uType","UnitCreator","EDKAxe","SkillPassive","hUnit","skillID","ExtraStamina","SkillCreator","skillStr","MoveAssist","dUser","dTarget","user","dir","getDirection","gpNewUser","checkStopable","gpNewTarget","eventMovedByMoveAssist","eventUseMoveAssist","MoveAssistList","names","repo","copyToFourDirs","Object","entries","key","value","maID","checkEligibility","execute","ThreatMap","flagShowThreat","threatMap","thickness","drawOffsetX","drawOffsetY","drawDX","drawDY","gridPosToPosX","gridPosToPosY","k","sx","sy","StatusPanel","skillCounter","fillText","font","cUP","drawSkillText","moveAssistList","skillLvPair","Game","canvas","PHASE_NONE","grid","stageList","unitCreator","buttonList","makeButtons","resetGameState","effectList","framesBeforeChangePhase","enemyAI","statusPanel","inputHandler","playerInputHandler","newUnit","createUnit","initAfterCreation","start","stageIdxStr","loadStage","initStage","playerPhase","requirePathUpdate","object","eventRequirePathUpdate","updateThreatMap","count","countActiveUnits","endPhase","eventNewTurn","effect","endTurn","addNewEffect","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","result","button","checkClick","eventClick","attacker","eventLoseHP","removeObjectFromList","EffectStageClear","EffectGameOver","gameEnds","update","procChangePhase","draw","drawThreat","drawUnitBG","drawUnit","gpx","gpy","floor","splice","MapSelecter","innerHTML","getStageListStringForMapSelecter","e","options","selectedIndex","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","mapSelecter","startDefaultStage","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","scriptCollapsibles","collapsibles","getElementsByClassName","classList","toggle","content","nextElementSibling","style","display"],"mappings":"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","file":"src.f0ebe47c.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1,\r\n\t\tThreat: 2,\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2,\r\n\t\tGameEnded: 3\r\n    },\r\n\tmoveTypes: {\r\n\t\tinfantry: 0,\r\n\t\tcavalry: 1,\r\n\t\tflyer: 2\r\n\t},\r\n\tunitTypes: {\r\n\t\tunitBase: 0,\r\n\t\t\r\n\t\tpKenshi: 1,\r\n\t\tpTomato: 2,\r\n\t\tpBlueberry: 3,\r\n\t\tpCabbage: 4,\r\n\t\tpKenshiJinlai: 5,\r\n\t\t\r\n\t\teKenshi: 11,\r\n\t\teArcher: 12,\r\n\t\teCavLance: 13,\r\n\t\teCavBow: 14,\r\n\t\teDKAxe: 15\r\n\t},\r\n\tmoveAssist: {\r\n\t\treposition: 0,\r\n\t\tdrawBack: 1,\r\n\t\tswap: 2\r\n\t},\r\n\tskills: {\r\n\t\tnone: 0,\r\n\t\textraStamina: 1,\r\n\t}\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\nconst CTRL_STATE_MA_TARGET_CHOSEN = 4; // move assist target selected\r\n\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n\tstateSelect(unit) {\r\n\t\t// state change not included here!!\r\n\t\tthis.currentUnit = unit;\r\n        unit.eventSelect();\r\n\t\tthis.hGame.eventSelectUnit(unit); // for UI update\r\n\t}\r\n\r\n    stateDeselect() {\r\n        this.currentUnit.eventDeselect();\r\n        this.currentUnit = null; \r\n\t\tthis.hGame.eventDeselect(); // for UI update\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\t\r\n\tstateConfirmMATarget(unit) {\r\n        this.ctrlState = CTRL_STATE_MA_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n\t}\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Threat) {\r\n            this.hGame.toggleThreat();\r\n\t\t\treturn true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n\t\t\t//localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.stateSelect(unit);\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.stateSelect(unit);\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n\t\t\t\t\tlocalAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentUnit.gridPos,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\t\r\n\t\t\t\t\tthis.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmMATarget(unit);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n\t\t\t\t// execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\t// target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentDest,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t)  { // Move assist target confirmed\r\n                    this.stateConfirmMATarget(unit);\r\n                    return true;\r\n\t\t\t\t} else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_MA_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute move assist\r\n\t\t\t\tthis.hGame.eventExecuteMoveAssist(this.currentUnit, this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        this.hCanvas.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            this.hCanvas.addEventListener(\"touchmove\", event => {\r\n                event.preventDefault();\r\n            });\r\n            this.hCanvas.addEventListener(\"touchend\", event => {\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 22 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","export default class effectGameOver {\r\n    constructor(hGame) {\r\n        this.frame = 1;\r\n        this.maxFrame = 200;\r\n\t\tthis.hCanvas = document.getElementById(\"gameScreen\");\r\n\t\tthis.image = document.getElementById(\"img_effect_gameOver\");\r\n        this.drawX = this.hCanvas.width / 2;\r\n        this.drawY = this.hCanvas.height / 2;\r\n\t\tthis.drawScale = 0.05;\r\n\t\tthis.drawAngle = 0;\r\n\t\tthis.phase = 0;\r\n\t\tthis.phaseLength = [50, 180, this.maxFrame];\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n\t\tif (this.frame >= this.phaseLength[this.phase]) {\r\n\t\t\tthis.phase ++;\r\n\t\t\tif (this.phase === 1) {\r\n\t\t\t\tthis.drawScale = 1;\r\n\t\t\t\tthis.drawAngle = 0;\r\n\t\t\t}\r\n\t\t}\r\n        if (this.phase === 0) {\r\n\t\t\tthis.drawScale += (1 - 0.05) / this.phaseLength[0] * df;\r\n\t\t\tthis.drawAngle += 2 * Math.PI * 5 / this.phaseLength[0] * df;\r\n\t\t}\r\n\t\tif (this.phase === 2) {\r\n\t\t\tthis.drawScale -= df / (this.phaseLength[2] - this.phaseLength[1]);\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame) {\r\n\t\t\tlet trX = this.hCanvas.width/2, trY = this.hCanvas.height/2;\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n            ctx.drawImage(\r\n\t\t\t\tthis.image, \r\n\t\t\t\tthis.drawX - this.image.width * this.drawScale / 2, \r\n\t\t\t\tthis.drawY - this.image.height * this.drawScale / 2, \r\n\t\t\t\tthis.image.width * this.drawScale,\r\n\t\t\t\tthis.image.height * this.drawScale,\r\n\t\t\t);\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(-this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n\t\t}\r\n    }\r\n}\r\n","export default class effectStageClear {\r\n    constructor(hGame) {\r\n        this.frame = 1;\r\n        this.maxFrame = 200;\r\n\t\tthis.hCanvas = document.getElementById(\"gameScreen\");\r\n\t\tthis.image = document.getElementById(\"img_effect_stageClear\");\r\n        this.drawX = this.hCanvas.width / 2;\r\n        this.drawY = this.hCanvas.height / 2;\r\n\t\tthis.drawScale = 0.05;\r\n\t\tthis.drawAngle = 0;\r\n\t\tthis.phase = 0;\r\n\t\tthis.phaseLength = [50, 180, this.maxFrame];\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n\t\tif (this.frame >= this.phaseLength[this.phase]) {\r\n\t\t\tthis.phase ++;\r\n\t\t\tif (this.phase === 1) {\r\n\t\t\t\tthis.drawScale = 1;\r\n\t\t\t\tthis.drawAngle = 0;\r\n\t\t\t}\r\n\t\t}\r\n        if (this.phase === 0) {\r\n\t\t\tthis.drawScale += (1 - 0.05) / this.phaseLength[0] * df;\r\n\t\t\tthis.drawAngle += 2 * Math.PI * 5 / this.phaseLength[0] * df;\r\n\t\t}\r\n\t\tif (this.phase === 2) {\r\n\t\t\tthis.drawScale -= df / (this.phaseLength[2] - this.phaseLength[1]);\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame) {\r\n\t\t\tlet trX = this.hCanvas.width/2, trY = this.hCanvas.height/2;\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n            ctx.drawImage(\r\n\t\t\t\tthis.image, \r\n\t\t\t\tthis.drawX - this.image.width * this.drawScale / 2, \r\n\t\t\t\tthis.drawY - this.image.height * this.drawScale / 2, \r\n\t\t\t\tthis.image.width * this.drawScale,\r\n\t\t\t\tthis.image.height * this.drawScale,\r\n\t\t\t);\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(-this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n\t\t}\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\n// remember to check 1~maxGrid when using this stuff\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n\t\tthis.maxGrid = this.hGame.maxGrid;\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 5;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n\t\tif (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n\t\t\texecuteWait(unit);\r\n\t\t\treturn;\r\n\t\t}\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos.x + \", \" + unit.gridPos.y + \" @ \" + dest.x + \", \" + dest.y + \" vs \"+ target.gridPos.x + \", \" + target.gridPos.y);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfindBestAttackPosition(su, target) {\r\n\t\tlet dAttacks = dAtk[su.attackRange];\r\n\t\t\r\n\t\tlet minDist = MAX_DIST;\r\n\t\tlet bestGP = null;\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\tif (this.checkIfGpInMaxGrid(target.gridPos.x + dgp.x, target.gridPos.y + dgp.y) &&\r\n\t\t\t\tsu.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y] < minDist\r\n\t\t\t) {\r\n\t\t\t\tlet newGP = {x : target.gridPos.x+dgp.x,  y : target.gridPos.y+dgp.y};\r\n\t\t\t\tlet unit = this.hGame.findUnitByGridPos(newGP);\r\n\t\t\t\tif (unit === null || unit.unitID === su.unitID) {\r\n\t\t\t\t\tminDist = su.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y];\r\n\t\t\t\t\tbestGP = newGP;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//alert(\"/findBestAttackPosition \" + su.unitID + \",\" + target.unitID +\" @(\" + bestGP.x +\",\"+bestGP.y + \")\");\r\n\t\t\r\n\t\treturn bestGP;\r\n\t}\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\t\tlet flagDone = false;\r\n\t\t\r\n        su.pathData.listAttackable.forEach(gp => {\r\n\t\t\tif (flagDone) return;\r\n\t\t\tlet target = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n\t\t\tif (target !== null) {\r\n\t\t\t\t//alert(\"found target\");\r\n\t\t\t\tlet destGP = this.findBestAttackPosition(su, target);\r\n\t\t\t\tif (destGP !== null) {\r\n\t\t\t\t\tthis.executeMoveAttack(\r\n\t\t\t\t\t\tsu, \r\n\t\t\t\t\t\tdestGP, \r\n\t\t\t\t\t\ttarget\r\n\t\t\t\t\t);\r\n\t\t\t\t\tflagDone = true;\r\n\t\t\t\t\treturn; // you can't just return true here because it's inside a anonymous func\r\n\t\t\t\t\t\t// and you can't assume fOUAA ends here because it's inside a forEach loop!\r\n\t\t\t\t\t\t// the moral is: old for loop RULES\r\n\t\t\t\t}\r\n            }\r\n        });\r\n        return flagDone;\r\n    }\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let wideSearch = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    wideSearch.dist[target.gridPos.x][target.gridPos.y];\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n                }\r\n            });\r\n        });\r\n        //alert(minDist + \", \" + bestGP);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    makeOneMove() {\r\n        let i = 0,\r\n            len = this.suList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (this.suList[i].stamina > 0) {\r\n                let res = this.findOppoUnitAndAttack(i);\r\n                if (res === false) res = this.tryGetClose(i);\r\n                if (res === false) this.executeWait(this.suList[i]);\r\n\t\t\t\t\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return an object pathData := {\r\n\t\t\tprev[x][y] := (gp) gp of parent node in the path tree.\r\n\t\t\tdist[x][y] := (int) dist from startGP.\r\n\t\t\tlistPossibleDest := [] of reachable gp. NOTE: MIGHT HAVE OTHER UNITS\r\n\t\t\tattackable[x][y] := (bool) whether that gp can be attacked by the unit.\r\n\t\t\tlistAttackable := [] of attackable gp. NOTE: MIGHT BE BLOCKED BY OTHER UNITS\r\n\t\t}\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [this.maxGrid.x + 1];\r\n        let dist = [this.maxGrid.x + 1];\r\n\t\tlet attackable = [this.maxGrid.x + 1];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [this.maxGrid.y + 1];\r\n            dist[i] = [this.maxGrid.y + 1];\r\n            attackable[i] = [this.maxGrid.y + 1];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n                attackable[i][j] = false;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\t\tlet listAttackable = [];\r\n\t\t\r\n\t\tlet dAttacks = dAtk[unit.attackRange];\r\n\t\tthis.addAttackable(dAttacks, attackable, listAttackable, startGP.x, startGP.y)\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] = dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.addAttackable(dAttacks, attackable, listAttackable, xNew, yNew);\r\n\t\t\t\t\t\t\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        let pathData = { \r\n\t\t\tprev: prev, \r\n\t\t\tdist: dist, \r\n\t\t\tlistPossibleDest: listPossibleDest,\r\n\t\t\tattackable: attackable,\r\n\t\t\tlistAttackable: listAttackable\r\n\t\t};\r\n\t\treturn pathData;\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [dist];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\t// unused\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n\t\r\n\t// private methods\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\taddAttackable(dAttacks, attackable, listAttackable, xOrigin, yOrigin)\r\n\t{\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\t//alert(dgp.x +\",\"+ dgp.y +\",\"+ xOrigin +\",\"+  yOrigin)\r\n\t\t\tif (this.checkIfGpInMaxGrid(xOrigin + dgp.x, yOrigin + dgp.y) &&\r\n\t\t\t\t!attackable[xOrigin + dgp.x][yOrigin + dgp.y]\r\n\t\t\t) {\r\n\t\t\t\tattackable[xOrigin + dgp.x][yOrigin + dgp.y] = true;\r\n\t\t\t\tlistAttackable.push({\r\n\t\t\t\t\tx : xOrigin + dgp.x, y : yOrigin + dgp.y\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\n/*\r\n\tHow to add button:\r\n\tUsually, you don't need to change this file.\r\n\t(1) Add the button in Game.makeButtons().\r\n\t(2) Add consts.buttons entry.\r\n\t(3) Add button trigger in AbsCon.clickButton().\r\n\t(4) Implement the functionality of button in Game, UnitBase, etc.\r\n*/\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavBow,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavLance,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage0 from \"/src/stages/stage0\";\r\nimport Stage1 from \"/src/stages/stage1\";\r\nimport Stage2 from \"/src/stages/stage2\";\r\nimport Stage3 from \"/src/stages/stage3\";\r\nimport Stage4 from \"/src/stages/stage4\";\r\n\r\n/*\r\n\tWhen adding a new stage:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update the str @ getStageListStringForMapSelecter()\r\n\t\r\n\tthe good side of this stupid implementation:\r\n\t\tnow you can use any name for stage files and imported modules.\r\n*/\r\n\r\nexport default class StageList {\r\n\tconstructor () {\r\n\t\tthis.list = [100];\r\n\t\tthis.defaultStageIdx = 4;\r\n\t\t\r\n\t\tthis.list[0] = Stage0;\r\n\t\tthis.list[1] = Stage1;\r\n\t\tthis.list[2] = Stage2;\r\n\t\tthis.list[3] = Stage3;\r\n\t\tthis.list[4] = Stage4;\r\n\t}\r\n\t\r\n\tloadStage(idxStr, hGame) {\r\n\t\tlet stageClass = this.list[parseInt(idxStr)];\r\n\t\t//alert(stageClass + \", \" + \"Stage \"+idxStr);\r\n\t\thGame.stage = stageClass();\r\n\t}\r\n\t\r\n\tgetStageListStringForMapSelecter() {\r\n\t\tlet str = `\r\n\t\tMap:\r\n\t\t<select id=\"divSelecter_list\">\r\n\t\t\t<option value=\"0\">Stage 00</option>\r\n\t\t\t<option value=\"1\">Stage 01</option>\r\n\t\t\t<option value=\"2\">Stage 02</option>\r\n\t\t\t<option value=\"3\">Stage 03</option>\r\n\t\t\t<option value=\"4\" selected>Stage 04</option>\r\n\t\t</select>\r\n\t\t<button id=\"divSelecter_confirm\">Confirm</button>\r\n\t\t<br />\r\n\t\t`;\r\n\t\treturn str;\r\n\t}\r\n\t\r\n}","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy) {\r\n        this.unitID = unitID;\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n        this.coordinate = hGame.gridPosToPos(gridPos);\r\n\r\n\t\tthis.nameStr = \"nannhidaman\";\r\n\t\tthis.imageID = \"img_kenshi\";\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.params = null;\r\n\t\tthis.moveType = consts.moveTypes.infantry;\r\n\t\t\r\n        this.pathData = null;\r\n\t\tthis.skillList = [];\r\n    }\r\n\t\r\n\tcreateSkills() {\r\n\t\tif (this.params !== null && \r\n\t\t\ttypeof(this.params.skills) !== \"undefined\" &&\r\n\t\t\tthis.params.skills !== null\r\n\t\t) {\r\n\t\t\tthis.params.skills.forEach(skillLevelPair => {\r\n\t\t\t\tlet newSkill = this.hGame.skillCreator.createSkill(\r\n\t\t\t\t\tthis, \r\n\t\t\t\t\tskillLevelPair.skill,\r\n\t\t\t\t\tskillLevelPair.level,\r\n\t\t\t\t);\r\n\t\t\t\tthis.skillList.push(newSkill);\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\tapplyPassiveSkills() {\r\n\t\tthis.skillList.forEach(skill => {\r\n\t\t\tif (skill.isPassive === true) {\r\n\t\t\t\tskill.applyOnce();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tinitAfterCreation() {\r\n\t\tthis.createSkills();\r\n\t\tthis.applyPassiveSkills();\r\n\t\t\r\n\t\tthis.image = document.getElementById(this.imageID);\r\n\t\tthis.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\t\tthis.stamina = 0;\r\n\t\tthis.moveDist = this.moveDistMax;\r\n\t\t\r\n\t\tthis.resetControlState();\r\n\t\tthis.resetProposal();\r\n\t}\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n\tisAlive() {\r\n\t\treturn (this.hp > 0);\r\n\t}\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n    }\r\n\r\n\t// super important stuff\r\n    eventRequirePathUpdate() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n\tcheckTerrain(gridPos) {\r\n\t\tif (this.moveType === consts.moveTypes.flyer) return true;\r\n\t\t\r\n\t\tif (this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        ) \treturn false;\r\n\r\n        return true;\r\n\t}\r\n\r\n\t// for MoveAssist.checkEligibility\r\n\tcheckStopable(gridPos, ignoreUnit) {\r\n\t\tlet unit = this.hGame.findUnitByGridPos(gridPos);\r\n\t\tif (unit !== null && \r\n\t\t\tunit !== ignoreUnit &&\r\n\t\t\tunit !== this\r\n\t\t) return false;\r\n\t\t\r\n\t\treturn this.checkTerrain(gridPos);\r\n\t}\r\n\r\n    checkPassable(gridPos, flagIgnoreEnemyUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (!flagIgnoreEnemyUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\treturn false;\r\n\r\n        return this.checkTerrain(gridPos);\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\t\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [path.length];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n    eventExecuteMovement() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.executeAction();\r\n    }\r\n\t\r\n\teventUseMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t\tthis.executeAction();\r\n\t}\r\n\t\r\n\teventMovedByMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t}\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n\t\tif (this.attackRange === 0) return false;\r\n        if (Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n            Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\treturn true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        let flag = (\r\n            this.isEnemy && (this.hGame.currentPhase === this.hGame.PHASE_ENEMY) ||\r\n            !this.isEnemy && (this.hGame.currentPhase === this.hGame.PHASE_PLAYER) \r\n        );\r\n\t\treturn flag;\r\n    }\r\n\r\n    update(df) {}\r\n\t\r\n\tdrawThreat(ctx) {\r\n\t\tif (this.isSelected) {\r\n\t\t\tctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n\t\t\tthis.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tif (!this.hGame.pathFinder.isReachable(this.pathData, gp)) {\r\n\t\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tctx.fillStyle = \"rgba(238,238,255,0.5)\";\r\n\t\t\tthis.pathData.listPossibleDest.forEach(gp => {\r\n\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\tctx.fillRect(\r\n\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n    drawUnitBG(ctx) {\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * 0.45,\r\n            this.coordinate.y - this.imageSize.y * 0.45,\r\n            this.imageSize.x * 0.9,\r\n            this.imageSize.y * 0.9\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * 0.45,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * 0.45,\r\n                        this.imageSize.x * 0.9,\r\n                        this.imageSize.y * 0.9\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * 0.45,\r\n                this.destProposalCoord.y - this.imageSize.y * 0.45,\r\n                this.imageSize.x * 0.9,\r\n                this.imageSize.y * 0.9\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n\t\tif (this.isAlive()) {\r\n\t\t\tif (this.hasDestProposal) {\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.image,\r\n\t\t\t\t\tthis.destProposalCoord.x -\r\n\t\t\t\t\t\t(this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.destProposalCoord.y -\r\n\t\t\t\t\t\t(this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.image,\r\n\t\t\t\t\tthis.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.graveImage === undefined) \r\n\t\t\t\tthis.graveImage = document.getElementById(\"img_dead\");\r\n\t\t\t\r\n\t\t\tctx.drawImage(\r\n\t\t\t\tthis.graveImage,\r\n\t\t\t\tthis.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\tthis.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n}\r\n","import UnitBase from \"/src/unitBase\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t}\r\n*/\r\n\r\nexport default class ProtoPlayer extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}\r\n","const texts = {\r\n\tunit: {\r\n\t\tunitBase: \"nannhidaman\",\r\n\t\t\r\n\t\tpKenshi: \"剣士\",\r\n\t\t\r\n\t\tpTomato: \"トマト・ジューシー\",\r\n\t\tpBlueberry: \"ブルーベリー・タイニー\",\r\n\t\tpCabbage: \"キャベツ・レタス・ドッチナン\",\r\n\t\tpKenshiJinlai: \"リザルト・ヴォン・ヒ～ダン\",\r\n\t\t\r\n\t\teKenshi: \"剣士\",\r\n\t\teArcher: \"弓兵\",\r\n\t\teCavLance: \"騎士\",\r\n\t\teCavBow: \"弓騎兵\",\r\n\t\teDKAxe: \"竜騎士\"\r\n\t},\r\n\tmoveAssist: {\r\n\t\tnone: \"移動補助なし\",\r\n\t\treposition: \"引き戻し\",\r\n\t\tdrawBack: \"引き寄せ\",\r\n\t\tswap: \"入れ替え\"\r\n\t},\r\n\tskills: {\r\n\t\tnone: \"--\",\r\n\t\textraStamina: \"行動力強化\",\r\n\t},\r\n}\r\n\r\n\r\nexport default texts;","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pKenshi;\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport texts from \"/src/texts/texts_jp\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PKenshiJinlai extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pKenshiJinlai;\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t\tthis.params.skills = [];\r\n\t\tthis.params.skills.push({\r\n\t\t\tskill: \"extraStamina\",\r\n\t\t\tlevel: 1\r\n\t\t});\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PTomato extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pTomato;\r\n\t\tthis.imageID = \"img_tomato\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.drawBack;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PBlueberry extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pBlueberry;\r\n\t\tthis.imageID = \"img_blueberry\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.swap;\r\n\t\t\r\n\t\tthis.params.skills = [];\r\n\t\tthis.params.skills.push({\r\n\t\t\tskill: \"extraStamina\",\r\n\t\t\tlevel: 1\r\n\t\t});\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PCabbage extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pCabbage;\r\n\t\tthis.imageID = \"img_cabbage\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.reposition;\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t}\r\n*/\r\n\r\nexport default class ProtoEnemy extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class EKenshi extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eKenshi;\r\n\t\tthis.imageID = \"img_kenshi2\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class EArcher extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eArcher;\r\n\t\tthis.imageID = \"img_eArcher\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 2;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ECavLance extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eCavLance;\r\n\t\tthis.imageID = \"img_eKibaYari\";\r\n\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ECavBow extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eCavBow;\r\n\t\tthis.imageID = \"img_eKibaYumi\";\r\n\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 2;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class eDKAxe extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eDKAxe;\r\n\t\tthis.imageID = \"img_eDK\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.flyer;\r\n\t}\r\n}","import consts from \"/src/consts\"\r\nimport UnitBase from \"/src/unitBase\";\r\nimport PKenshi from \"/src/units/pKenshi\";\r\nimport PKenshiJinlai from \"/src/units/pKenshiJinlai\";\r\nimport PTomato from \"/src/units/pTomato\";\r\nimport PBlueberry from \"/src/units/pBlueberry\";\r\nimport PCabbage from \"/src/units/pCabbage\";\r\nimport EKenshi from \"/src/units/eKenshi\";\r\nimport EArcher from \"/src/units/eArcher\";\r\nimport ECavLance from \"/src/units/eCavLance\";\r\nimport ECavBow from \"/src/units/eCavBow\";\r\nimport EDKAxe from \"/src/units/eDKAxe\";\r\n\r\n/*\r\n\tWhen adding a new unit:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js\r\n*/\r\nlet uType = consts.unitTypes;\r\n\r\nexport default class UnitCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [60];\r\n\t\t\r\n\t\tthis.list[uType.unitBase] = UnitBase;\r\n\t\tthis.list[uType.pKenshi] = PKenshi;\r\n\t\tthis.list[uType.pKenshiJinlai] = PKenshiJinlai;\r\n\t\tthis.list[uType.pTomato] = PTomato;\r\n\t\tthis.list[uType.pBlueberry] = PBlueberry;\r\n\t\tthis.list[uType.pCabbage] = PCabbage;\r\n\t\t\r\n\t\tthis.list[uType.eKenshi] = EKenshi;\r\n\t\tthis.list[uType.eArcher] = EArcher;\r\n\t\tthis.list[uType.eCavLance] = ECavLance;\r\n\t\tthis.list[uType.eCavBow] = ECavBow;\r\n\t\tthis.list[uType.eDKAxe] = EDKAxe;\r\n\t}\r\n\t\r\n\tcreateUnit(unitID, hGame, gridPos, isEnemy, typeID, params) {\r\n\t\t//alert(unitID+\",\"+gridPos.x+\",\"+gridPos.y+\",\"+isEnemy+\",\"+typeID);\r\n\t\tif (typeID === uType.unitBase) {\r\n\t\t\t// this should never happen after units are implemented\r\n\t\t\tlet unit = new this.list[typeID](\r\n\t\t\t\tunitID, hGame, gridPos, isEnemy\r\n\t\t\t);\r\n\t\t\treturn unit;\r\n\t\t}\r\n\t\t\r\n\t\tlet unit = new this.list[typeID](\r\n\t\t\t unitID, hGame, gridPos, isEnemy, params\r\n\t\t);\r\n\t\treturn unit;\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class SkillPassive {\r\n\tconstructor (unit, level) {\r\n\t\tthis.hUnit = unit;\r\n\t\tthis.level = level;\r\n\t\t\r\n\t\tthis.isPassive = true; // important, decides when & how the skill is applied\r\n\t\t// others are like isBuffEveryTurn, isMovementMutator etc. \r\n\t\t\r\n\t\tthis.skillID = consts.skills.none; // set this after super\r\n\t}\r\n\t\r\n\tapplyOnce() {\r\n\t\t// change staminaMax, etc.\r\n\t}\r\n\t\r\n\t// other stuffs... still not sure how to implement stuffs like sendo. sigh...\r\n\t// also there can be skills that apply \"online\" e.g. waves...\r\n\t// well they perhaps should be called active skills so we don't need to worry about them atm lol\r\n}\r\n","import SkillPassive from \"/src/skills/skillPassive\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ExtraStamina extends SkillPassive {\r\n\tconstructor (unit, level) {\r\n\t\tsuper(unit, level);\r\n\t\tthis.skillID = consts.skills.extraStamina;\r\n\t}\r\n\t\r\n\tapplyOnce() {\r\n\t\tthis.hUnit.staminaMax += this.level;\r\n\t\t//alert(this.hUnit.staminaMax);\r\n\t}\r\n}\r\n","import consts from \"/src/consts\";\r\nimport ExtraStamina from \"/src/skills/passive/extraStamina\";\r\n\r\n/*\r\n\tWhen adding a new skill:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js, texts_##.js\r\n*/\r\n\r\nexport default class SkillCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [100];\r\n\t\tthis.list[consts.skills.extraStamina] = ExtraStamina;\r\n\t}\r\n\t\r\n\tcreateSkill(unit, skillStr, level) {\r\n\t\t//alert(unit +\", \"+ skillStr +\", \"+ level);\r\n\t\tlet newSkill = new this.list[consts.skills[skillStr]](unit, level);\r\n\t\treturn newSkill;\r\n\t}\r\n\t\r\n}","/* \r\n\tcurrently only support 1-grid MA\r\n\tbut extending to 8 dirs shouldn't be too difficult\r\n*/\r\n\r\nexport default class MoveAssist {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.dUser = [10]; // [2:{x,y}, 4, 6, 8]\r\n\t\tthis.dTarget = [10];\r\n\t\t\r\n\t\tfor (let i = 0; i <= 9; i ++) {\r\n\t\t\tthis.dUser[i] = null;\r\n\t\t\tthis.dTarget[i] = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// super() -> set values to dUser[2] & dTarget[2] -> call this\r\n\tcopyToFourDirs() {\r\n\t\tthis.dUser[8] = {\r\n\t\t\tx: this.dUser[2].x,\r\n\t\t\ty: -this.dUser[2].y\r\n\t\t}\r\n\t\tthis.dUser[6] = {\r\n\t\t\tx: this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dUser[4] = {\r\n\t\t\tx: -this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dTarget[8] = {\r\n\t\t\tx: this.dTarget[2].x,\r\n\t\t\ty: -this.dTarget[2].y\r\n\t\t}\r\n\t\tthis.dTarget[6] = {\r\n\t\t\tx: this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t\tthis.dTarget[4] = {\r\n\t\t\tx: -this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDirection(dest, target) {\r\n\t\tlet dx = target.gridPos.x - dest.x;\r\n\t\tlet dy = target.gridPos.y - dest.y;\r\n\t\tif (dx > 1 || dx < -1 || dy > 1 || dy < -1) return null;\r\n\t\treturn 5 + dx - 3*dy;\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(gp) {\r\n\t\tif (gp.x < 1 || gp.y < 1 || \r\n\t\t\tgp.x > this.hGame.maxGrid.x || \r\n\t\t\tgp.y > this.hGame.maxGrid.y\r\n\t\t) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tcheckEligibility(user, dest, target) {\r\n\t\t//alert(user.unitID + \" @ \" + dest.x + \",\" + dest.y + \" -> \" + target.unitID);\r\n\t\tlet dir = this.getDirection(dest, target);\r\n\t\tif (dir === null) return false;\r\n\t\tif (this.dUser[dir] === null) return false;\r\n\t\t//alert(\"pass 1\");\r\n\t\tlet gpNewUser = {\r\n\t\t\tx: dest.x + this.dUser[dir].x,\r\n\t\t\ty: dest.y + this.dUser[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewUser)) return false;\r\n\t\tif (!user.checkStopable(gpNewUser, target)) return false;\r\n\t\t//alert(\"pass 2\");\r\n\t\tlet gpNewTarget = {\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewTarget)) return false;\r\n\t\tif (!target.checkStopable(gpNewTarget, user)) return false;\r\n\t\t//alert(\"pass 3\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\texecute(user, target) {\r\n\t\t/* \tcorrent logic is: \r\n\t\t\tUB.eventUseMoveAssist ->\r\n\t\t\tUB.executeAction -> \r\n\t\t\tGame.eventActionExecuted ->\r\n\t\t\tGame.requirePathUpdate ->\r\n\t\t\tUB.eventRequirePathUpdate.\r\n\t\t\t\r\n\t\t\tTo avoid pathData problem, always call in the order of:\r\n\t\t\t(1) eventMovedByMoveAssist\r\n\t\t\t(2) eventUseMoveAssist.\r\n\t\t*/\r\n\t\tlet dir = this.getDirection(user.destProposalGP, target);\r\n\t\ttarget.eventMovedByMoveAssist({\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t});\r\n\t\tuser.eventUseMoveAssist({\r\n\t\t\tx: user.destProposalGP.x + this.dUser[dir].x,\r\n\t\t\ty: user.destProposalGP.y + this.dUser[dir].y\r\n\t\t});\r\n\t}\r\n\t\r\n}","import MoveAssist from \"/src/skills/moveAssist\";\r\nimport consts from \"/src/consts\"\r\nimport texts from \"/src/texts/texts_jp\"\r\n\r\n/* \r\n\tto add: change constructor, consts, texts.\r\n*/\r\n\r\nexport default class MoveAssistList {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.list = [10];\r\n\t\tthis.names = [10];\r\n\t\t\r\n\t\tlet repo = new MoveAssist(hGame);\r\n\t\trepo.dUser[2] = \t{x: 0, y: 0};\r\n\t\trepo.dTarget[2] = \t{x: 0, y: -2};\r\n\t\trepo.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.reposition] = repo;\r\n\t\t\r\n\t\tlet drawBack = new MoveAssist(hGame);\r\n\t\tdrawBack.dUser[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.drawBack] = drawBack;\r\n\t\t\r\n\t\tlet swap = new MoveAssist(hGame);\r\n\t\tswap.dUser[2] = \t{x: 0, y: +1};\r\n\t\tswap.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tswap.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.swap] = swap;\r\n\t\t\r\n\t\tfor (const [key, value] of Object.entries(consts.moveAssist)) {\r\n\t\t\tthis.names[value] = texts.moveAssist[key];\r\n\t\t}\r\n\t\t//alert(this.names);\r\n\t}\r\n\t\r\n\tcheckEligibility(maID, user, dest, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\treturn this.list[maID].checkEligibility(user, dest, target);\r\n\t}\r\n\t\r\n\texecute(maID, user, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\t// assume checkEligibility is already passed\r\n\t\tthis.list[maID].execute(user, target);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\n\r\nexport default class ThreatMap {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.maxGrid = hGame.maxGrid;\r\n\t\t\r\n\t\tthis.flagShowThreat = false;\r\n\t\t\r\n\t\tthis.threatMap = [this.maxGrid.x+1];\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tthis.threatMap[x] = [this.maxGrid.y+1];\r\n\t\t}\r\n\t\t\r\n\t\tthis.thickness = 2;\r\n\t\tthis.drawOffsetX = [\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawOffsetY = [\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawDX = [\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t];\r\n\t\tthis.drawDY = [\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t];\r\n\t}\r\n\t\r\n\tupdateThreatMap() {\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tthis.threatMap[x][y] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.hGame.enemyUnitList.forEach(unit => {\r\n\t\t\tunit.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tthis.threatMap[gp.x][gp.y] = true;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.flagShowThreat = !this.flagShowThreat;\r\n\t\t//alert(this.flagShowThreat);\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tif (!this.flagShowThreat) return;\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tif (this.threatMap[x][y]) {\r\n\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,0.1)\";\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1\r\n\t\t\t\t\t);\r\n\t\t\t\t\tfor (let k = 0; k < 4; k ++) {\r\n\t\t\t\t\t\tif (! this.checkIfGpInMaxGrid(x + dx[k], y + dy[k])) continue;\r\n\t\t\t\t\t\tif (! this.threatMap[x + dx[k]][y + dy[k]]) {\r\n\t\t\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,1)\";\r\n\t\t\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) + this.drawOffsetX[k],\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) + this.drawOffsetY[k],\r\n\t\t\t\t\t\t\t\tthis.drawDX[k],\r\n\t\t\t\t\t\t\t\tthis.drawDY[k]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import texts from \"/src/texts/texts_jp\"\r\n\r\nconst sx = [2.3, 2.3, 2.3, 4.3, 4.3, 4.3];\r\nconst sy = [1.1, 1.4, 1.7, 1.1, 1.4, 1.7];\r\n\r\nexport default class StatusPanel {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.currentUnit = null;\r\n\t\t\r\n\t\tthis.skillCounter = 0;\r\n\t}\r\n\t\r\n\teventSelectUnit (unit) {\r\n\t\t//alert(\"select\");\r\n\t\tthis.currentUnit = unit;\r\n\t}\r\n\t\r\n\teventDeselect () {\r\n\t\tthis.currentUnit = null;\r\n\t}\r\n\t\r\n\tdrawSkillText(ctx, str) {\r\n\t\tctx.fillText(\r\n\t\t\tstr,\r\n\t\t\tthis.hGame.gridSize * sx[this.skillCounter],\r\n\t\t\tthis.hGame.gridSize * (this.hGame.maxGrid.y + sy[this.skillCounter])\r\n\t\t);\r\n\t\tthis.skillCounter ++;\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tif (this.currentUnit !== null) {\r\n\t\t\t//alert(\"draw\");\r\n\t\t\tctx.drawImage(\r\n                this.currentUnit.image,\r\n                0,\r\n                this.hGame.gridSize * (this.hGame.maxGrid.y+0.2),\r\n                this.hGame.gridSize*2,\r\n                this.hGame.gridSize*2\r\n            );\r\n\t\t\tctx.fillStyle = \"#000\";\r\n\t\t\tctx.font = \"18px serif\";\r\n\t\t\tctx.fillText(\r\n\t\t\t\tthis.currentUnit.nameStr,\r\n\t\t\t\tthis.hGame.gridSize * 2.3,\r\n\t\t\t\tthis.hGame.gridSize * (this.hGame.maxGrid.y+0.6)\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tthis.skillCounter = 0;\r\n\t\t\tlet cUP = this.currentUnit.params;\r\n\t\t\tif (this.currentUnit.params !== null) {\r\n\t\t\t\tctx.font = \"14px serif\";\r\n\t\t\t\tif (cUP.moveAssist !== undefined) {\r\n\t\t\t\t\tthis.drawSkillText(ctx,\r\n\t\t\t\t\t\tthis.hGame.moveAssistList.names[cUP.moveAssist]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tif (cUP.skills !== undefined) {\r\n\t\t\t\t\tcUP.skills.forEach(skillLvPair => {\r\n\t\t\t\t\t\tthis.drawSkillText(ctx, \r\n\t\t\t\t\t\t\ttexts.skills[skillLvPair.skill]+skillLvPair.level\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","//import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EffectGameOver from \"/src/effects/effectGameOver\";\r\nimport EffectStageClear from \"/src/effects/effectStageClear\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\nimport StageList from \"/src/stages/stageList\";\r\nimport UnitCreator from \"/src/units/unitCreator\";\r\nimport SkillCreator from \"/src/skills/skillCreator\";\r\nimport MoveAssistList from \"/src/skills/moveAssistList\";\r\nimport ThreatMap from \"/src/ui/threatMap\";\r\nimport StatusPanel from \"/src/ui/statusPanel\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\t\t\r\n\t\tthis.stageList = new StageList();\r\n\t\tthis.unitCreator = new UnitCreator();\r\n\t\tthis.moveAssistList = new MoveAssistList(this);\r\n\t\tthis.skillCreator = new SkillCreator();\r\n\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n\t\t\r\n\t\tthis.resetGameState();\r\n    }\r\n\t\r\n\tresetGameState() {\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\t\r\n\t\t\r\n\t\tthis.threatMap = new ThreatMap(this);\r\n\t\tthis.statusPanel = new StatusPanel(this);\r\n\t}\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t\t\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_threat\", consts.buttons.Threat, {x:7, y:8}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, typeID, params) {\r\n        this.unitID++;\r\n\t\t\r\n\t\t// WARNING: hasn't check the position yet!!!\r\n\t\t// need to implement check before using reinforcements!\r\n\t\t\r\n\t\tlet list = isEnemy ? this.enemyUnitList : this.playerUnitList;\r\n\t\tlet newUnit = this.unitCreator.createUnit(\r\n\t\t\tthis.unitID, this, gridPos, isEnemy, typeID, params\r\n\t\t);\r\n\t\tlist.push(newUnit);\r\n\t\tnewUnit.initAfterCreation();\r\n    }\r\n\t\r\n\tstartDefaultStage() {\r\n\t\tthis.start(this.stageList.defaultStageIdx);\r\n\t}\r\n\r\n    start(stageIdxStr) {\r\n\t\t//alert(\"start\")\r\n\t\tthis.resetGameState();\r\n\t\t\r\n\t\tthis.stageList.loadStage(stageIdxStr, this);\r\n\t\t\t\t\r\n        this.stage.initStage(this);\r\n\t\t\r\n        this.playerPhase();\r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\trequirePathUpdate() {\r\n\t\tthis.playerUnitList.forEach(object => object.eventRequirePathUpdate());\r\n        this.enemyUnitList.forEach(object => object.eventRequirePathUpdate());\r\n\t\t\r\n\t\tthis.updateThreatMap();\r\n\t}\r\n\r\n\tupdateThreatMap() {\r\n\t\tthis.threatMap.updateThreatMap();\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.threatMap.toggleThreat();\r\n\t}\r\n\r\n\tcountActiveUnits() {\r\n\t\tlet count = 0;\r\n\t\tlet list = null;\r\n\t\tif (this.currentPhase === this.PHASE_PLAYER) list = this.playerUnitList;\r\n\t\tif (this.currentPhase === this.PHASE_ENEMY) list = this.enemyUnitList;\r\n\t\tif (list === null) return 0;\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) count ++;\r\n\t\t});\r\n\t\treturn count;\r\n\t}\r\n\r\n    eventActionExecuted() {\r\n        if (this.countActiveUnits() === 0) {\r\n            this.endPhase();\r\n        }\r\n        \r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n\teventSelectUnit(unit) {\r\n\t\tthis.statusPanel.eventSelectUnit(unit);\r\n\t}\r\n\t\r\n\teventDeselect() {\r\n\t\tthis.statusPanel.eventDeselect();\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n\taddNewEffect(effect) {\r\n\t\tthis.effectList.push(effect);\r\n\t}\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.addNewEffect(new EffectStartPhase(this, true));\r\n        } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n            this.addNewEffect(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else { \r\n\t\t\t//removeObjectFromList(unit, this.playerUnitList); // to draw the grave\r\n\t\t\tthis.gameResult = consts.gameResult.Lose;\r\n\t\t}\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\tcheckMoveAssist(user, dest, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.checkEligibility(user.params.moveAssist, user, dest, target);\r\n\t}\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\teventExecuteMoveAssist(user, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.execute(user.params.moveAssist, user, target);\r\n\t}\r\n\r\n\tgameEnds() {\r\n\t\tif (this.gameResult === consts.gameResult.Win) {\r\n\t\t\tthis.addNewEffect(new EffectStageClear(this));\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t\t//this.currentPhase = this.PHASE_NONE;\r\n\t\t}\r\n\t\tif (this.gameResult === consts.gameResult.Lose) {\r\n\t\t\t//alert(\"GAME OVER\");\r\n\t\t\tthis.addNewEffect(new EffectGameOver(this));\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t\t//this.currentPhase = this.PHASE_NONE;\r\n\t\t}\r\n\t}\r\n\r\n    update(df) {\r\n\t\tif (this.gameResult !== consts.gameResult.None) {\r\n\t\t\tthis.gameEnds();\r\n\t\t\t// return;\r\n\t\t}\r\n\t\t\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n\t\tif (this.gameResult === consts.gameResult.None) {\r\n\t\t\tif (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n\t\t\tif (this.currentPhase === this.PHASE_PLAYER) this.playerInputHandler.update(df);\r\n\t\t}\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\tthis.statusPanel.draw(ctx);\r\n\t\t\r\n\t\tthis.playerUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\t\t\r\n\t\tthis.threatMap.draw(ctx);\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\t\r\n\t// if making too many {} is really a problem then use this\r\n\tgridPosToPosX(gpx) {\r\n\t\treturn gpx * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\t\r\n\tgridPosToPosY(gpy) {\r\n\t\treturn gpy * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","export default class MapSelecter {\r\n\tconstructor (hGame) {\r\n\t\tlet divSelecter = document.getElementById(\"mapSelecter\");\r\n\t\tdivSelecter.innerHTML = hGame.stageList.getStageListStringForMapSelecter();\r\n\t\t\r\n\t\tlet button = document.getElementById(\"divSelecter_confirm\");\r\n\t\tbutton.addEventListener(\"click\", event => {\r\n\t\t\tvar e = document.getElementById(\"divSelecter_list\");\r\n\t\t\tvar result = e.options[e.selectedIndex].value;\r\n\t\t\t//alert(\"confirmed \" + result);\r\n\t\t\thGame.start(result);\r\n\t\t});\r\n\r\n\t}\r\n}","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport MapSelecter from \"/src/mapSelecter\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\nlet mapSelecter = new MapSelecter(game);\n\ngame.startDefaultStage();\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n\trequestAnimationFrame(gameLoop);\n}\n\nfunction scriptCollapsibles() {\n\t// https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapsible\n\tlet collapsibles = document.getElementsByClassName(\"collapsible\");\n\tfor (let i = 0; i < collapsibles.length; i++) {\n\t\tcollapsibles[i].addEventListener(\"click\", function() {\n\t\t\tthis.classList.toggle(\"active\");\n\t\t\tlet content = this.nextElementSibling; // wtf this is handy\n\t\t\tif (content.style.display === \"block\") {\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t}\n\t\t});\n\t}\n}\n\nscriptCollapsibles() ;\n\nrequestAnimationFrame(gameLoop);\n"]}