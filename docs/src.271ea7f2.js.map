{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/grid.js","src/effects/effectStartPhase.js","src/effects/effectGameOver.js","src/effects/effectStageClear.js","src/enemyAI.js","src/pathFinder.js","src/button.js","src/stage.js","src/stages/oldStage04.js","src/stages/test_reinforcement.js","src/stages/test_barrier.js","src/stages/stage_0_0.js","src/stages/stage_0_1.js","src/stages/stage_0_2.js","src/stages/stage_0_3.js","src/stages/stage_0_4.js","src/stages/stage_0_5.js","src/stages/stage_0_6.js","src/stages/stage_1_1.js","src/stages/stage_1_2.js","src/stages/stage_1_3_easy.js","src/stages/stage_1_4.js","src/stages/stage_1_5.js","src/stages/stageList.js","src/unitBase.js","src/units/protoPlayer.js","src/texts/texts_jp.js","src/units/pKenshi.js","src/units/pKenshiJinlai.js","src/units/pTomato.js","src/units/pBlueberry.js","src/units/pCabbage.js","src/units/protoEnemy.js","src/units/eKenshi.js","src/units/eArcher.js","src/units/eCavLance.js","src/units/eCavBow.js","src/units/eDKAxe.js","src/units/unitCreator.js","src/skills/skillPassive.js","src/skills/passive/extraStamina.js","src/skills/skillCreator.js","src/skills/moveAssist.js","src/skills/moveAssistList.js","src/ui/threatMap.js","src/ui/statusPanel.js","src/ui/generalTimer.js","src/game.js","src/mapSelecter.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","Threat","Barrier","gameResult","None","Win","Lose","GameEnded","moveTypes","infantry","cavalry","flyer","unitTypes","unitBase","pKenshi","pTomato","pBlueberry","pCabbage","pKenshiJinlai","eKenshi","eArcher","eCavLance","eCavBow","eDKAxe","zokusei","none","red","green","blue","moveAssist","reposition","drawBack","swap","skills","extraStamina","settings","showUnitID","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","CTRL_STATE_MA_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","unit","eventSelect","eventSelectUnit","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","toggleThreat","toggleBarrier","x","maxGrid","y","findSelfUnitByGridPos","isActive","stateSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","unitID","checkMoveAssist","stateConfirmMATarget","eventExecuteMovement","eventExecuteAttack","eventExecuteMoveAssist","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","length","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","Grid","gridSize","xMax","yMax","lineHalfWidth","ctx","fillStyle","fillRect","effectStartPhase","isEnemyPhase","frame","maxFrame","image","document","getElementById","drawX","drawY","eventEffectEnd","drawImage","effectGameOver","drawScale","drawAngle","phase","phaseLength","Math","PI","trX","trY","translate","rotate","effectStageClear","dAtk","MAX_DIST","zoku","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","suPDIR","ouPDIR","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","executeWait","target","su","dAttacks","attackRange","minDist","bestGP","forEach","dgp","checkIfGpInMaxGrid","pathData","dist","newGP","suIdx","flagDone","listAttackable","destGP","findBestAttackPosition","executeMoveAttack","ou","params","moveDist","compareZokusei","score","len","i","z","abs","listPossibleDest","bestScore","pdir","pathFinder","floodFill","distTarget","zokuseiChasingDistScore","getChasingPosScore","newScore","executeMove","closestUnitIdx","suLen","ouLen","updatePDIR","findClosestUnit","res","findOppoUnitAndAttack","tryGetClose","makeOneMove","dx","dy","PathFinder","eList","pList","hStage","stage","visited","path","startGP","searchRange","flagIgnoreUnit","prev","attackable","j","queue","head","tail","addAttackable","xNew","yNew","gpNew","checkPassable","goalGP","retrievePath","xOrigin","yOrigin","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","gridPosToPos","drawScaleMax","min","T","Stage","terrainMap","unitList","nameStr","imageCache","appearTurn","eventPlaceUnit","typeID","turn","PHASE_ENEMY","getTerrain","U","stageCreator","barrier","StageList","list","defaultStageIdx","Stage0000","Stage0001","Stage0002","Stage0003","Stage0004","Stage0005","Stage0006","Stage0101","Stage0102","Stage0103","Stage0104","Stage0105","OldStage04","StageTestBarrier","StageTestReinforcement","idxStr","parseInt","UnitBase","imageID","imageSize","staminaMax","moveDistMax","moveType","skillList","skillLevelPair","newSkill","skillCreator","createSkill","skill","level","isPassive","applyOnce","createSkills","applyPassiveSkills","zokuStr","imageZokusei","hp","attack","alive","stamina","updateCoordinate","resetControlState","resetProposal","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","ignoreUnit","checkTerrain","isReachable","acceptPath","eventActionExecuted","coordinate","executeAction","eventBattle","damage","eventUnitDeath","flag","isInPhase","isAlive","graveImage","ProtoPlayer","JSON","parse","stringify","texts","PKenshi","PKenshiJinlai","PTomato","PBlueberry","PCabbage","ProtoEnemy","barrierTimer","barrierConnectionTimer","barrierTotal","barrierSourceList","findUnitByID","imageBarrier","imageZokuseiReal","unitSource","indexOf","removeObjectFromList","initBarrier","flagDrawAllBarrier","flagUnitSelected","timer","lineWidth","strokeStyle","x2","gridPosToPosX","y2","gridPosToPosY","x1","y1","drawLine","beginPath","moveTo","lineTo","stroke","object","idx","splice","EKenshi","EArcher","ECavLance","ECavBow","uType","UnitCreator","EDKAxe","SkillPassive","hUnit","skillID","ExtraStamina","SkillCreator","skillStr","MoveAssist","dUser","dTarget","user","dir","getDirection","gpNewUser","checkStopable","gpNewTarget","eventMovedByMoveAssist","eventUseMoveAssist","MoveAssistList","names","repo","copyToFourDirs","Object","entries","key","value","maID","checkEligibility","execute","ThreatMap","flagShowThreat","threatMap","thickness","drawOffsetX","drawOffsetY","drawDX","drawDY","k","sx","sy","StatusPanel","skillCounter","fillText","font","cUP","drawSkillText","moveAssistList","skillLvPair","GeneralTimer","dfRate","maxValue","Game","canvas","PHASE_NONE","grid","stageList","unitCreator","buttonList","makeButtons","resetGameState","effectList","timerList","framesBeforeChangePhase","enemyAI","statusPanel","inputHandler","playerInputHandler","flagConflict","newUnit","createUnit","initAfterCreation","resolveNewUnitConflict","eventForceMovement","start","stageIdxStr","loadStage","initStage","playerPhase","requirePathUpdate","eventRequirePathUpdate","updateThreatMap","resetTimer","count","countActiveUnits","endPhase","eventNewTurn","effect","endTurn","addNewEffect","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","find","result","button","checkClick","eventClick","attacker","eventLoseHP","eu","eventLoseBarrier","EffectStageClear","EffectGameOver","gameEnds","update","procChangePhase","draw","drawThreat","drawUnitBG","drawUnit","drawBarrierConnection","gpx","gpy","floor","MapSelecter","innerHTML","getStageListStringForMapSelecter","e","options","selectedIndex","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","mapSelecter","startDefaultStage","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","scriptCollapsibles","collapsibles","getElementsByClassName","classList","toggle","content","nextElementSibling","style","display"],"mappings":";AA0DeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1Df,IAAMA,EAAS,CACXC,aAAc,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,GAETC,QAAS,CACLC,QAAS,EACTC,KAAM,EACZC,OAAQ,EACRC,QAAS,GAEPC,WAAY,CACRC,KAAM,EACNC,IAAK,EACLC,KAAM,EACZC,UAAW,GAEZC,UAAW,CACVC,SAAU,EACVC,QAAS,EACTC,MAAO,GAERC,UAAW,CACVC,SAAU,EAEVC,QAAS,EACTC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,cAAe,EAEfC,QAAS,GACTC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,OAAQ,IAETC,QAAS,CACRC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,KAAM,GAEPC,WAAY,CACXC,WAAY,EACZC,SAAU,EACVC,KAAM,GAEPC,OAAQ,CACPR,KAAM,EACNS,aAAc,GAEfC,SAAU,CACTC,YAAY,IAGC5C,EAAAA,EAAAA,QAAAA,QAAAA;;AC8Nd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxRD,IAAA,EAAA,EAAA,QAAA,gBAwRC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAtRD,IAAM6C,EAAkB,EAClBC,EAAsB,EACtBC,EAAyB,EACzBC,EAA2B,EAC3BC,EAA8B,EAgBfC,EAkQpB,WAjQeC,SAAAA,EAAAA,EAAMC,GAAS,EAAA,KAAA,GAClBC,KAAAA,MAAQF,EACRC,KAAAA,QAAUA,EACVE,KAAAA,UAAYT,EAClBU,KAAAA,gBAAkB,KACZC,KAAAA,YAAc,KACdC,KAAAA,YAAc,KACdC,KAAAA,cAAgB,KA0P5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAvPYC,MAAAA,SAAAA,GAENH,KAAAA,YAAcG,EACbA,EAAKC,cACNP,KAAAA,MAAMQ,gBAAgBF,KAmP5B,CAAA,IAAA,gBAhPmB,MAAA,WACO,OAArB,KAAKH,cACHA,KAAAA,YAAYM,gBACZN,KAAAA,YAAc,MAEfH,KAAAA,MAAMS,gBACgB,OAAvB,KAAKJ,gBACHA,KAAAA,cAAcK,yBACdL,KAAAA,cAAgB,MAEXJ,KAAAA,UAAYT,IAsOxB,CAAA,IAAA,0BAnO2BmB,MAAAA,SAAAA,GACfP,KAAAA,YAAcO,EACdV,KAAAA,UAAYP,EACZS,KAAAA,YAAYS,wBAAwBD,KAgOhD,CAAA,IAAA,mBA7NmB,MAAA,WACbT,KAAAA,gBAAkB,OA4NxB,CAAA,IAAA,qBAzNsBI,MAAAA,SAAAA,GACVL,KAAAA,UAAYN,EACZU,KAAAA,cAAgBC,EAChBH,KAAAA,YAAYU,mBAAmBP,GACpCA,EAAKQ,oBAqNZ,CAAA,IAAA,uBAlNqBR,MAAAA,SAAAA,GACTL,KAAAA,UAAYL,EACZS,KAAAA,cAAgBC,EACrBA,EAAKQ,oBA+MZ,CAAA,IAAA,cA5MeC,MAAAA,SAAAA,GACJA,GAAAA,IAAapE,EAAOM,QAAAA,QAAQC,QAAS,CACjC,GAAA,KAAK+C,YAAcT,GAC5B,KAAKS,YAAcR,EAElB,OAAyB,OAAzB,KAAKS,iBAEHA,KAAAA,gBAAkBa,EACE,OAArB,KAAKZ,aAAsB,KAAKa,iBAC7B,GACG,KAAKd,kBAAoBvD,EAAOM,QAAAA,QAAQC,SAE7C8C,KAAAA,MAAMiB,qBACNC,KAAAA,oBACE,IAGFA,KAAAA,oBACE,GAGHA,KAAAA,wBAEM,GAAIH,IAAapE,EAAOM,QAAAA,QAAQE,KAAM,CACrC,GAAA,KAAK8C,YAAcR,EAC3B,OAAyB,OAAzB,KAAKS,iBAEHA,KAAAA,gBAAkBa,GAChB,GACG,KAAKb,kBAAoBvD,EAAOM,QAAAA,QAAQE,MAE7CgD,KAAAA,YAAYgB,mBACZH,KAAAA,gBACAE,KAAAA,oBACE,IAGFA,KAAAA,oBACE,GAGHA,KAAAA,uBAEM,CAAA,GAAIH,IAAapE,EAAOM,QAAAA,QAAQG,OAErC,OADO4C,KAAAA,MAAMoB,gBACb,EACK,GAAIL,IAAapE,EAAOM,QAAAA,QAAQI,QAErC,OADO2C,KAAAA,MAAMqB,iBACb,EAEK,OAAA,IA0Jd,CAAA,IAAA,UAvJWV,MAAAA,SAAAA,GACAA,GAAAA,EAAGW,EAAI,GACPX,EAAGW,EAAI,KAAKtB,MAAMuB,QAAQD,GAC1BX,EAAGa,EAAI,GACPb,EAAGa,EAAI,KAAKxB,MAAMuB,QAAQC,EAGnB,OAAA,EAKP,GAFLN,KAAAA,mBAEK,KAAKjB,YAAcT,EAAiB,CAEX,OAArB,KAAKW,cACAA,KAAAA,YAAYM,gBACZN,KAAAA,YAAc,MAEnBG,IAAAA,EAAO,KAAKN,MAAMyB,sBAAsB,KAAK1B,QAASY,GAUtDL,GATS,OAATA,GACIA,EAAKoB,aAAY,KAAKzB,UAAYR,GACjCkC,KAAAA,YAAYrB,IAGJ,QADbA,EAAO,KAAKN,MAAM4B,sBAAsB,KAAK7B,QAASY,KAE7CgB,KAAAA,YAAYrB,GAGZ,OAATA,EAIO,OAFdU,KAAAA,gBACYf,KAAAA,UAAYT,GACV,MAER,CAAA,GAAI,KAAKS,YAAcR,EAAqB,CAE3Ca,IAAAA,EAAO,KAAKN,MAAM6B,kBAAkBlB,GACpCL,OAAS,OAATA,GAAiB,KAAKH,YAAY2B,qBAAqBnB,IAClDoB,KAAAA,wBAAwBpB,IACtB,GAEM,OAATL,GACAA,EAAKP,UAAY,KAAKA,SACtB,KAAKI,YAAY6B,kBACb1B,EACA,KAAKH,YAAY8B,UAGpCC,EACmB,uDAECH,KAAAA,wBAAwB,KAAK5B,YAAY8B,SACzCE,KAAAA,mBAAmB7B,IACjB,GACS,OAATA,GACtBA,EAAK8B,SAAW,KAAKjC,YAAYiC,QAClB9B,EAAKP,UAAY,KAAKA,SACtB,KAAKC,MAAMqC,gBACzB,KAAKlC,YACL,KAAKA,YAAY8B,QACjB3B,IAGIyB,KAAAA,wBAAwB,KAAK5B,YAAY8B,SAC1BK,KAAAA,qBAAqBhC,IAClC,IAEQ4B,EAAW,uBACNlB,KAAAA,iBACE,GAGZ,GAAI,KAAKf,YAAcP,EAAwB,CAE9CY,IAAAA,EAAO,KAAKN,MAAM6B,kBAAkBlB,GACpCL,OAAS,OAATA,GACAK,EAAGW,IAAM,KAAKlB,YAAYkB,GAC1BX,EAAGa,IAAM,KAAKpB,YAAYoB,GAGrBrB,KAAAA,YAAYoC,qBAAqB5B,GACjCK,KAAAA,iBACE,GAEM,OAATV,GACAA,EAAKP,UAAY,KAAKA,SACtB,KAAKI,YAAY6B,kBAAkB1B,EAAM,KAAKF,cAEzC+B,KAAAA,mBAAmB7B,IACjB,GACS,OAATA,GACtBA,EAAK8B,SAAW,KAAKjC,YAAYiC,QAClB9B,EAAKP,UAAY,KAAKA,SACtB,KAAKC,MAAMqC,gBACzB,KAAKlC,YACL,KAAKC,YACLE,IAGmBgC,KAAAA,qBAAqBhC,IACnB,IAGFU,KAAAA,iBACE,GAGZ,GAAI,KAAKf,YAAcN,EACtBgB,OAAAA,EAAGW,IAAM,KAAKjB,cAAc4B,QAAQX,GACpCX,EAAGa,IAAM,KAAKnB,cAAc4B,QAAQT,GAG/BrB,KAAAA,YAAYqC,mBAAmB,KAAKnC,eACpCW,KAAAA,iBACE,IAGFA,KAAAA,iBACE,GAER,GAAI,KAAKf,YAAcL,EACtBe,OAAAA,EAAGW,IAAM,KAAKjB,cAAc4B,QAAQX,GACpCX,EAAGa,IAAM,KAAKnB,cAAc4B,QAAQT,GAG3CxB,KAAAA,MAAMyC,uBAAuB,KAAKtC,YAAa,KAAKE,eACxCW,KAAAA,iBACE,IAGFA,KAAAA,iBACE,GAaR,OATPkB,EACI,mDACIvB,EAAGW,EACH,QACAX,EAAGa,EACH,kBACA,KAAKvB,YAGN,MAOd,EAAA,GAHD,SAASiC,EAAWQ,IAGnB,QAAA,QAAA;;ACvNI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjEL,IAAA,EAAA,EAAA,QAAA,yBAiEK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/DgBC,IAAAA,EA+DhB,WA9DW7C,SAAAA,EAAAA,GAAM,IAAA,EAAA,KAAA,EAAA,KAAA,GACTE,KAAAA,MAAQF,EACR8C,KAAAA,QAAU9C,EAAK8C,QACfC,KAAAA,mBAAqB,IAAIhD,EAAJ,QAAuBC,GAAM,GAClDgD,KAAAA,cAAgB,GAGhBC,KAAAA,SAAW,4BAA4BC,KAAKC,UAAUC,WACtDC,KAAAA,QAAU,oBAAoBH,KAAKC,UAAUC,WAC9CE,IAAAA,EAAa,KAAKL,SAAW,aAAe,QAE3CH,KAAAA,QAAQS,iBAAiBD,EAAY,SAAAE,GACtC,EAAKC,WAAW,EAAKC,wBAAwBF,IACzC,EAAKP,UAAUO,EAAMG,mBAGzB,KAAKV,WACAH,KAAAA,QAAQS,iBAAiB,YAAa,SAAAC,QAC7BI,IAAlBJ,EAAMK,SAAkD,IAAzBL,EAAMK,QAAQC,QAChDN,EAAMG,mBAEMb,KAAAA,QAAQS,iBAAiB,WAAY,SAAAC,QAC5BI,IAAlBJ,EAAMK,SAAkD,IAAzBL,EAAMK,QAAQC,QAChDN,EAAMG,oBAuCN,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,0BAlCuBH,MAAAA,SAAAA,QAIEI,IAAlBJ,EAAMK,UAAuBL,EAAQA,EAAMK,QAAQ,IAGnDE,IAAAA,EAAO,KAAKjB,QAAQkB,wBACjB,MAAA,CACHxC,GACMgC,EAAMS,QAAUF,EAAKG,OAASH,EAAKI,MAAQJ,EAAKG,MAClD,KAAKpB,QAAQsB,MACjB1C,GACM8B,EAAMa,QAAUN,EAAKO,MAAQP,EAAKQ,OAASR,EAAKO,KAClD,KAAKxB,QAAQ0B,UAoBxB,CAAA,IAAA,aAhBUC,MAAAA,SAAAA,GACH,KAAKvE,MAAMwE,gBACX,KAAKxE,MAAMyE,eAAiB,KAAKzE,MAAM0E,cACtC5B,KAAAA,cAAc6B,KAAKJ,KAa3B,CAAA,IAAA,SAVMK,MAAAA,SAAAA,GACIA,KAAAA,EAAK,GAAK,KAAK9B,cAAcc,OAAS,GAAG,CAC5CgB,IACLL,IAAAA,EAAM,KAAKzB,cAAc+B,QACzBN,EAAIjD,GAAK,KAAKtB,MAAM8E,WAAaP,EAAI/C,GAAK,KAAKxB,MAAM+E,WACnDlC,KAAAA,mBAAmBmC,QAAQ,KAAKhF,MAAMiF,aAAaV,IAEnD1B,KAAAA,mBAAmBqC,YAAY,KAAKlF,MAAMmF,WAAWZ,SAGzD,EAAA,GAAA,QAAA,QAAA;;ACrCA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5BgBa,IAAAA,EA4BhB,WA3BWC,SAAAA,EAAAA,EAAU9D,GAAS,EAAA,KAAA,GACtB8D,KAAAA,SAAWA,EACXC,KAAAA,KAAO/D,EAAQD,EACfiE,KAAAA,KAAOhE,EAAQC,EAEfgE,KAAAA,cAAgB,EAsBxB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAnBIC,MAAAA,SAAAA,GACDA,EAAIC,UAAY,OACX,IAAA,IAAIpE,EAAI,EAAGA,GAAK,KAAKgE,KAAMhE,IAC5BmE,EAAIE,SACArE,EAAI,KAAK+D,SAAW,KAAKG,cACzB,EAAI,KAAKA,cACT,EAAI,KAAKA,cACT,KAAKD,KAAO,KAAKF,SAAW,EAAI,KAAKG,eAIxC,IAAA,IAAIhE,EAAI,EAAGA,GAAK,KAAK+D,KAAM/D,IAC5BiE,EAAIE,SACA,EAAI,KAAKH,cACThE,EAAI,KAAK6D,SAAW,KAAKG,cACzB,KAAKF,KAAO,KAAKD,SAAW,EAAI,KAAKG,cACrC,EAAI,KAAKA,mBAGpB,EAAA,GAAA,QAAA,QAAA;;ACNA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtBgBI,IAAAA,EAsBhB,WArBW5F,SAAAA,EAAAA,EAAO6F,GAAc,EAAA,KAAA,GACxBC,KAAAA,MAAQ,EACRC,KAAAA,SAAW,IACXF,KAAAA,aAAeA,EACF,KAAKG,MAAnBH,EAA2BI,SAASC,eAAe,iBACrCD,SAASC,eAAe,iBACrCC,KAAAA,MAAQnG,EAAM8E,UAAY9E,EAAMqF,SAAW,GAC3Ce,KAAAA,MACApG,EAAMqF,SAAWrF,EAAMuB,QAAQC,EAAK,EAAI,KAAKwE,MAAM1B,OAAS,EAC5DtE,KAAAA,MAAQA,EAYhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SATM4E,MAAAA,SAAAA,GACEkB,KAAAA,OAASlB,EACTuB,KAAAA,OAAS,GAAKvB,EACf,KAAKkB,MAAQ,KAAKC,UAAU,KAAK/F,MAAMqG,eAAe,QAM7D,CAAA,IAAA,OAHIZ,MAAAA,SAAAA,GACG,KAAKK,OAAS,KAAKC,UACnBN,EAAIa,UAAU,KAAKN,MAAO,KAAKG,MAAO,KAAKC,WAClD,EAAA,GAAA,QAAA,QAAA;;AC8BA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApDgBG,IAAAA,EAoDhB,WAnDWvG,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACV8F,KAAAA,MAAQ,EACRC,KAAAA,SAAW,IACjBnD,KAAAA,QAAUqD,SAASC,eAAe,cAClCF,KAAAA,MAAQC,SAASC,eAAe,uBAC1BC,KAAAA,MAAQ,KAAKvD,QAAQsB,MAAQ,EAC7BkC,KAAAA,MAAQ,KAAKxD,QAAQ0B,OAAS,EACpCkC,KAAAA,UAAY,IACZC,KAAAA,UAAY,EACZC,KAAAA,MAAQ,EACRC,KAAAA,YAAc,CAAC,GAAI,IAAK,KAAKZ,UACvB/F,KAAAA,MAAQA,EAwChB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SArCM4E,MAAAA,SAAAA,GACEkB,KAAAA,OAASlB,EACV,KAAKkB,MAAQ,KAAKC,UAAU,KAAK/F,MAAMqG,eAAe,MAC5D,KAAKP,OAAS,KAAKa,YAAY,KAAKD,SAClCA,KAAAA,QACc,IAAf,KAAKA,QACHF,KAAAA,UAAY,EACZC,KAAAA,UAAY,IAGM,IAAf,KAAKC,QACTF,KAAAA,WAAa,IAAa,KAAKG,YAAY,GAAK/B,EAChD6B,KAAAA,WAAa,EAAIG,KAAKC,GAAK,EAAI,KAAKF,YAAY,GAAK/B,GAExC,IAAf,KAAK8B,QACHF,KAAAA,WAAa5B,GAAM,KAAK+B,YAAY,GAAK,KAAKA,YAAY,OAsB7D,CAAA,IAAA,OAjBIlB,MAAAA,SAAAA,GACG,GAAA,KAAKK,OAAS,KAAKC,SAAU,CAClCe,IAAAA,EAAM,KAAKlE,QAAQsB,MAAM,EAAG6C,EAAM,KAAKnE,QAAQ0B,OAAO,EAC1DmB,EAAIuB,UAAUF,EAAKC,GACnBtB,EAAIwB,OAAO,KAAKR,WAChBhB,EAAIuB,WAAWF,GAAMC,GACZtB,EAAIa,UACZ,KAAKN,MACL,KAAKG,MAAQ,KAAKH,MAAM9B,MAAQ,KAAKsC,UAAY,EACjD,KAAKJ,MAAQ,KAAKJ,MAAM1B,OAAS,KAAKkC,UAAY,EAClD,KAAKR,MAAM9B,MAAQ,KAAKsC,UACxB,KAAKR,MAAM1B,OAAS,KAAKkC,WAE1Bf,EAAIuB,UAAUF,EAAKC,GACnBtB,EAAIwB,QAAQ,KAAKR,WACjBhB,EAAIuB,WAAWF,GAAMC,QAEnB,EAAA,GAAA,QAAA,QAAA;;ACAA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApDgBG,IAAAA,EAoDhB,WAnDWlH,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACV8F,KAAAA,MAAQ,EACRC,KAAAA,SAAW,IACjBnD,KAAAA,QAAUqD,SAASC,eAAe,cAClCF,KAAAA,MAAQC,SAASC,eAAe,yBAC1BC,KAAAA,MAAQ,KAAKvD,QAAQsB,MAAQ,EAC7BkC,KAAAA,MAAQ,KAAKxD,QAAQ0B,OAAS,EACpCkC,KAAAA,UAAY,IACZC,KAAAA,UAAY,EACZC,KAAAA,MAAQ,EACRC,KAAAA,YAAc,CAAC,GAAI,IAAK,KAAKZ,UACvB/F,KAAAA,MAAQA,EAwChB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SArCM4E,MAAAA,SAAAA,GACEkB,KAAAA,OAASlB,EACV,KAAKkB,MAAQ,KAAKC,UAAU,KAAK/F,MAAMqG,eAAe,MAC5D,KAAKP,OAAS,KAAKa,YAAY,KAAKD,SAClCA,KAAAA,QACc,IAAf,KAAKA,QACHF,KAAAA,UAAY,EACZC,KAAAA,UAAY,IAGM,IAAf,KAAKC,QACTF,KAAAA,WAAa,IAAa,KAAKG,YAAY,GAAK/B,EAChD6B,KAAAA,WAAa,EAAIG,KAAKC,GAAK,EAAI,KAAKF,YAAY,GAAK/B,GAExC,IAAf,KAAK8B,QACHF,KAAAA,WAAa5B,GAAM,KAAK+B,YAAY,GAAK,KAAKA,YAAY,OAsB7D,CAAA,IAAA,OAjBIlB,MAAAA,SAAAA,GACG,GAAA,KAAKK,OAAS,KAAKC,SAAU,CAClCe,IAAAA,EAAM,KAAKlE,QAAQsB,MAAM,EAAG6C,EAAM,KAAKnE,QAAQ0B,OAAO,EAC1DmB,EAAIuB,UAAUF,EAAKC,GACnBtB,EAAIwB,OAAO,KAAKR,WAChBhB,EAAIuB,WAAWF,GAAMC,GACZtB,EAAIa,UACZ,KAAKN,MACL,KAAKG,MAAQ,KAAKH,MAAM9B,MAAQ,KAAKsC,UAAY,EACjD,KAAKJ,MAAQ,KAAKJ,MAAM1B,OAAS,KAAKkC,UAAY,EAClD,KAAKR,MAAM9B,MAAQ,KAAKsC,UACxB,KAAKR,MAAM1B,OAAS,KAAKkC,WAE1Bf,EAAIuB,UAAUF,EAAKC,GACnBtB,EAAIwB,QAAQ,KAAKR,WACjBhB,EAAIuB,WAAWF,GAAMC,QAEnB,EAAA,GAAA,QAAA,QAAA;;ACiNA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArQL,IAAA,EAAA,EAAA,QAAA,4BACA,EAAA,EAAA,QAAA,gBAoQK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjQL,IAAII,EAAO,GACXA,EAAK,GAAK,GACVA,EAAK,GAAK,CAAC,CAAC7F,EAAE,EAAGE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAAI,CAACF,EAAE,EAAIE,EAAE,GAAI,CAACF,EAAE,EAAGE,GAAG,IAC3D2F,EAAK,GAAK,CAAC,CAAC7F,EAAE,EAAGE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAAK,CAACF,EAAE,EAAIE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAC1D,CAACF,EAAE,EAAIE,EAAE,GAAI,CAACF,GAAG,EAAGE,GAAG,GAAI,CAACF,EAAE,EAAIE,GAAG,GAAI,CAACF,EAAE,EAAGE,GAAG,IACrD,IAAM4F,EAAW,MAEbC,EAAO1K,EAAOgC,QAAAA,QAEG2I,EAwPhB,WAvPWtH,SAAAA,EAAAA,EAAOD,GAAS,EAAA,KAAA,GACnBC,KAAAA,MAAQA,EACduB,KAAAA,QAAU,KAAKvB,MAAMuB,QAEfxB,KAAAA,QAAUA,EACX,KAAKA,SACAwH,KAAAA,OAASvH,EAAMwH,cACfC,KAAAA,OAASzH,EAAM0H,iBAEfH,KAAAA,OAASvH,EAAM0H,eACfD,KAAAA,OAASzH,EAAMwH,eAGnBG,KAAAA,OAAS,IAAI9H,EAAJ,QAAuB,KAAKG,MAAOD,GAElD6H,KAAAA,OAAS,KACTC,KAAAA,OAAS,KAEHC,KAAAA,iBAAmB,EACnBC,KAAAA,oBAAsB,GACtBC,KAAAA,kBAAoB,GACpBC,KAAAA,kBAAoB,GAkO5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cA/NW3H,MAAAA,SAAAA,GACHqH,KAAAA,OAAO3C,QAAQ1E,EAAK2B,SACpB0F,KAAAA,OAAOzC,YAAYvI,EAAOM,QAAAA,QAAQE,MACxCwK,KAAAA,OAAOzC,YAAYvI,EAAOM,QAAAA,QAAQE,MAC5B2K,KAAAA,iBAAmB,KAAKG,oBA2NhC,CAAA,IAAA,cAxNW3H,MAAAA,SAAAA,EAAM4H,GAChBA,EAAK5G,IAAMhB,EAAK2B,QAAQX,GAAK4G,EAAK1G,IAAMlB,EAAK2B,QAAQT,GAI9CmG,KAAAA,OAAO3C,QAAQ1E,EAAK2B,SACpB0F,KAAAA,OAAO3C,QAAQkD,GACfP,KAAAA,OAAO3C,QAAQkD,GACfJ,KAAAA,iBAAmB,KAAKE,mBAN7BG,KAAAA,YAAY7H,KAsNf,CAAA,IAAA,oBA7MiBA,MAAAA,SAAAA,EAAM4H,EAAME,GAErBT,KAAAA,OAAO3C,QAAQ1E,EAAK2B,SACrBiG,EAAK5G,IAAMhB,EAAK2B,QAAQX,GAAK4G,EAAK1G,IAAMlB,EAAK2B,QAAQT,GAChDmG,KAAAA,OAAO3C,QAAQoD,EAAOnG,SACtB0F,KAAAA,OAAO3C,QAAQoD,EAAOnG,WAEtB0F,KAAAA,OAAO3C,QAAQkD,GACfP,KAAAA,OAAO3C,QAAQoD,EAAOnG,SACtB0F,KAAAA,OAAO3C,QAAQoD,EAAOnG,UAE1B6F,KAAAA,iBAAmB,KAAKC,sBAkMhC,CAAA,IAAA,qBA/LezG,MAAAA,SAAAA,EAAGE,GACjBF,QAAAA,EAAI,GAAKE,EAAI,GAAKF,EAAI,KAAKC,QAAQD,GAAKE,EAAI,KAAKD,QAAQC,KA8L1D,CAAA,IAAA,yBA1LmB6G,MAAAA,SAAAA,EAAID,GAAQ,IAAA,EAAA,KAC9BE,EAAWnB,EAAKkB,EAAGE,aAEnBC,EAAUpB,EACVqB,EAAS,KAgBNA,OAfPH,EAASI,QAAQ,SAAAC,GACZ,GAAA,EAAKC,mBAAmBR,EAAOnG,QAAQX,EAAIqH,EAAIrH,EAAG8G,EAAOnG,QAAQT,EAAImH,EAAInH,IAC5E6G,EAAGQ,SAASC,KAAKV,EAAOnG,QAAQX,EAAIqH,EAAIrH,GAAG8G,EAAOnG,QAAQT,EAAImH,EAAInH,GAAKgH,EACtE,CACGO,IAAAA,EAAQ,CAACzH,EAAI8G,EAAOnG,QAAQX,EAAEqH,EAAIrH,EAAIE,EAAI4G,EAAOnG,QAAQT,EAAEmH,EAAInH,GAC/DlB,EAAO,EAAKN,MAAM6B,kBAAkBkH,GAC3B,OAATzI,GAAiBA,EAAK8B,SAAWiG,EAAGjG,SACvCoG,EAAUH,EAAGQ,SAASC,KAAKV,EAAOnG,QAAQX,EAAIqH,EAAIrH,GAAG8G,EAAOnG,QAAQT,EAAImH,EAAInH,GAC5EiH,EAASM,MAOLN,IAsKJ,CAAA,IAAA,wBAnKqBO,MAAAA,SAAAA,GAAO,IAAA,EAAA,KACrBX,EAAK,KAAKd,OAAOyB,GACvBC,GAAW,EAqBFA,OAnBPZ,EAAGQ,SAASK,eAAeR,QAAQ,SAAA/H,GACpCsI,IAAAA,EAAAA,CACAb,IAAAA,EAAS,EAAKpI,MAAM4B,sBAAsB,EAAK7B,QAASY,GACxDyH,GAAW,OAAXA,EAAiB,CAEhBe,IAAAA,EAAS,EAAKC,uBAAuBf,EAAID,GACzCe,GAAW,OAAXA,EAAiB,OACpB,EAAKE,kBACJhB,EACAc,EACAf,QAEDa,GAAW,OAODA,IA4IV,CAAA,IAAA,iBAxIWZ,MAAAA,SAAAA,EAAIiB,GACdjB,OAAc,OAAdA,EAAGkB,QAAiC,OAAdD,EAAGC,OAAwB,OAC3B7F,IAAtB2E,EAAGkB,OAAO5K,cAA+C+E,IAAtB4F,EAAGC,OAAO5K,QAA8B,EAC3E0J,EAAGkB,OAAO5K,UAAY0I,EAAKzI,MAAQ0K,EAAGC,OAAO5K,UAAY0I,EAAKzI,KAAa,EAC3EyJ,EAAGkB,OAAO5K,UAAY0I,EAAKxI,KAAOyK,EAAGC,OAAO5K,UAAY0I,EAAKvI,OAChEuJ,EAAGkB,OAAO5K,UAAY0I,EAAKvI,OAASwK,EAAGC,OAAO5K,UAAY0I,EAAKtI,MAC/DsJ,EAAGkB,OAAO5K,UAAY0I,EAAKtI,MAAQuK,EAAGC,OAAO5K,UAAY0I,EAAKxI,IACvD,EACJyK,EAAGC,OAAO5K,UAAY0I,EAAKxI,KAAOwJ,EAAGkB,OAAO5K,UAAY0I,EAAKvI,OAChEwK,EAAGC,OAAO5K,UAAY0I,EAAKvI,OAASuJ,EAAGkB,OAAO5K,UAAY0I,EAAKtI,MAC/DuK,EAAGC,OAAO5K,UAAY0I,EAAKtI,MAAQsJ,EAAGkB,OAAO5K,UAAY0I,EAAKxI,KACtD,EACF,IA4HJ,CAAA,IAAA,0BAxHoBwJ,MAAAA,SAAAA,EAAIiB,GAEpB,QADI,EACMjB,EAAGmB,SAAY,IAAO,KAAKC,eAAepB,EAAIiB,KAsH5D,CAAA,IAAA,qBAlHejB,MAAAA,SAAAA,EAAI1H,EAAIyH,GAGrB,IAFDsB,IAAAA,EAAQ,EACRC,EAAM,KAAKlC,OAAO7D,OACbgG,EAAI,EAAGA,EAAID,EAAKC,IAAM,CAC1BC,IAAAA,EAAI,KAAKJ,eAAepB,EAAI,KAAKZ,OAAOmC,IAC5CF,GAAS,IAAM,KAAK7B,OAAO+B,GAAGd,KAAKnI,EAAGW,GAAGX,EAAGa,IAAOqI,EAM7CH,OAJPA,GAAS9C,KAAKkD,IACblD,KAAKkD,IAAI1B,EAAOnG,QAAQX,EAAIX,EAAGW,GAC/BsF,KAAKkD,IAAI1B,EAAOnG,QAAQT,EAAIb,EAAGa,MAyG7B,CAAA,IAAA,cApGWwH,MAAAA,SAAAA,GAAO,IAAA,EAAA,KACXX,EAAK,KAAKd,OAAOyB,GACjBX,GAAwC,IAAxCA,EAAGQ,SAASkB,iBAAiBnG,OAAc,OAAO,EAElD4E,IAAAA,EAAU,IACVC,EAAS,KAEfuB,EAAY,KA8BNvB,OA7BJJ,EAAGQ,SAASkB,iBAAiBrB,QAAQ,SAAA/H,GAC7B,GAAuD,OAAvD,EAAKX,MAAMyB,sBAAsB,EAAK1B,QAASY,IAC3D,EAAKX,MAAMyB,sBAAsB,EAAK1B,QAASY,KAAQ0H,EAD3C,CAIA4B,IAAAA,EAAO,EAAKjK,MAAMkK,WAAWC,UAAU9B,EAAI1H,EAAI,KAAK,GACxD,EAAK8G,OAAOiB,QAAQ,SAAAN,GACZgC,IAAAA,EACAH,EAAKnB,KAAKV,EAAOnG,QAAQX,GAAG8G,EAAOnG,QAAQT,GACxD,EAAK6I,wBAAwBhC,EAAID,GAEpBgC,GAAAA,EAAa5B,EACbA,EAAU4B,EACV3B,EAAS9H,EACXyH,EACb4B,EAAY,EAAKM,mBAAmBjC,EAAI1H,EAAIyH,QAE1B,GAAIgC,IAAe5B,EAAS,CAC1C+B,IAAAA,EAAW,EAAKD,mBAAmBjC,EAAI1H,EAAIyH,GAE3CmC,EAAWP,IACdvB,EAAS9H,EACIyH,EACb4B,EAAYO,SAMK,OAAX9B,IACK+B,KAAAA,YAAYnC,EAAII,IACd,KA6Dd,CAAA,IAAA,kBAvDc,MAAA,WAKN,IALM,IAAA,EAAA,KACbD,EAAU,IACViC,EAAiB,KAEjBd,EAAM,KAAKpC,OAAO3D,OACPgG,EAAAA,SAAAA,GAEV,IADK,EAAKrC,OAAOqC,GACblI,WAAY,MAAA,WACpB,EAAK+F,OAAOiB,QAAQ,SAAAY,GAEfR,IAAAA,EAAO,EAAKlB,OAAOgC,GAAGd,KAAKQ,EAAGrH,QAAQX,GAAGgI,EAAGrH,QAAQT,GAEpDsH,EAAON,IACVA,EAAUM,EACV2B,EAAiBb,MATLA,EAAI,EAAGA,EAAID,EAAKC,IAAhBA,EAAAA,GAcRa,OAAAA,IAoCJ,CAAA,IAAA,aAhCS,MAAA,WACRC,IAAAA,EAAQ,KAAKnD,OAAO3D,OACnBgE,KAAAA,OAAS,GACT,IAAA,IAAIgC,EAAI,EAAGA,EAAIc,EAAOd,IACrBhC,KAAAA,OAAOgC,GAAK,KAAK5J,MAAMkK,WAAWC,UACtC,KAAK5C,OAAOqC,GAAI,KAAKrC,OAAOqC,GAAG3H,QAAS,KAAK,GAG3C0I,IAAAA,EAAQ,KAAKlD,OAAO7D,OACnBiE,KAAAA,OAAS,GACT,IAAA,IAAI+B,EAAI,EAAGA,EAAIe,EAAOf,IACrB/B,KAAAA,OAAO+B,GAAK,KAAK5J,MAAMkK,WAAWC,UACtC,KAAK1C,OAAOmC,GAAI,KAAKnC,OAAOmC,GAAG3H,QAAS,KAAK,KAoB5C,CAAA,IAAA,cAfa,MAAA,WACX2I,KAAAA,aACD5B,IAAAA,EAAQ,KAAK6B,kBACb7B,GAAU,OAAVA,EAAgB,CACf8B,IAAAA,EAAM,KAAKC,sBAAsB/B,IACzB,IAAR8B,IAAeA,EAAM,KAAKE,YAAYhC,KAC9B,IAAR8B,GAAe,KAAK3C,YAAY,KAAKZ,OAAOyB,OAS9C,CAAA,IAAA,SALMpE,MAAAA,SAAAA,GACEkD,KAAAA,kBAAoBlD,EACrB,KAAKkD,kBAAoB,GACpBmD,KAAAA,kBAEZ,EAAA,GAAA,QAAA,QAAA;;ACjGH,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApKF,IAAMC,EAAK,CAAC,GAAI,EAAG,EAAI,GACjBC,EAAK,CAAC,EAAI,EAAG,GAAI,GACnBhE,EAAO,GACXA,EAAK,GAAK,GACVA,EAAK,GAAK,CAAC,CAAC7F,EAAE,EAAGE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAAI,CAACF,EAAE,EAAIE,EAAE,GAAI,CAACF,EAAE,EAAGE,GAAG,IAC3D2F,EAAK,GAAK,CAAC,CAAC7F,EAAE,EAAGE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAAK,CAACF,EAAE,EAAIE,EAAE,GAAK,CAACF,GAAG,EAAGE,EAAE,GAC1D,CAACF,EAAE,EAAIE,EAAE,GAAI,CAACF,GAAG,EAAGE,GAAG,GAAI,CAACF,EAAE,EAAIE,GAAG,GAAI,CAACF,EAAE,EAAGE,GAAG,IACrD,IAAM4F,EAAW,IAEIgE,EA2JnB,WA1JcpL,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACVA,KAAAA,MAAQA,EACRuB,KAAAA,QAAUvB,EAAMuB,QAChB8J,KAAAA,MAAQrL,EAAMwH,cACd8D,KAAAA,MAAQtL,EAAM0H,eACd6D,KAAAA,OAASvL,EAAMwL,MAEfC,KAAAA,QAAU,KACVC,KAAAA,KAAO,KAkJlB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YArIYpL,MAAAA,SAAAA,EAAMqL,EAASC,GAIhB,IAJ6BC,IAAAA,EAAiB,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAC/CC,EAAO,GACPhD,EAAO,GACbiD,EAAa,GACFnC,EAAI,EAAGA,GAAK,KAAKrI,QAAQD,EAAGsI,IAAK,CACtCkC,EAAKlC,GAAK,GACVd,EAAKc,GAAK,GACVmC,EAAWnC,GAAK,GACX,IAAA,IAAIoC,EAAI,EAAGA,GAAK,KAAKzK,QAAQC,EAAGwK,IACjClD,EAAKc,GAAGoC,GAAK5E,EACb0E,EAAKlC,GAAGoC,GAAK,KACbD,EAAWnC,GAAGoC,IAAK,EAIvBC,IAAAA,EAAQ,GACRC,EAAO,EACPC,EAAO,EACXF,EAAMC,GAAQP,EACdG,EAAKH,EAAQrK,GAAGqK,EAAQnK,GAAKmK,EAC7B7C,EAAK6C,EAAQrK,GAAGqK,EAAQnK,GAAK,EACzBuI,IAAAA,EAAmB,GACvBA,EAAiBpF,KAAKgH,GACxBzC,IAAAA,EAAiB,GAEjBZ,EAAWnB,EAAK7G,EAAKiI,aAGZ2D,IAFRE,KAAAA,cAAc9D,EAAUyD,EAAY7C,EAAgByC,EAAQrK,EAAGqK,EAAQnK,GAE/D0K,EAAOC,GAENrD,KAAAA,EAAKmD,IADTE,GACqB7K,GAAG2K,EAAME,GAAM3K,IAAMoK,GACrC,IAAA,IAAIhC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpByC,IAAAA,EAAOJ,EAAME,GAAM7K,EAAI4J,EAAGtB,GAC1B0C,EAAOL,EAAME,GAAM3K,EAAI2J,EAAGvB,GAE1ByC,GAAAA,GAAQ,GACRA,GAAQ,KAAK9K,QAAQD,GACrBgL,GAAQ,GACRA,GAAQ,KAAK/K,QAAQC,GACrBsH,EAAKuD,GAAMC,KAAUlF,EACvB,CACMmF,IAAAA,EAAQ,CAAEjL,EAAG+K,EAAM7K,EAAG8K,GACtBhM,EAAKkM,cAAcD,EAAOV,KAE1BI,IADAC,GACcK,EACdzD,EAAKuD,GAAMC,GAAQxD,EAAKmD,EAAME,GAAM7K,GAAG2K,EAAME,GAAM3K,GAAK,EACxDsK,EAAKO,GAAMC,GAAQL,EAAME,GAEtCC,KAAAA,cAAc9D,EAAUyD,EAAY7C,EAAgBmD,EAAMC,GAE7CvC,EAAiBpF,KAAK4H,KAarC1D,MAPc,CACpBiD,KAAMA,EACNhD,KAAMA,EACNiB,iBAAkBA,EAClBgC,WAAYA,EACZ7C,eAAgBA,KAwEjB,CAAA,IAAA,cAhEcL,MAAAA,SAAAA,EAAU4D,GACX5D,OAAAA,EAASC,KAAK2D,EAAOnL,GAAGmL,EAAOjL,KAAO4F,IA+DnD,CAAA,IAAA,eAtDeyB,MAAAA,SAAAA,EAAU8C,EAASc,GACxBX,IAAAA,EAAOjD,EAASiD,KAChBA,GAA6B,OAA7BA,EAAKW,EAAOnL,GAAGmL,EAAOjL,GAAa,CAK5BF,IAJHA,IAAAA,EAAImL,EAAOnL,EACXE,EAAIiL,EAAOjL,EACXsH,EAAO,EAEJxH,IAAMqK,EAAQrK,GAAKE,IAAMmK,EAAQnK,GAAG,CACvCsH,IACIuD,IAAAA,EAAOP,EAAKxK,GAAGE,GAAGF,EACtBE,EAAIsK,EAAKxK,GAAGE,GAAGA,EACfF,EAAI+K,EAGJX,IAAAA,EAAO,GACXpK,EAAImL,EAAOnL,EACXE,EAAIiL,EAAOjL,EACN,IAAA,IAAIoI,EAAI,EAAGA,EAAId,EAAMc,IAAK,CAC3B8B,EAAK5C,EAAOc,EAAI,GAAKkC,EAAKxK,GAAGE,GACzB6K,IAAAA,EAAOP,EAAKxK,GAAGE,GAAGF,EACtBE,EAAIsK,EAAKxK,GAAGE,GAAGA,EACfF,EAAI+K,EAEDX,OAAAA,EAEJ,OAAA,OA6Bb,CAAA,IAAA,WAzBWpL,MAAAA,SAAAA,EAAMqL,EAASc,GAChB5D,IAAAA,EAAW,KAAKsB,UAAU7J,EAAMqL,EAASrL,EAAKkJ,UAE3C,OAAA,KAAKkD,aAAa7D,EAAU8C,EAASc,KAsBlD,CAAA,IAAA,qBAlBkBnL,MAAAA,SAAAA,EAAGE,GACjBF,QAAAA,EAAI,GAAKE,EAAI,GAAKF,EAAI,KAAKC,QAAQD,GAAKE,EAAI,KAAKD,QAAQC,KAiB7D,CAAA,IAAA,gBAba8G,MAAAA,SAAAA,EAAUyD,EAAY7C,EAAgByD,EAASC,GAC7D,IAAA,EAAA,KACCtE,EAASI,QAAQ,SAAAC,GAEZ,EAAKC,mBAAmB+D,EAAUhE,EAAIrH,EAAGsL,EAAUjE,EAAInH,KACzDuK,EAAWY,EAAUhE,EAAIrH,GAAGsL,EAAUjE,EAAInH,KAE3CuK,EAAWY,EAAUhE,EAAIrH,GAAGsL,EAAUjE,EAAInH,IAAK,EAC/C0H,EAAevE,KAAK,CACnBrD,EAAIqL,EAAUhE,EAAIrH,EAAGE,EAAIoL,EAAUjE,EAAInH,WAI1C,EAAA,GAAA,QAAA,QAAA;;AC/GA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArDF,IAAIqL,EAAkB,GAWDC,EA0CnB,WAzCY9M,SAAAA,EAAAA,EAAO+M,EAAWC,EAAIC,GAAQ,EAAA,KAAA,GACrCjN,KAAAA,MAAQA,EACRkN,KAAAA,IAAMjH,SAASC,eAAe6G,GAE9BhM,KAAAA,SAAWiM,EACXC,KAAAA,OAASA,EAET1I,KAAAA,IAAM,KAAKvE,MAAMmN,aAAaF,GAG9BzG,KAAAA,UAAY,EACZ4G,KAAAA,aAAe,EA8BpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aA1BU7I,MAAAA,SAAAA,GACNA,OAAAA,EAAIjD,GAAKuL,EAAkB,KAAKtI,IAAIjD,EAAI,KAAKtB,MAAMqF,SAAW,KAAKmB,UAAY,IAC/EjC,EAAI/C,GAAK,KAAK+C,IAAI/C,EAAI,KAAKxB,MAAMqF,SAAW,KAAKmB,UAAY,IAC7DjC,EAAIjD,GAAKuL,EAAkB,KAAKtI,IAAIjD,EAAI,KAAKtB,MAAMqF,SAAW,KAAKmB,UAAY,IAC/EjC,EAAI/C,GAAK,KAAK+C,IAAI/C,EAAI,KAAKxB,MAAMqF,SAAW,KAAKmB,UAAY,KAsBjE,CAAA,IAAA,aAjBY,MAAA,WACPA,KAAAA,UAAY,KAgBjB,CAAA,IAAA,SAbM5B,MAAAA,SAAAA,GACF,KAAK4B,UAAY,KAAK4G,eACzB,KAAK5G,UAAYI,KAAKyG,IAAI,KAAK7G,UAAiB,IAAL5B,EAAW,KAAKwI,iBAW5D,CAAA,IAAA,OARI3H,MAAAA,SAAAA,GACJA,EAAIa,UACH,KAAK4G,IACLL,EAAkB,KAAKtI,IAAIjD,EAAI,KAAKtB,MAAMqF,SAAW,KAAKmB,UAAY,GACtE,KAAKjC,IAAI/C,EAAI,KAAKxB,MAAMqF,SAAW,KAAKmB,UAAY,GACpD,KAAKxG,MAAMqF,SAAS,KAAKmB,UACzB,KAAKxG,MAAMqF,SAAS,KAAKmB,eAE1B,EAAA,GAAA,QAAA,QAAA;;ACQG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7DL,IAAA,EAAA,EAAA,QAAA,gBA6DK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5DL,IAAI8G,EAAI3Q,EAAOC,QAAAA,aAEM2Q,EA0DhB,WAzDWhM,SAAAA,EAAAA,EAASiM,EAAYC,EAAUC,GAAS,EAAA,KAAA,GAC3CnM,KAAAA,QAAUA,EACViM,KAAAA,WAAaA,EACbC,KAAAA,SAAWA,EACjBC,KAAAA,QAAUA,EAEJC,KAAAA,WAAa,GACb3N,KAAAA,MAAQ,KAkDhB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YA/CSA,MAAAA,SAAAA,GACDA,KAAAA,MAAQA,EAERyN,KAAAA,SAAS/E,QAAQ,SAAApI,GACM,IAApBA,EAAKsN,YACL5N,EAAM6N,eACjBvN,EAAK2B,QAAS3B,EAAKP,QAASO,EAAKwN,OAAQxN,EAAKiJ,UAItCoE,KAAAA,WAAWL,EAAEzQ,KAAOoJ,SAASC,eAAe,qBAC5CyH,KAAAA,WAAWL,EAAExQ,KAAOmJ,SAASC,eAAe,oBAC5CyH,KAAAA,WAAWL,EAAEvQ,KAAOkJ,SAASC,eAAe,sBAmCpD,CAAA,IAAA,UAhCOlG,MAAAA,SAAAA,GACCyN,KAAAA,SAAS/E,QAAQ,SAAApI,GAEdA,EAAKsN,aAAe5N,EAAM+N,MAC1BzN,EAAKP,WAAaC,EAAMyE,eAAiBzE,EAAMgO,cAE/ChO,EAAM6N,eACjBvN,EAAK2B,QAAS3B,EAAKP,QAASO,EAAKwN,OAAQxN,EAAKiJ,YAyB9C,CAAA,IAAA,aApBUjI,MAAAA,SAAAA,EAAGE,GACH,OAAA,KAAKgM,WAAWhM,EAAI,GAAGF,EAAI,KAmBrC,CAAA,IAAA,SAhBMsD,MAAAA,SAAAA,MAgBN,CAAA,IAAA,OAdIa,MAAAA,SAAAA,GACI,IAAA,IAAImE,EAAI,EAAGA,GAAK,KAAKrI,QAAQD,EAAGsI,IAC5B,IAAA,IAAIoC,EAAI,EAAGA,GAAK,KAAKzK,QAAQC,EAAGwK,IAAK,CAClCzH,IAAAA,EAAM,KAAKvE,MAAMmN,aAAa,CAAE7L,EAAGsI,EAAGpI,EAAGwK,IAE7CvG,EAAIa,UACA,KAAKqH,WAAW,KAAKM,WAAWrE,EAAGoC,IACnCzH,EAAIjD,EAAI,KAAKtB,MAAMqF,SAAW,EAC9Bd,EAAI/C,EAAI,KAAKxB,MAAMqF,SAAW,EAC9B,KAAKrF,MAAMqF,SACX,KAAKrF,MAAMqF,eAI1B,EAAA,GAAA,QAAA,QAAA;;ACsDU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnHf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAkHe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhHf,IAAIiI,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,eAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAEhQ,QACVqL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE9P,SACVmL,OAAQ,IAGN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAEzP,QACV8K,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE1P,UACV+K,OAAQ,IAET,CACOtH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,IAEN,CACItH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,IAET,CACOtH,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,KAIK,EAAA,CAACmE,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACoCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvJf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAsJe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GApJf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,qBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAEhQ,QACVqL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAGvB,CACIoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAGvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAGvB,CACIkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE9P,SACVmL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAIvB,CACImD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE1P,UACV+K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAEzP,QACV8K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAExP,OACV6K,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAMZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;AC1CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7Gf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBA4Ge,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA1Gf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,eAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAEhQ,QACVqL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAGvB,CACIoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAGvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAGvB,CACIkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE9P,SACVmL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAKvB,CACImD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,EAAG,KAGf,CACOnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,KACxBqP,QAAS,CAAC,KAGZ,CACOnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,IACxBuP,QAAS,CAAC,EAAG,MAKD,EAAA,CAACV,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACnEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1Cf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAyCe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvCf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,eAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAnDf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAkDe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAhDf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,iBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,KACtC,CAACuQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,SAKZ,EAAA,CAAC4O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACkBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArEf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAoEe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlEf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,iBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,MAGtC2Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACoCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAzGf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAwGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtGf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,eAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAGvB,CACIoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;AClBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvFf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAsFe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GApFf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,gBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACfA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxEf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAuEe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArEf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,mBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAI1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAOZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;AC4DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApIf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAmIe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjIf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,iBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAIvB,CACIqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAGvB,CACIoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACOoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACOkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACOmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACtEA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA9Df,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBA6De,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3Df,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,kBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,MAGtC2Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAI1B,CACCqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,IACxBuP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,QAKZ,EAAA,CAAC2O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACiBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/Ef,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBA8Ee,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA5Ef,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,eAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAI1B,CACCqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,KACxBqP,QAAS,CAAC,EAAE,EAAE,EAAE,KAGlB,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACCoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,OAKZ,EAAA,CAAC6O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACkBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjGf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAgGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9Ff,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,mBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEvQ,KACtC,CAACuQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAG1B,CACOqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAI1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACCoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACCoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,KACxBqP,QAAS,CAAC,MAKE,EAAA,CAACV,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjGf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAgGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9Ff,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,iBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACzC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACnC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,MAGtC4Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAG1B,CACOqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAI1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAG1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,MAG1B,CACCoD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQE,IACxBuP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE3P,QACVgL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,QAKZ,EAAA,CAAC2O,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;ACIA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArGf,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,gBAoGe,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlGf,IAAIJ,EAAI3Q,EAAOC,QAAAA,aACXsR,EAAIvR,EAAOoB,QAAAA,UAEX2P,EAAU,oBAEVnM,EAAU,CAAED,EAAG,EAAGE,EAAG,GACrBgM,EAAa,CACb,CAACF,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,KACzC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEvQ,IAAKuQ,EAAEvQ,IAAKuQ,EAAEzQ,IAAKyQ,EAAEzQ,KACnC,CAACyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,KACtC,CAACyQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,KACtC,CAACwQ,EAAExQ,IAAKwQ,EAAExQ,IAAKwQ,EAAEzQ,IAAKyQ,EAAEzQ,IAAKyQ,EAAExQ,IAAKwQ,EAAExQ,MAGtC2Q,EAAW,CACX,CACIxL,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE7P,cACVkL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQC,OAG1B,CACOqD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACf+N,OAAQI,EAAE/P,WACVoL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQI,OAI1B,CACCkD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,QAG1B,CACCmD,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,KAGZ,CACCnM,QAAS,CAAEX,EAAG,EAAGE,EAAG,GACpBoM,WAAY,EACZ7N,SAAS,EACT+N,OAAQI,EAAE5P,QACViL,OAAQ,CACP5K,QAAShC,EAAOgC,QAAAA,QAAQG,MACxBsP,QAAS,CAAC,MAKE,EAAA,CAACV,QAASA,EAASS,aAAc,WACxC,OAAA,IAAIZ,EAAJ,QAAUhM,EAASiM,EAAYC,EAAUC,KADlC,QAAA,QAAA;;AC/Bb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtEF,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,mCACA,EAAA,EAAA,QAAA,6BAEA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,0BAuDE,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/CmBW,IAAAA,EA+CnB,WA9Cc,SAAA,IAAA,EAAA,KAAA,GACTC,KAAAA,KAAO,GACPC,KAAAA,gBAAkB,EAElBD,KAAAA,KAAK3J,KAAK6J,EAAf,SACKF,KAAAA,KAAK3J,KAAK8J,EAAf,SACKH,KAAAA,KAAK3J,KAAK+J,EAAf,SACKJ,KAAAA,KAAK3J,KAAKgK,EAAf,SACKL,KAAAA,KAAK3J,KAAKiK,EAAf,SACKN,KAAAA,KAAK3J,KAAKkK,EAAf,SACKP,KAAAA,KAAK3J,KAAKmK,EAAf,SACKR,KAAAA,KAAK3J,KAAKoK,EAAf,SACKT,KAAAA,KAAK3J,KAAKqK,EAAf,SACKV,KAAAA,KAAK3J,KAAKsK,EAAf,SACKX,KAAAA,KAAK3J,KAAKuK,EAAf,SACKZ,KAAAA,KAAK3J,KAAKwK,EAAf,SAEKb,KAAAA,KAAK3J,KAAKyK,EAAf,SACKd,KAAAA,KAAK3J,KAAK0K,EAAf,SACKf,KAAAA,KAAK3J,KAAK2K,EAAf,SA2BA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAxBSC,MAAAA,SAAAA,EAAQvP,GACbwL,IAAAA,EAAQ,KAAK8C,KAAKkB,SAASD,IAE/BvP,EAAMwL,MAAQA,EAAM2C,iBAqBpB,CAAA,IAAA,mCAlBkC,MAAA,WAM7B,IALDzL,IAAAA,EAAJ,iDAIIiH,EAAM,KAAK2E,KAAK1K,OACXgG,EAAI,EAAGA,EAAID,EAAKC,IACxBlH,GAAO,kBAAmBkH,GACvBA,IAAM,KAAK2E,gBADP,aAAA,KAEA,IAAA,KAAKD,KAAK1E,GAAG8D,QAFpB,oBAUMhL,OAJPA,GAAA,yFAKA,EAAA,GAAA,QAAA,QAAA;;AC+VG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAraL,IAAA,EAAA,EAAA,QAAA,gBAqaK,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnaL,IAAI9F,EAAeD,EAAOC,QAAAA,aAEL6S,EAiahB,WAhaWrN,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,GAAS,EAAA,KAAA,GACpCqC,KAAAA,OAASA,EACTpC,KAAAA,MAAQA,EACRiC,KAAAA,QAAUA,EAEhByL,KAAAA,QAAU,cACVgC,KAAAA,QAAU,aACJC,KAAAA,UAAY,CACbrO,EAAGtB,EAAMqF,SACT7D,EAAGxB,EAAMqF,UAGRtF,KAAAA,QAAUA,EAEhB6P,KAAAA,WAAa,EACbC,KAAAA,YAAc,EACdtH,KAAAA,YAAc,EACdgB,KAAAA,OAAS,KACTuG,KAAAA,SAAWnT,EAAOgB,QAAAA,UAAUC,SAEtBiL,KAAAA,SAAW,KACjBkH,KAAAA,UAAY,GA2Yd,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAxYW,MAAA,WAAA,IAAA,EAAA,KACM,OAAhB,KAAKxG,aACuB,IAAxB,KAAKA,OAAOnK,QACI,OAAvB,KAAKmK,OAAOnK,QAEPmK,KAAAA,OAAOnK,OAAOsJ,QAAQ,SAAAsH,GACtBC,IAAAA,EAAW,EAAKjQ,MAAMkQ,aAAaC,YACtC,EACAH,EAAeI,MACfJ,EAAeK,OAEhB,EAAKN,UAAUpL,KAAKsL,OA6XnB,CAAA,IAAA,qBAvXiB,MAAA,WACfF,KAAAA,UAAUrH,QAAQ,SAAA0H,IACE,IAApBA,EAAME,WACTF,EAAMG,gBAoXL,CAAA,IAAA,oBA9WgB,MAAA,WACdC,KAAAA,eACAC,KAAAA,qBAEAzK,KAAAA,MAAQC,SAASC,eAAe,KAAKwJ,SAEtCgB,IAAAA,EAAU,uBACM,OAAhB,KAAKnH,aAA2C7F,IAAxB,KAAK6F,OAAO5K,UACnC,KAAK4K,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQE,MAAK6R,EAAU,uBACtD,KAAKnH,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQI,OAAM2R,EAAU,wBACvD,KAAKnH,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQG,QAAO4R,EAAU,0BAExDC,KAAAA,aAAe1K,SAASC,eAAewK,GAEvCE,KAAAA,GAAK,EACCC,KAAAA,OAAS,IACTC,KAAAA,OAAQ,EACdC,KAAAA,QAAU,EACVvH,KAAAA,SAAW,KAAKqG,YAEhBmB,KAAAA,mBAEAC,KAAAA,oBACAC,KAAAA,iBAE8B,IAA/BvU,EAAO2C,QAAAA,SAASC,aACdmO,KAAAA,QAAU,KAAKA,QAAU,KAAO,KAAKtL,OAAS,OAoVjD,CAAA,IAAA,oBAhVmB,MAAA,WACXoE,KAAAA,UAAY,EACZ2K,KAAAA,YAAa,EACbC,KAAAA,YAAa,IA6UrB,CAAA,IAAA,gBA1Ue,MAAA,WACPC,KAAAA,iBAAkB,EAClBC,KAAAA,eAAiB,KACjBC,KAAAA,kBAAoB,KACpBC,KAAAA,mBAAqB,KACrBC,KAAAA,wBAA0B,KAC1BC,KAAAA,mBAAoB,EACpBC,KAAAA,eAAiB,KACjBP,KAAAA,YAAa,IAkUrB,CAAA,IAAA,WA/TU,MAAA,WACH,QAAA,KAAKL,SAAW,KA8TvB,CAAA,IAAA,UA1TM,MAAA,WACD,OAAA,KAAKH,GAAK,IAyTf,CAAA,IAAA,eAtTc,MAAA,WAENG,KAAAA,QAAU,KAAKnB,WAGfpG,KAAAA,SAAW,KAAKqG,cAiTxB,CAAA,IAAA,yBA7SwB,MAAA,WAChB+B,KAAAA,mBA4SR,CAAA,IAAA,iBAzSgB,MAAA,WACR/I,KAAAA,SAAW,KAAK7I,MAAMkK,WAAWC,UAClC,KACA,KAAKlI,QACL,KAAKuH,YAqSZ,CAAA,IAAA,cAjSa,MAAA,WACL2H,KAAAA,YAAa,EACb3K,KAAAA,UAAY,OA+RpB,CAAA,IAAA,gBA5Re,MAAA,WACPyK,KAAAA,oBACAC,KAAAA,kBA0RR,CAAA,IAAA,eAvRSjP,MAAAA,SAAAA,GACR,OAAA,KAAK6N,WAAanT,EAAOgB,QAAAA,UAAUG,OAEnC,KAAKkC,MAAMwL,MAAMyC,WAAWhM,EAAQX,EAAGW,EAAQT,KACzC5E,EAAaC,MAmRpB,CAAA,IAAA,gBA5QUoF,MAAAA,SAAAA,EAAS4P,GAClBvR,IAAAA,EAAO,KAAKN,MAAM6B,kBAAkBI,GACpC3B,OAAS,OAATA,GACHA,IAASuR,GACTvR,IAAS,OAGH,KAAKwR,aAAa7P,KAqQtB,CAAA,IAAA,gBAlQaA,MAAAA,SAAAA,GAEN,UAFqC,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,KAGuB,OAA5D,KAAKjC,MAAM4B,sBAAsB,KAAK7B,QAASkC,KAG5C,KAAK6P,aAAa7P,KA4P5B,CAAA,IAAA,uBAzPoBA,MAAAA,SAAAA,GAEb2E,QAAAA,KAAKkD,IAAI7H,EAAQX,EAAI,KAAKW,QAAQX,GAC9BsF,KAAKkD,IAAI7H,EAAQT,EAAI,KAAKS,QAAQT,GACtC,KAAKqO,gBAIL,KAAK7P,MAAMkK,WAAW6H,YAAY,KAAKlJ,SAAU5G,KAiPxD,CAAA,IAAA,aA1OUyJ,MAAAA,SAAAA,GACF8F,KAAAA,mBAAqB9F,EACrB+F,KAAAA,wBAA0B,GAE1B,IADD9H,IAAAA,EAAM+B,EAAK9H,OACNgG,EAAI,EAAGA,EAAID,EAAKC,IAEhB6H,KAAAA,wBAAwB7H,GAAK,KAAK5J,MAAMmN,aAAazB,EAAK9B,MAoOtE,CAAA,IAAA,0BAhOuBT,MAAAA,SAAAA,GACfkI,KAAAA,iBAAkB,EAClBC,KAAAA,eAAiBnI,EACjBoI,KAAAA,kBAAoB,KAAKvR,MAAMmN,aAAahE,GAC5C6I,KAAAA,WACD,KAAKhS,MAAMkK,WAAWwC,aAClB,KAAK7D,SACL,KAAK5G,QACLkH,MAwNX,CAAA,IAAA,gBAnNe,MAAA,WACP4H,KAAAA,UACAG,KAAAA,gBACAlR,KAAAA,MAAMiS,wBAgNd,CAAA,IAAA,mBA5Me,MAAA,WACbC,KAAAA,WAAa,KAAKlS,MAAMmN,aAAa,KAAKlL,WA2M5C,CAAA,IAAA,uBAxMsB,MAAA,WACpB8O,KAAAA,QAAU,EACJ9O,KAAAA,QAAU,KAAKqP,eACfN,KAAAA,mBACAmB,KAAAA,kBAoMR,CAAA,IAAA,qBAjMe5F,MAAAA,SAAAA,GACbtK,KAAAA,QAAUsK,EACVyE,KAAAA,mBACAmB,KAAAA,kBA8LF,CAAA,IAAA,yBA3LmB5F,MAAAA,SAAAA,GACjBtK,KAAAA,QAAUsK,EACVyE,KAAAA,qBAyLF,CAAA,IAAA,qBArLezE,MAAAA,SAAAA,GACbtK,KAAAA,QAAUsK,EACVyE,KAAAA,qBAmLF,CAAA,IAAA,oBAhLiB1Q,MAAAA,SAAAA,EAAMgR,GACtB,OAAqB,IAArB,KAAK/I,aACC3B,KAAKkD,IAAIxJ,EAAK2B,QAAQX,EAAIgQ,EAAehQ,GACzCsF,KAAKkD,IAAIxJ,EAAK2B,QAAQT,EAAI8P,EAAe9P,KACzC,KAAK+G,cA4KZ,CAAA,IAAA,qBAvKkBjI,MAAAA,SAAAA,GACVqR,KAAAA,eAAiBrR,EACjBoR,KAAAA,mBAAoB,IAqK5B,CAAA,IAAA,kBAlKiB,MAAA,WACTN,KAAAA,YAAa,IAiKrB,CAAA,IAAA,yBA9JwB,MAAA,WAChBA,KAAAA,YAAa,IA6JrB,CAAA,IAAA,qBA1JkB9Q,MAAAA,SAAAA,GACV2B,KAAAA,QAAU,KAAKqP,eACfN,KAAAA,mBACAhR,KAAAA,MAAMoS,YAAY,KAAM9R,GACxB6R,KAAAA,kBAsJR,CAAA,IAAA,mBAnJkB,MAAA,WAChBpB,KAAAA,QAAU,EACJoB,KAAAA,kBAiJR,CAAA,IAAA,cA9IWE,MAAAA,SAAAA,GACHzB,KAAAA,IAAMyB,EACP,KAAKzB,IAAM,IACNE,KAAAA,OAAQ,EACR9Q,KAAAA,MAAMsS,eAAe,SA0IjC,CAAA,IAAA,YAtIW,MAAA,WAKPC,OAHG,KAAKxS,SAAY,KAAKC,MAAMyE,eAAiB,KAAKzE,MAAMgO,cACvD,KAAKjO,SAAY,KAAKC,MAAMyE,eAAiB,KAAKzE,MAAM0E,eAmIhE,CAAA,IAAA,SA9HME,MAAAA,SAAAA,MA8HN,CAAA,IAAA,aA5HOa,MAAAA,SAAAA,GAAK,IAAA,EAAA,KACX,KAAK0L,aACR1L,EAAIC,UAAY,wBACXmD,KAAAA,SAASK,eAAeR,QAAQ,SAAA/H,GAChC,IAAC,EAAKX,MAAMkK,WAAW6H,YAAY,EAAKlJ,SAAUlI,GAAK,CACtD4D,IAAAA,EAAM,EAAKvE,MAAMmN,aAAaxM,GAClC8E,EAAIE,SACHpB,EAAIjD,EAAuB,IAAnB,EAAKqO,UAAUrO,EACvBiD,EAAI/C,EAAuB,IAAnB,EAAKmO,UAAUnO,EACJ,GAAnB,EAAKmO,UAAUrO,EACI,GAAnB,EAAKqO,UAAUnO,MAIlBiE,EAAIC,UAAY,wBACXmD,KAAAA,SAASkB,iBAAiBrB,QAAQ,SAAA/H,GAClC4D,IAAAA,EAAM,EAAKvE,MAAMmN,aAAaxM,GAClC8E,EAAIE,SACHpB,EAAIjD,EAAuB,IAAnB,EAAKqO,UAAUrO,EACvBiD,EAAI/C,EAAuB,IAAnB,EAAKmO,UAAUnO,EACJ,GAAnB,EAAKmO,UAAUrO,EACI,GAAnB,EAAKqO,UAAUnO,QAuGf,CAAA,IAAA,aAjGUiE,MAAAA,SAAAA,GAoBH,GAjBA,KAAK0L,YAAc,KAAKC,WACpB,KAAKrR,QAAS0F,EAAIC,UAAY,sBAC7BD,EAAIC,UAAY,wBACd,KAAKhE,aAAe,KAAK8Q,YAC5B,KAAKzS,QAAS0F,EAAIC,UAAY,wBAC7BD,EAAIC,UAAY,wBAEjB,KAAK3F,QAAS0F,EAAIC,UAAY,wBAC7BD,EAAIC,UAAY,wBAEzBD,EAAIE,SACA,KAAKuM,WAAW5Q,EAbV,IAac,KAAKqO,UAAUrO,EACnC,KAAK4Q,WAAW1Q,EAdV,IAcc,KAAKmO,UAAUnO,EAChB,EAAnB,KAAKmO,UAAUrO,EAfT,IAgBa,EAAnB,KAAKqO,UAAUnO,EAhBT,KAmBN,KAAK6P,gBAAiB,CAClB,GAA4B,OAA5B,KAAKG,mBAA6B,CAC9B,KAAKzR,QAAS0F,EAAIC,UAAY,wBAC7BD,EAAIC,UAAY,wBAEhB,IADDiE,IAAAA,EAAM,KAAK6H,mBAAmB5N,OACzBgG,EAAI,EAAGA,EAAID,EAAKC,IACrBnE,EAAIE,SACA,KAAK8L,wBAAwB7H,GAAGtI,EA1BtC,IA2BU,KAAKqO,UAAUrO,EACnB,KAAKmQ,wBAAwB7H,GAAGpI,EA5BtC,IA6BU,KAAKmO,UAAUnO,EACA,EAAnB,KAAKmO,UAAUrO,EA9BrB,IA+ByB,EAAnB,KAAKqO,UAAUnO,EA/BrB,KAoCF,KAAKzB,QAAS0F,EAAIC,UAAY,OAC7BD,EAAIC,UAAY,OACrBD,EAAIE,SACA,KAAK4L,kBAAkBjQ,EAvCrB,IAuCyB,KAAKqO,UAAUrO,EAC1C,KAAKiQ,kBAAkB/P,EAxCrB,IAwCyB,KAAKmO,UAAUnO,EACvB,EAAnB,KAAKmO,UAAUrO,EAzCb,IA0CiB,EAAnB,KAAKqO,UAAUnO,EA1Cb,QAgGb,CAAA,IAAA,WAjDQiE,MAAAA,SAAAA,GACP,KAAKgN,UACJ,KAAKpB,iBACR5L,EAAIa,UACH,KAAKN,MACL,KAAKuL,kBAAkBjQ,EACrB,KAAKqO,UAAUrO,EAAI,KAAKkF,UAAa,EACvC,KAAK+K,kBAAkB/P,EACrB,KAAKmO,UAAUnO,EAAI,KAAKgF,UAAa,EACvC,KAAKmJ,UAAUrO,EAAI,KAAKkF,UACxB,KAAKmJ,UAAUnO,EAAI,KAAKgF,WAEzBf,EAAIa,UACH,KAAKqK,aACL,KAAKY,kBAAkBjQ,EACrB,KAAKqO,UAAUrO,EAAI,KAAKkF,UAAa,EACvC,KAAK+K,kBAAkB/P,EACrB,KAAKmO,UAAUnO,EAAI,KAAKgF,UAAa,EACvC,KAAKmJ,UAAUrO,EAAI,KAAKkF,UACxB,KAAKmJ,UAAUnO,EAAI,KAAKgF,aAGzBf,EAAIa,UACH,KAAKN,MACL,KAAKkM,WAAW5Q,EAAK,KAAKqO,UAAUrO,EAAI,KAAKkF,UAAa,EAC1D,KAAK0L,WAAW1Q,EAAK,KAAKmO,UAAUnO,EAAI,KAAKgF,UAAa,EAC1D,KAAKmJ,UAAUrO,EAAI,KAAKkF,UACxB,KAAKmJ,UAAUnO,EAAI,KAAKgF,WAEzBf,EAAIa,UACH,KAAKqK,aACL,KAAKuB,WAAW5Q,EAAK,KAAKqO,UAAUrO,EAAI,KAAKkF,UAAa,EAC1D,KAAK0L,WAAW1Q,EAAK,KAAKmO,UAAUnO,EAAI,KAAKgF,UAAa,EAC1D,KAAKmJ,UAAUrO,EAAI,KAAKkF,UACxB,KAAKmJ,UAAUnO,EAAI,KAAKgF,kBAIF9C,IAApB,KAAKgP,aACR,KAAKA,WAAazM,SAASC,eAAe,aAE3CT,EAAIa,UACH,KAAKoM,WACL,KAAKR,WAAW5Q,EAAK,KAAKqO,UAAUrO,EAAI,KAAKkF,UAAa,EAC1D,KAAK0L,WAAW1Q,EAAK,KAAKmO,UAAUnO,EAAI,KAAKgF,UAAa,EAC1D,KAAKmJ,UAAUrO,EAAI,KAAKkF,UACxB,KAAKmJ,UAAUnO,EAAI,KAAKgF,gBAGvB,EAAA,GAAA,QAAA,QAAA;;AC7ZoCiJ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EARzC,IAAA,EAAA,EAAA,QAAA,kBAQyCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAApBkD,IAAAA,EAAoBlD,SAAAA,GAC5BrN,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,KAEzBwJ,OAASqJ,KAAKC,MAAMD,KAAKE,UAAUvJ,SACb7F,IAAvB,EAAK6F,OAAOnK,SAAsB,EAAKmK,OAAOnK,OAAS,IAJP,EADbqQ,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACsB1BsD,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA9Bf,IAAMA,EAAQ,CACbzS,KAAM,CACLtC,SAAU,cAEVC,QAAS,KAETC,QAAS,YACTC,WAAY,cACZC,SAAU,iBACVC,cAAe,gBAEfC,QAAS,KACTC,QAAS,KACTC,UAAW,KACXC,QAAS,MACTC,OAAQ,OAETM,WAAY,CACXJ,KAAM,SACNK,WAAY,OACZC,SAAU,OACVC,KAAM,QAEPC,OAAQ,CACPR,KAAM,KACNS,aAAc,UAKD0T,EAAAA,EAAAA,QAAAA,QAAAA;;AC3BsBJ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAHrC,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,wBAEqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAhBK,IAAAA,EAAgBL,SAAAA,GACxBvQ,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKrC,QACrByR,EAAAA,QAAU,aAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EANiC,EADjBoK,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACCMA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJ3C,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,gBAE2CA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAtBM,IAAAA,EAAsBN,SAAAA,GAC9BvQ,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKjC,cACrBqR,EAAAA,QAAU,aAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EAEdgB,EAAAA,OAAOnK,OAAOuF,KAAK,CACvByL,MAAO,eACPC,MAAO,IAV4C,EADXsC,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACANA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJrC,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAhBO,IAAAA,EAAgBP,SAAAA,GACxBvQ,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKpC,QACrBwR,EAAAA,QAAU,aAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EAEdgB,EAAAA,OAAOvK,WAAarC,EAAOqC,QAAAA,WAAWE,SARS,EADjByT,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACAGA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJxC,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEwCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAnBQ,IAAAA,EAAmBR,SAAAA,GAC3BvQ,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKnC,WACrBuR,EAAAA,QAAU,gBAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EAEdgB,EAAAA,OAAOvK,WAAarC,EAAOqC,QAAAA,WAAWG,KAEtCoK,EAAAA,OAAOnK,OAAOuF,KAAK,CACvByL,MAAO,eACPC,MAAO,IAZ4C,EADdsC,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACAFA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJtC,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEsCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAjBS,IAAAA,EAAiBT,SAAAA,GACzBvQ,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKlC,SACrBsR,EAAAA,QAAU,cAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EAEdgB,EAAAA,OAAOvK,WAAarC,EAAOqC,QAAAA,WAAWC,WARS,EADhB0T,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACyIrC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7ID,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,gBA4IC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,oBAAA,SAAA,QAAA,IAAA,QAAA,IAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,KAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,SAAA,EAAA,EAAA,GAAA,MAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,QAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAlIoBU,IAAAA,EAkIpB,SAAA,GAjIYjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,KAEzBwJ,OAASqJ,KAAKC,MAAMD,KAAKE,UAAUvJ,SACb7F,IAAvB,EAAK6F,OAAOnK,SAAsB,EAAKmK,OAAOnK,OAAS,IACtDkU,EAAAA,aAAe,EAAKtT,MAAMuT,uBALqB,EAiIrD,OAAA,EAAA,EAlIuC9D,EAAAA,SAkIvC,EAAA,EAAA,CAAA,CAAA,IAAA,cAxHc,MAAA,WAAA,IAAA,EAAA,KACR+D,KAAAA,aAAe,EACfC,KAAAA,kBAAoB,QACG/P,IAAxB,KAAK6F,OAAO6E,UAAuB,KAAK7E,OAAO6E,QAAU,MACjC,OAAxB,KAAK7E,OAAO6E,SACV7E,KAAAA,OAAO6E,QAAQ1F,QAAQ,SAAAsE,GAC3B,EAAKwG,eACL,EAAKC,kBAAkB9O,KACtB,EAAK3E,MAAM0T,aAAa,EAAK3T,QAASiN,MAKrC,KAAKwG,aAAe,IAAG,KAAK7C,aAAe,KAAKgD,gBA2GrD,CAAA,IAAA,oBAxGoB,MAAA,WACnB,EAAA,EAAA,EAAA,WAAA,oBAAA,MAAA,KAAA,MACIjD,IAAAA,EAAU,0BACM,OAAhB,KAAKnH,aAA2C7F,IAAxB,KAAK6F,OAAO5K,UACnC,KAAK4K,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQE,MAAK6R,EAAU,0BACtD,KAAKnH,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQI,OAAM2R,EAAU,2BACvD,KAAKnH,OAAO5K,UAAYhC,EAAOgC,QAAAA,QAAQG,QAAO4R,EAAU,6BAExDiD,KAAAA,aAAe1N,SAASC,eAAewK,GACvCkD,KAAAA,iBAAmB,KAAKjD,eA+F9B,CAAA,IAAA,mBA3FiBkD,MAAAA,SAAAA,IAEH,IADH,KAAKtK,OAAO6E,QAAQ0F,QAAQD,EAAWzR,UAa5CoR,KAAAA,eACLO,EAAqBF,EAAY,KAAKJ,mBAClC,KAAKD,cAAgB,IACnB7C,KAAAA,aAAe,KAAKiD,qBA0E3B,CAAA,IAAA,cAtEYvB,MAAAA,SAAAA,GACP,KAAKmB,aAAe,GACNnB,EAAAA,EAAAA,EAAAA,WAAAA,cAAAA,MAAAA,KAAAA,KAAAA,KAoEnB,CAAA,IAAA,SAjEOzN,MAAAA,SAAAA,GACOA,EAAAA,EAAAA,EAAAA,WAAAA,SAAAA,MAAAA,KAAAA,KAAAA,QAGalB,IAAtB,KAAK8P,cAA4B,KAAKQ,gBA6D3C,CAAA,IAAA,wBA1DsBvO,MAAAA,SAAAA,GAAK,IAAA,EAAA,KACtB,KAAA,KAAK+N,cAAgB,GACrB,KAAKhB,cAC6B,IAAlC,KAAKxS,MAAMiU,qBACM,IAApB,KAAK9C,YACF,KAAKnR,MAAMiU,oBACd,KAAKjU,MAAMkU,mBACS,IAApB,KAAK/C,YAEF,KAAKmC,aAAaa,MAAQ,GAA1B,CAEJ1O,EAAI2O,UAAY,EAChB3O,EAAI4O,YAAc,UACdC,IAAAA,EAAK,KAAKtU,MAAMuU,cAAc,KAAKtS,QAAQX,GAC9CkT,EAAK,KAAKxU,MAAMyU,cAAc,KAAKxS,QAAQT,GAEvCiS,KAAAA,kBAAkB/K,QAAQ,SAAApI,GAC1BoU,IAAAA,EAAK,EAAK1U,MAAMuU,cAAcjU,EAAK2B,QAAQX,GAC9CqT,EAAK,EAAK3U,MAAMyU,cAAcnU,EAAK2B,QAAQT,GAExC,EAAK8R,aAAaa,OAAS,EAC9BS,EACCnP,EAAKiP,EAAIC,EACTD,EAAK,EAAKpB,aAAaa,OAASG,EAAKI,GACrCC,EAAK,EAAKrB,aAAaa,OAASK,EAAKG,IAGtCC,EACCnP,EACAiP,GAAM,EAAKpB,aAAaa,MAAM,IAAMG,EAAKI,GACzCC,GAAM,EAAKrB,aAAaa,MAAM,IAAMK,EAAKG,GACzCL,EAAIE,UA2BR,EAAA,GAXD,SAASI,EAASnP,EAAKiP,EAAIC,EAAIL,EAAIE,GAElC/O,EAAIoP,YACJpP,EAAIqP,OAAOJ,EAAIC,GACflP,EAAIsP,OAAOT,EAAIE,GACf/O,EAAIuP,SAGL,SAASjB,EAAqBkB,EAAQ3G,GAC9B4G,IAAAA,EAAM5G,EAAKwF,QAAQmB,GACvB3G,EAAK6G,OAAOD,EAAK,GACpB,QAAA,QAAA;;AC1IoC7B,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAHrC,IAAA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,wBAEqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAhB+B,IAAAA,EAAgB/B,SAAAA,GACxBjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAKhC,QACrBoR,EAAAA,QAAU,cAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EANiC,EADjB8K,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACAAA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAHrC,IAAA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,wBAEqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAhBgC,IAAAA,EAAgBhC,SAAAA,GACxBjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAK/B,QACrBmR,EAAAA,QAAU,cAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EANiC,EADjB8K,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACCEA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJvC,IAAA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEuCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAlBiC,IAAAA,EAAkBjC,SAAAA,GAC1BjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAK9B,UACrBkR,EAAAA,QAAU,gBAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EACduH,EAAAA,SAAWnT,EAAOgB,QAAAA,UAAUE,QAPmB,EADfwV,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACAFA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJrC,IAAA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEqCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAhBkC,IAAAA,EAAgBlC,SAAAA,GACxBjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAK7B,QACrBiR,EAAAA,QAAU,gBAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EACduH,EAAAA,SAAWnT,EAAOgB,QAAAA,UAAUE,QAPmB,EADjBwV,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACADA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJpC,IAAA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAEoCA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAf3U,IAAAA,EAAe2U,SAAAA,GACvBjR,SAAAA,EAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,GAAQ,IAAA,EAAA,OAAA,EAAA,KAAA,IAC9CnH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAQpC,EAAOiC,EAASlC,EAASwJ,KAClCmE,QAAUqF,EAAMzS,QAAAA,KAAK5B,OACrBgR,EAAAA,QAAU,UAEVG,EAAAA,YAAc,EACdtH,EAAAA,YAAc,EACduH,EAAAA,SAAWnT,EAAOgB,QAAAA,UAAUG,MAPmB,EADlBuV,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,QAAAA;;ACiDlC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EArDF,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,sBA0CE,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlCF,IAAImC,EAAQ7Y,EAAOoB,QAAAA,UAEE0X,EAgCnB,WA/Bc,SAAA,IAAA,EAAA,KAAA,GACTnH,KAAAA,KAAO,GAEPA,KAAAA,KAAKkH,EAAMxX,UAAYyR,EAA5B,QACKnB,KAAAA,KAAKkH,EAAMvX,SAAW+U,EAA3B,QACK1E,KAAAA,KAAKkH,EAAMnX,eAAiB4U,EAAjC,QACK3E,KAAAA,KAAKkH,EAAMtX,SAAWgV,EAA3B,QACK5E,KAAAA,KAAKkH,EAAMrX,YAAcgV,EAA9B,QACK7E,KAAAA,KAAKkH,EAAMpX,UAAYgV,EAA5B,QAEK9E,KAAAA,KAAKkH,EAAMlX,SAAW8W,EAA3B,QACK9G,KAAAA,KAAKkH,EAAMjX,SAAW8W,EAA3B,QACK/G,KAAAA,KAAKkH,EAAMhX,WAAa8W,EAA7B,QACKhH,KAAAA,KAAKkH,EAAM/W,SAAW8W,EAA3B,QACKjH,KAAAA,KAAKkH,EAAM9W,QAAUgX,EAA1B,QAiBA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAdUtT,MAAAA,SAAAA,EAAQpC,EAAOiC,EAASlC,EAAS+N,EAAQvE,GAE/CuE,OAAAA,IAAW0H,EAAMxX,SAET,IAAI,KAAKsQ,KAAKR,GACxB1L,EAAQpC,EAAOiC,EAASlC,GAKf,IAAI,KAAKuO,KAAKR,GACvB1L,EAAQpC,EAAOiC,EAASlC,EAASwJ,OAGnC,EAAA,GAAA,QAAA,QAAA;;ACjCD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApBD,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAmBC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjBoBoM,IAAAA,EAiBpB,WAhBarV,SAAAA,EAAAA,EAAM+P,GAAO,EAAA,KAAA,GACpBuF,KAAAA,MAAQtV,EACR+P,KAAAA,MAAQA,EAERC,KAAAA,WAAY,EAGZuF,KAAAA,QAAUlZ,EAAOyC,QAAAA,OAAOR,KAS9B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YANY,MAAA,gBAMZ,EAAA,GAAA,QAAA,QAAA;;AChByC+W,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAJ1C,IAAA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBAE0CA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAArBG,IAAAA,EAAqBH,SAAAA,GAC5BrV,SAAAA,EAAAA,EAAM+P,GAAO,IAAA,EAAA,OAAA,EAAA,KAAA,IACnB/P,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAM+P,KACPwF,QAAUlZ,EAAOyC,QAAAA,OAAOC,aAFJ,EADesW,OAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,YAM7B,MAAA,WACNC,KAAAA,MAAMhG,YAAc,KAAKS,UAPUsF,EAAAA,GAAAA,QAAAA,QAAAA;;ACgBxC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApBF,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,qCAmBE,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAVmBI,IAAAA,EAUnB,WATc,SAAA,IAAA,EAAA,KAAA,GACTzH,KAAAA,KAAO,GACPA,KAAAA,KAAK3R,EAAOyC,QAAAA,OAAOC,cAAgByW,EAAxC,QAOA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAJWxV,MAAAA,SAAAA,EAAM0V,EAAU3F,GAGpBJ,OADQ,IAAI,KAAK3B,KAAK3R,EAAOyC,QAAAA,OAAO4W,IAAW1V,EAAM+P,OAE5D,EAAA,GAAA,QAAA,QAAA;;ACqFA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApGmB4F,IAAAA,EAoGnB,WAnGYjW,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACdA,KAAAA,MAAQA,EAERkW,KAAAA,MAAQ,GACRC,KAAAA,QAAU,GAEV,IAAA,IAAIvM,EAAI,EAAGA,GAAK,EAAGA,IAClBsM,KAAAA,MAAMtM,GAAK,KACXuM,KAAAA,QAAQvM,GAAK,KA2FnB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,iBAtFgB,MAAA,WACXsM,KAAAA,MAAM,GAAK,CACf5U,EAAG,KAAK4U,MAAM,GAAG5U,EACjBE,GAAI,KAAK0U,MAAM,GAAG1U,GAEd0U,KAAAA,MAAM,GAAK,CACf5U,EAAG,KAAK4U,MAAM,GAAG1U,EACjBA,EAAG,KAAK0U,MAAM,GAAG5U,GAEb4U,KAAAA,MAAM,GAAK,CACf5U,GAAI,KAAK4U,MAAM,GAAG1U,EAClBA,EAAG,KAAK0U,MAAM,GAAG5U,GAEb6U,KAAAA,QAAQ,GAAK,CACjB7U,EAAG,KAAK6U,QAAQ,GAAG7U,EACnBE,GAAI,KAAK2U,QAAQ,GAAG3U,GAEhB2U,KAAAA,QAAQ,GAAK,CACjB7U,EAAG,KAAK6U,QAAQ,GAAG3U,EACnBA,EAAG,KAAK2U,QAAQ,GAAG7U,GAEf6U,KAAAA,QAAQ,GAAK,CACjB7U,GAAI,KAAK6U,QAAQ,GAAG3U,EACpBA,EAAG,KAAK2U,QAAQ,GAAG7U,KA+DpB,CAAA,IAAA,eA3DY4G,MAAAA,SAAAA,EAAME,GACd8C,IAAAA,EAAK9C,EAAOnG,QAAQX,EAAI4G,EAAK5G,EAC7B6J,EAAK/C,EAAOnG,QAAQT,EAAI0G,EAAK1G,EAC7B0J,OAAAA,EAAK,GAAKA,GAAM,GAAKC,EAAK,GAAKA,GAAM,EAAU,KAC5C,EAAID,EAAK,EAAEC,IAuDlB,CAAA,IAAA,qBApDkBxK,MAAAA,SAAAA,GACdA,QAAAA,EAAGW,EAAI,GAAKX,EAAGa,EAAI,GACtBb,EAAGW,EAAI,KAAKtB,MAAMuB,QAAQD,GAC1BX,EAAGa,EAAI,KAAKxB,MAAMuB,QAAQC,KAiD3B,CAAA,IAAA,mBA5CgB4U,MAAAA,SAAAA,EAAMlO,EAAME,GAExBiO,IAAAA,EAAM,KAAKC,aAAapO,EAAME,GAC9BiO,GAAQ,OAARA,EAAc,OAAO,EACrB,GAAoB,OAApB,KAAKH,MAAMG,GAAe,OAAO,EAEjCE,IAAAA,EAAY,CACfjV,EAAG4G,EAAK5G,EAAI,KAAK4U,MAAMG,GAAK/U,EAC5BE,EAAG0G,EAAK1G,EAAI,KAAK0U,MAAMG,GAAK7U,GAEzB,IAAC,KAAKoH,mBAAmB2N,GAAY,OAAO,EAC5C,IAACH,EAAKI,cAAcD,EAAWnO,GAAS,OAAO,EAE/CqO,IAAAA,EAAc,CACjBnV,EAAG8G,EAAOnG,QAAQX,EAAI,KAAK6U,QAAQE,GAAK/U,EACxCE,EAAG4G,EAAOnG,QAAQT,EAAI,KAAK2U,QAAQE,GAAK7U,GAErC,QAAC,KAAKoH,mBAAmB6N,MACxBrO,EAAOoO,cAAcC,EAAaL,KA0BvC,CAAA,IAAA,UArBOA,MAAAA,SAAAA,EAAMhO,GAYTiO,IAAAA,EAAM,KAAKC,aAAaF,EAAK9E,eAAgBlJ,GACjDA,EAAOsO,uBAAuB,CAC7BpV,EAAG8G,EAAOnG,QAAQX,EAAI,KAAK6U,QAAQE,GAAK/U,EACxCE,EAAG4G,EAAOnG,QAAQT,EAAI,KAAK2U,QAAQE,GAAK7U,IAEzC4U,EAAKO,mBAAmB,CACvBrV,EAAG8U,EAAK9E,eAAehQ,EAAI,KAAK4U,MAAMG,GAAK/U,EAC3CE,EAAG4U,EAAK9E,eAAe9P,EAAI,KAAK0U,MAAMG,GAAK7U,QAE5C,EAAA,GAAA,QAAA,QAAA;;ACzDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhDF,IAAA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,wBA8CE,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxCmBoV,IAAAA,EAwCnB,WAvCY5W,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACdA,KAAAA,MAAQA,EACRsO,KAAAA,KAAO,GACPuI,KAAAA,MAAQ,GAETC,IAAAA,EAAO,IAAIb,EAAJ,QAAejW,GAC1B8W,EAAKZ,MAAM,GAAM,CAAC5U,EAAG,EAAGE,EAAG,GAC3BsV,EAAKX,QAAQ,GAAM,CAAC7U,EAAG,EAAGE,GAAI,GAC9BsV,EAAKC,iBACAzI,KAAAA,KAAK3R,EAAOqC,QAAAA,WAAWC,YAAc6X,EAEtC5X,IAAAA,EAAW,IAAI+W,EAAJ,QAAejW,GAC9Bd,EAASgX,MAAM,GAAM,CAAC5U,EAAG,EAAGE,GAAI,GAChCtC,EAASiX,QAAQ,GAAM,CAAC7U,EAAG,EAAGE,GAAI,GAClCtC,EAAS6X,iBACJzI,KAAAA,KAAK3R,EAAOqC,QAAAA,WAAWE,UAAYA,EAEpCC,IAAAA,EAAO,IAAI8W,EAAJ,QAAejW,GAC1Bb,EAAK+W,MAAM,GAAM,CAAC5U,EAAG,EAAGE,EAAG,GAC3BrC,EAAKgX,QAAQ,GAAM,CAAC7U,EAAG,EAAGE,GAAI,GAC9BrC,EAAK4X,iBACAzI,KAAAA,KAAK3R,EAAOqC,QAAAA,WAAWG,MAAQA,EAET6X,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,OAAOC,QAAQta,EAAOqC,QAAAA,YAAa,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAlDkY,EAAkD,EAAA,GAA7CC,EAA6C,EAAA,GACxDN,KAAAA,MAAMM,GAASpE,EAAM/T,QAAAA,WAAWkY,IAetC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,mBAVgBE,MAAAA,SAAAA,EAAMhB,EAAMlO,EAAME,GAC9B,OAAoB,OAApB,KAAKkG,KAAK8I,IACP,KAAK9I,KAAK8I,GAAMC,iBAAiBjB,EAAMlO,EAAME,KAQpD,CAAA,IAAA,UALOgP,MAAAA,SAAAA,EAAMhB,EAAMhO,GACf,OAAoB,OAApB,KAAKkG,KAAK8I,KAET9I,KAAAA,KAAK8I,GAAME,QAAQlB,EAAMhO,IACvB,OACP,EAAA,GAAA,QAAA,QAAA;;AC4CA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5FF,IAAM8C,EAAK,CAAC,GAAI,EAAG,EAAI,GACjBC,EAAK,CAAC,EAAI,EAAG,GAAI,GAEFoM,EAyFnB,WAxFYvX,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACdA,KAAAA,MAAQA,EACRuB,KAAAA,QAAUvB,EAAMuB,QAEhBiW,KAAAA,gBAAiB,EAEjBC,KAAAA,UAAY,GACZ,IAAA,IAAInW,EAAI,EAAGA,GAAK,KAAKC,QAAQD,EAAGA,IAC/BmW,KAAAA,UAAUnW,GAAK,GAGhBoW,KAAAA,UAAY,EACZC,KAAAA,YAAc,EACjB,KAAK3X,MAAMqF,SAAW,EAAI,KAAKqS,WAC/B,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,UAChC,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,WAC9B,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,WAE5BE,KAAAA,YAAc,CAClB,KAAK5X,MAAMqF,SAAW,EAAI,KAAKqS,WAC9B,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,WAC/B,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,WAC/B,KAAK1X,MAAMqF,SAAW,EAAI,KAAKqS,WAE5BG,KAAAA,OAAS,CACb,KAAK7X,MAAMqF,SAAW,EAAE,KAAKqS,UAC7B,EAAE,KAAKA,UACP,EAAE,KAAKA,UACP,KAAK1X,MAAMqF,SAAW,EAAE,KAAKqS,WAEzBI,KAAAA,OAAS,CACb,EAAE,KAAKJ,UACP,KAAK1X,MAAMqF,SAAW,EAAE,KAAKqS,UAC7B,KAAK1X,MAAMqF,SAAW,EAAE,KAAKqS,UAC7B,EAAE,KAAKA,WAsDR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBAlDiB,MAAA,WACZ,IADY,IAAA,EAAA,KACRpW,EAAI,EAAGA,GAAK,KAAKC,QAAQD,EAAGA,IAC/B,IAAA,IAAIE,EAAI,EAAGA,GAAK,KAAKD,QAAQC,EAAGA,IAC/BiW,KAAAA,UAAUnW,GAAGE,IAAK,EAGpBxB,KAAAA,MAAMwH,cAAckB,QAAQ,SAAApI,GAChCA,EAAKuI,SAASK,eAAeR,QAAQ,SAAA/H,GACpC,EAAK8W,UAAU9W,EAAGW,GAAGX,EAAGa,IAAK,QA0C/B,CAAA,IAAA,eArCc,MAAA,WACTgW,KAAAA,gBAAkB,KAAKA,iBAoC5B,CAAA,IAAA,qBAhCkBlW,MAAAA,SAAAA,EAAGE,GACjBF,QAAAA,EAAI,GAAKE,EAAI,GAAKF,EAAI,KAAKC,QAAQD,GAAKE,EAAI,KAAKD,QAAQC,KA+B7D,CAAA,IAAA,OA3BIiE,MAAAA,SAAAA,GACA,GAAC,KAAK+R,eACL,IAAA,IAAIlW,EAAI,EAAGA,GAAK,KAAKC,QAAQD,EAAGA,IAC/B,IAAA,IAAIE,EAAI,EAAGA,GAAK,KAAKD,QAAQC,EAAGA,IAChC,GAAA,KAAKiW,UAAUnW,GAAGE,GAAI,CACzBiE,EAAIC,UAAY,sBAChBD,EAAIE,SACH,KAAK3F,MAAMuU,cAAcjT,GAA2B,GAAtB,KAAKtB,MAAMqF,SACzC,KAAKrF,MAAMyU,cAAcjT,GAA2B,GAAtB,KAAKxB,MAAMqF,SACnB,EAAtB,KAAKrF,MAAMqF,SACW,EAAtB,KAAKrF,MAAMqF,UAEP,IAAA,IAAI0S,EAAI,EAAGA,EAAI,EAAGA,IAChB,KAAKnP,mBAAmBtH,EAAI4J,EAAG6M,GAAIvW,EAAI2J,EAAG4M,MAC1C,KAAKN,UAAUnW,EAAI4J,EAAG6M,IAAIvW,EAAI2J,EAAG4M,MACtCtS,EAAIC,UAAY,oBAChBD,EAAIE,SACH,KAAK3F,MAAMuU,cAAcjT,GAAK,KAAKqW,YAAYI,GAC/C,KAAK/X,MAAMyU,cAAcjT,GAAK,KAAKoW,YAAYG,GAC/C,KAAKF,OAAOE,GACZ,KAAKD,OAAOC,WAOlB,EAAA,GAAA,QAAA,QAAA;;ACxBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApEF,IAAA,EAAA,EAAA,QAAA,wBAoEE,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlEF,IAAMC,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/BC,EAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAEhBC,EA+DnB,WA9DYlY,SAAAA,EAAAA,GAAO,EAAA,KAAA,GACdA,KAAAA,MAAQA,EAERG,KAAAA,YAAc,KAEdgY,KAAAA,aAAe,EAyDpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBAtDgB7X,MAAAA,SAAAA,GAEXH,KAAAA,YAAcG,IAoDnB,CAAA,IAAA,gBAjDgB,MAAA,WACXH,KAAAA,YAAc,OAgDnB,CAAA,IAAA,gBA7CasF,MAAAA,SAAAA,EAAK/C,GAClB+C,EAAI2S,SACH1V,EACA,KAAK1C,MAAMqF,SAAW2S,EAAG,KAAKG,cAC9B,KAAKnY,MAAMqF,UAAY,KAAKrF,MAAMuB,QAAQC,EAAIyW,EAAG,KAAKE,gBAElDA,KAAAA,iBAuCL,CAAA,IAAA,OApCI1S,MAAAA,SAAAA,GAAK,IAAA,EAAA,KACL,GAAqB,OAArB,KAAKtF,YAAsB,CAE9BsF,EAAIa,UACS,KAAKnG,YAAY6F,MACjB,EACA,KAAKhG,MAAMqF,UAAY,KAAKrF,MAAMuB,QAAQC,EAAE,IACxB,EAApB,KAAKxB,MAAMqF,SACS,EAApB,KAAKrF,MAAMqF,UAExBI,EAAIC,UAAY,OAChBD,EAAI4S,KAAO,aACX5S,EAAI2S,SACH,KAAKjY,YAAYuN,QACK,IAAtB,KAAK1N,MAAMqF,SACX,KAAKrF,MAAMqF,UAAY,KAAKrF,MAAMuB,QAAQC,EAAE,KAGxC2W,KAAAA,aAAe,EAChBG,IAAAA,EAAM,KAAKnY,YAAYoJ,OACK,OAA5B,KAAKpJ,YAAYoJ,SACpB9D,EAAI4S,KAAO,kBACY3U,IAAnB4U,EAAItZ,YACFuZ,KAAAA,cAAc9S,EAClB,KAAKzF,MAAMwY,eAAe3B,MAAMyB,EAAItZ,kBAGnB0E,IAAf4U,EAAIlZ,QACPkZ,EAAIlZ,OAAOsJ,QAAQ,SAAA+P,GAClB,EAAKF,cAAc9S,EAClBsN,EAAM3T,QAAAA,OAAOqZ,EAAYrI,OAAOqI,EAAYpI,eAMjD,EAAA,GAAA,QAAA,QAAA;;ACjDA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAfmBqI,IAAAA,EAenB,WAdY1Y,SAAAA,EAAAA,EAAO2Y,EAAQC,GAAU,EAAA,KAAA,GAChC5Y,KAAAA,MAAQA,EACR4Y,KAAAA,SAAWA,EACXD,KAAAA,OAASA,EACTxE,KAAAA,MAAQ,EAUb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAPY,MAAA,WACPA,KAAAA,MAAQ,IAMb,CAAA,IAAA,SAHMvP,MAAAA,SAAAA,GACDuP,KAAAA,OAASvP,EAAK,KAAK+T,OACpB,KAAKxE,MAAQ,KAAKyE,WAAU,KAAKzE,MAAQ,OAC7C,EAAA,GAAA,QAAA,QAAA;;AC+aD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAjcD,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,kCACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,kCACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,0BACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,yBAmbC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAjboB0E,IAAAA,EAibpB,WAhbe/T,SAAAA,EAAAA,EAAWC,EAAY+T,GAAQ,EAAA,KAAA,GAClCC,KAAAA,WAAa,EACbrU,KAAAA,aAAe,EACfsJ,KAAAA,YAAc,EAEdlJ,KAAAA,UAAYA,EACZC,KAAAA,WAAaA,EACbnC,KAAAA,QAAUkW,EAEVvX,KAAAA,QAAU,CAAED,EAAG,EAAGE,EAAG,GAErB6D,KAAAA,SAAWP,EAAY,KAAKvD,QAAQD,EACpC0X,KAAAA,KAAO,IAAI5T,EAAJ,QAAS,KAAKC,SAAU,KAAK9D,SAE1C0X,KAAAA,UAAY,IAAI5K,EAAJ,QACZ6K,KAAAA,YAAc,IAAIzD,EAAJ,QACd+C,KAAAA,eAAiB,IAAI5B,EAAJ,QAAmB,MACpC1G,KAAAA,aAAe,IAAI6F,EAAJ,QAEfoD,KAAAA,WAAa,GACbC,KAAAA,cAEAC,KAAAA,iBA0ZN,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,iBAvZiB,MAAA,WACL3R,KAAAA,eAAiB,GACjBF,KAAAA,cAAgB,GAChBpF,KAAAA,OAAS,EAETkX,KAAAA,WAAa,GACnBC,KAAAA,UAAY,GAEN9U,KAAAA,aAAe,KAAKsU,WACpBvU,KAAAA,gBAAiB,EACjBgV,KAAAA,wBAA0B,EAE1BzL,KAAAA,KAAO,EACPvC,KAAAA,MAAQ,KACRiO,KAAAA,QAAU,IAAInS,EAAJ,QAAY,MAAM,GAC5B4C,KAAAA,WAAa,IAAIkB,EAAJ,QAAe,MAE5B9N,KAAAA,WAAaX,EAAOW,QAAAA,WAAWC,KAErCka,KAAAA,UAAY,IAAIF,EAAJ,QAAc,MAC1BmC,KAAAA,YAAc,IAAIxB,EAAJ,QAAgB,MAE9BjE,KAAAA,oBAAqB,EACrBC,KAAAA,kBAAmB,EACnBX,KAAAA,uBAAyB,IAAImF,EAAJ,QAAiB,KAAM,IAAM,GACtDa,KAAAA,UAAU5U,KAAK,KAAK4O,0BA8X1B,CAAA,IAAA,cA3Xc,MAAA,WACR4F,KAAAA,WAAWxU,KAAK,IAAImI,EAAJ,QACpB,KAAM,kBAAmBnQ,EAAOM,QAAAA,QAAQE,KAAM,CAACmE,EAAE,EAAGE,EAAE,KAElD2X,KAAAA,WAAWxU,KAAK,IAAImI,EAAJ,QACpB,KAAM,sBAAuBnQ,EAAOM,QAAAA,QAAQC,QAAS,CAACoE,EAAE,EAAGE,EAAE,KAGzD2X,KAAAA,WAAWxU,KAAK,IAAImI,EAAJ,QACpB,KAAM,oBAAqBnQ,EAAOM,QAAAA,QAAQG,OAAQ,CAACkE,EAAE,EAAGE,EAAE,KAGtD2X,KAAAA,WAAWxU,KAAK,IAAImI,EAAJ,QACpB,KAAM,qBAAsBnQ,EAAOM,QAAAA,QAAQI,QAAS,CAACiE,EAAE,EAAGE,EAAE,OA8W9D,CAAA,IAAA,yBA1W0BmY,MAAAA,SAAAA,GACdC,KAAAA,mBAAqBD,IAyWjC,CAAA,IAAA,iBAtWkB1X,MAAAA,SAAAA,EAASlC,EAAS+N,EAAQvE,GAChCnH,KAAAA,SAEPyX,IAAAA,GAAe,EACqB,OAApC,KAAKhY,kBAAkBI,KAC1B4X,GAAe,GAIZvL,IAAAA,EAAOvO,EAAU,KAAKyH,cAAgB,KAAKE,eAC3CoS,EAAU,KAAKZ,YAAYa,WAC9B,KAAK3X,OAAQ,KAAMH,EAASlC,EAAS+N,EAAQvE,GAE9C+E,EAAK3J,KAAKmV,GACVA,EAAQE,oBAEJH,GAAc,KAAKI,uBAAuBH,KAsV/C,CAAA,IAAA,yBAjVuBxZ,MAAAA,SAAAA,GAGjB,IAFD2J,IAAAA,EAAO,KAAKC,WAAWC,UAAU7J,EAAMA,EAAK2B,QAAS,KAAK,GAC1D0H,EAAMM,EAAKF,iBAAiBnG,OACvBgG,EAAI,EAAGA,EAAID,EAAKC,IACpB,GAAqD,OAArD,KAAK/H,kBAAkBoI,EAAKF,iBAAiBH,IAAc,CAC9DtJ,EAAK4Z,mBAAmBjQ,EAAKF,iBAAiBH,IAE9C,SA0UH,CAAA,IAAA,oBApUoB,MAAA,WACduQ,KAAAA,MAAM,KAAKlB,UAAU1K,mBAmU3B,CAAA,IAAA,QAhUS6L,MAAAA,SAAAA,GAEHf,KAAAA,iBAEAJ,KAAAA,UAAUoB,UAAUD,EAAa,MAE3B5O,KAAAA,MAAM8O,UAAU,MAEhBC,KAAAA,cACNC,KAAAA,sBAuTN,CAAA,IAAA,oBApToB,MAAA,WACd9S,KAAAA,eAAegB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOwF,2BAClCjT,KAAAA,cAAckB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOwF,2BAE7CC,KAAAA,oBAgTN,CAAA,IAAA,kBA7SkB,MAAA,WACZjD,KAAAA,UAAUiD,oBA4ShB,CAAA,IAAA,eAzSe,MAAA,WACTjD,KAAAA,UAAUrW,iBAwShB,CAAA,IAAA,gBArSgB,MAAA,WACV6S,KAAAA,oBAAsB,KAAKA,mBAC3BV,KAAAA,uBAAuBoH,eAmS7B,CAAA,IAAA,mBAhSmB,MAAA,WACdC,IAAAA,EAAQ,EACRtM,EAAO,KAGPA,OAFA,KAAK7J,eAAiB,KAAKC,eAAc4J,EAAO,KAAK5G,gBACrD,KAAKjD,eAAiB,KAAKuJ,cAAaM,EAAO,KAAK9G,eAC3C,OAAT8G,EAAsB,GAC1BA,EAAK5F,QAAQ,SAAApI,GACRA,EAAKoB,YAAYkZ,MAEfA,KAuRR,CAAA,IAAA,sBApRyB,MAAA,WACc,IAA5B,KAAKC,oBACAC,KAAAA,WAGVN,KAAAA,sBA+QN,CAAA,IAAA,qBA5QqB,MAAA,YACR,KAAK/V,eAAiB,KAAKC,aACtC,KAAKgD,eAAiB,KAAKF,eAEvBkB,QAAQ,SAAApI,GACRA,EAAKoB,YAAYpB,EAAKa,uBAuQ5B,CAAA,IAAA,kBAlQgBb,MAAAA,SAAAA,GACVoZ,KAAAA,YAAYlZ,gBAAgBF,GAC5B4T,KAAAA,kBAAmB,EACnBX,KAAAA,uBAAuBoH,eA+P7B,CAAA,IAAA,gBA5PgB,MAAA,WACVjB,KAAAA,YAAYjZ,gBACZyT,KAAAA,kBAAmB,EACnBX,KAAAA,uBAAuBoH,eAyP7B,CAAA,IAAA,cAtPiB,MAAA,WAEL5M,KAAAA,OACAtJ,KAAAA,aAAe,KAAKC,aACpBgD,KAAAA,eAAegB,QAAQ,SAAAuM,GACxBA,EAAO8F,mBAiPlB,CAAA,IAAA,aA7OgB,MAAA,WAEJtW,KAAAA,aAAe,KAAKuJ,YACpBxG,KAAAA,cAAckB,QAAQ,SAAAuM,GACvBA,EAAO8F,mBAyOlB,CAAA,IAAA,eApOaC,MAAAA,SAAAA,GACP1B,KAAAA,WAAW3U,KAAKqW,KAmOtB,CAAA,IAAA,WAhOc,MAAA,WACFxP,KAAAA,MAAMyP,QAAQ,MACdzB,KAAAA,wBAA0B,GAC1BhV,KAAAA,gBAAiB,EAClB,KAAKC,eAAiB,KAAKC,aACtBwW,KAAAA,aAAa,IAAIC,EAAJ,QAAqB,MAAM,IACtC,KAAK1W,eAAiB,KAAKuJ,aAC7BkN,KAAAA,aAAa,IAAIC,EAAJ,QAAqB,MAAM,MAyNxD,CAAA,IAAA,kBArNmBvW,MAAAA,SAAAA,GACP4U,KAAAA,yBAA2B5U,EAC5B,KAAK4U,yBAA2B,IAC3BhV,KAAAA,gBAAiB,EAClB,KAAKC,eAAiB,KAAKC,aACtB0W,KAAAA,aACE,KAAK3W,eAAiB,KAAKuJ,aAC7BuM,KAAAA,iBA8MpB,CAAA,IAAA,0BAzM2B9M,MAAAA,SAAAA,EAAUxL,GAEzB,IADD0H,IAAAA,EAAM8D,EAAS7J,OACVgG,EAAI,EAAGA,EAAID,EAAKC,IAEjB6D,GAAAA,EAAS7D,GAAG3H,QAAQX,IAAMW,EAAQX,GAClCmM,EAAS7D,GAAG3H,QAAQT,IAAMS,EAAQT,EAE3BiM,OAAAA,EAAS7D,GAGjB,OAAA,OA+Ld,CAAA,IAAA,0BA5L2B3H,MAAAA,SAAAA,GAEb,OAAA,KAAKoZ,wBAAwB,KAAK3T,eAAgBzF,KA0LhE,CAAA,IAAA,yBAvL0BA,MAAAA,SAAAA,GACZ,OAAA,KAAKoZ,wBAAwB,KAAK7T,cAAevF,KAsL/D,CAAA,IAAA,wBAnLyBlC,MAAAA,SAAAA,EAASkC,GACvBlC,OAAAA,EAAgB,KAAKub,uBAAuBrZ,GACpC,KAAKsZ,wBAAwBtZ,KAiLhD,CAAA,IAAA,wBA9KyBlC,MAAAA,SAAAA,EAASkC,GACvBlC,OAAAA,EAAgB,KAAKwb,wBAAwBtZ,GACrC,KAAKqZ,uBAAuBrZ,KA4K/C,CAAA,IAAA,oBAzKqBA,MAAAA,SAAAA,GACV3B,IAAAA,EAAO,KAAKib,wBAAwBtZ,GACpC3B,OAAS,OAATA,EAAsBA,EAEb,QADbA,EAAO,KAAKgb,uBAAuBrZ,IACT3B,EACnB,OAoKd,CAAA,IAAA,eAjKaP,MAAAA,SAAAA,EAASiN,GAMd1M,OAJI,KAAKkH,cAAcgU,KAAK,SAAUlb,GAAcA,OAAAA,EAAK8B,SAAW4K,MA+J5E,CAAA,IAAA,aAtJWzI,MAAAA,SAAAA,GACNkX,IAAAA,EAAS,KAONA,OANFtC,KAAAA,WAAWzQ,QAAQ,SAAAgT,GACnBA,EAAOC,WAAWpX,KACrBkX,EAASC,EAAO3a,SAChB2a,EAAOE,gBAGFH,IA8IR,CAAA,IAAA,aA3IclX,MAAAA,SAAAA,MA2Id,CAAA,IAAA,cAvIesX,MAAAA,SAAAA,EAAUzT,GAClBA,EAAO0T,YAAYD,EAAShL,UAsInC,CAAA,IAAA,iBAnIkBvQ,MAAAA,SAAAA,GACbA,EAAKP,SACHyH,KAAAA,cAAckB,QAAQ,SAAAqT,GACF,OAApBA,EAAGvI,cAAyBuI,EAAGvI,aAAe,GACjDuI,EAAGC,iBAAiB1b,KAKbA,EAAKP,QAASgU,EAAqBzT,EAAM,KAAKkH,eAGlDlK,KAAAA,WAAaX,EAAOW,QAAAA,WAAWG,KAG3B,KAAK+J,cAAc5D,QAAU,IAC7B,KAAKtG,WAAaX,EAAOW,QAAAA,WAAWE,OAmH/C,CAAA,IAAA,iBAhHkBwd,MAAAA,SAAAA,GACXjH,EAAqBiH,EAAQ,KAAK1B,cA+GzC,CAAA,IAAA,kBA3GgBlD,MAAAA,SAAAA,EAAMlO,EAAME,GACvBgO,OAAgB,OAAhBA,EAAK7M,aAC2B,IAA5B6M,EAAK7M,OAAOvK,YACQ,OAA3BoX,EAAK7M,OAAOvK,YAEN,KAAKwZ,eAAenB,iBAAiBjB,EAAK7M,OAAOvK,WAAYoX,EAAMlO,EAAME,KAsGjF,CAAA,IAAA,yBAlGuBgO,MAAAA,SAAAA,EAAMhO,GACxBgO,OAAgB,OAAhBA,EAAK7M,aAC2B,IAA5B6M,EAAK7M,OAAOvK,YACQ,OAA3BoX,EAAK7M,OAAOvK,YAEN,KAAKwZ,eAAelB,QAAQlB,EAAK7M,OAAOvK,WAAYoX,EAAMhO,KA6FlE,CAAA,IAAA,WA1FW,MAAA,WACN,KAAK9K,aAAeX,EAAOW,QAAAA,WAAWE,MACpC0d,KAAAA,aAAa,IAAIe,EAAJ,QAAqB,OAClC3e,KAAAA,WAAaX,EAAOW,QAAAA,WAAWI,WAGjC,KAAKJ,aAAeX,EAAOW,QAAAA,WAAWG,OAEpCyd,KAAAA,aAAa,IAAIgB,EAAJ,QAAmB,OAChC5e,KAAAA,WAAaX,EAAOW,QAAAA,WAAWI,aAiFtC,CAAA,IAAA,SA5EUkH,MAAAA,SAAAA,GACL,KAAKtH,aAAeX,EAAOW,QAAAA,WAAWC,MACpC4e,KAAAA,WAID5C,KAAAA,UAAU7Q,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOmH,OAAOxX,KAC1CuU,KAAAA,WAAWzQ,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOmH,OAAOxX,KAEtC,KAAK4U,wBAA0B,GAAG,KAAK6C,gBAAgBzX,GAC7D,KAAKtH,aAAeX,EAAOW,QAAAA,WAAWC,OACrC,KAAKkH,eAAiB,KAAKuJ,aAAa,KAAKyL,QAAQ2C,OAAOxX,GAC5D,KAAKH,eAAiB,KAAKC,cAAc,KAAKkV,mBAAmBwC,OAAOxX,IAGlE8C,KAAAA,eAAegB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOmH,OAAOxX,KAC/C4C,KAAAA,cAAckB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOmH,OAAOxX,KAE9C0U,KAAAA,WAAW5Q,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOmH,OAAOxX,OA0DvD,CAAA,IAAA,OAvDQa,MAAAA,SAAAA,GACI+F,KAAAA,MAAM8Q,KAAK7W,GACjB0T,KAAAA,WAAWzQ,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOqH,KAAK7W,KACnCuT,KAAAA,KAAKsD,KAAK7W,GAChBiU,KAAAA,YAAY4C,KAAK7W,GAEjBiC,KAAAA,eAAegB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOsH,WAAW9W,KAC7C+B,KAAAA,cAAckB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOsH,WAAW9W,KAClDiC,KAAAA,eAAegB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOuH,WAAW/W,KACnD+B,KAAAA,cAAckB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOuH,WAAW/W,KAClDiC,KAAAA,eAAegB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOwH,SAAShX,KACjD+B,KAAAA,cAAckB,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOwH,SAAShX,KAEtD+B,KAAAA,cAAckB,QAAQ,SAAAuM,QACWvR,IAAjCuR,EAAOyH,uBACVzH,EAAOyH,sBAAsBjX,KAG1BgS,KAAAA,UAAU6E,KAAK7W,GAET6T,KAAAA,WAAW5Q,QAAQ,SAAAuM,GAAUA,OAAAA,EAAOqH,KAAK7W,OAmCrD,CAAA,IAAA,eA/BgBxD,MAAAA,SAAAA,GACF,MAAA,CACHX,EAAGW,EAAQX,EAAI,KAAK+D,SAAW,KAAKA,SAAW,EAC/C7D,EAAGS,EAAQT,EAAI,KAAK6D,SAAW,KAAKA,SAAW,KA4B1D,CAAA,IAAA,gBAvBcsX,MAAAA,SAAAA,GACNA,OAAAA,EAAM,KAAKtX,SAAW,KAAKA,SAAW,IAsB9C,CAAA,IAAA,gBAnBcuX,MAAAA,SAAAA,GACNA,OAAAA,EAAM,KAAKvX,SAAW,KAAKA,SAAW,IAkB9C,CAAA,IAAA,eAfgBd,MAAAA,SAAAA,GACF,MAAA,CACHjD,EAAGsF,KAAKiW,MAAMtY,EAAIjD,EAAI,KAAK+D,UAAY,EACvC7D,EAAGoF,KAAKiW,MAAMtY,EAAI/C,EAAI,KAAK6D,UAAY,OAYlD,EAAA,GAPD,SAAS0O,EAAqBkB,EAAQ3G,GAC9B3E,IAAAA,EAAM2E,EAAK1K,OACXgG,EAAI,EACHA,IAAAA,EAAI,EAAGA,EAAID,GACR2E,EAAK1E,KAAOqL,EADCrL,KAGrB0E,EAAK6G,OAAOvL,EAAG,GAClB,QAAA,QAAA;;ACrbC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAbmBkT,IAAAA,EACpB,SAAa9c,EAAAA,GAAO,EAAA,KAAA,GACDiG,SAASC,eAAe,eAC9B6W,UAAY/c,EAAMiZ,UAAU+D,mCAE3B/W,SAASC,eAAe,uBAC9B7C,iBAAiB,QAAS,SAAAC,GAC5B2Z,IAAAA,EAAIhX,SAASC,eAAe,oBAC5BuV,EAASwB,EAAEC,QAAQD,EAAEE,eAAehG,MAExCnX,EAAMma,MAAMsB,MAGb,QAAA,QAAA;;ACyCF,aAtDA,IAAA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,gBAmDA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjDA,IAAI3C,EAAS7S,SAASC,eAAe,cACjCT,EAAMqT,EAAOsE,WAAW,MAEtBC,EAAa,IACbC,EAAc,IACdC,EAAa,IACbC,EAAc,IAIhB1d,EAAO,IAAI+Y,EAAJ,QAASwE,EAAYC,EAAaxE,GACzCc,EAAqB,IAAIjX,EAAJ,QAAiB7C,GAC1CA,EAAK2d,uBAAuB7D,GAE5B,IAAI8D,EAAc,IAAIZ,EAAJ,QAAgBhd,GAElCA,EAAK6d,oBAEL,IAAIC,EAAW,EACf,SAASC,EAASC,GACVC,IAAAA,EAAKD,EAAYF,EACrBA,EAAWE,EACPlZ,IAAAA,EAAKmZ,EAAK,GAEdtY,EAAIuY,UAAU,EAAG,EAAGT,EAAYC,GAChC1d,EAAKsc,OAAOxX,GACZ9E,EAAKwc,KAAK7W,GAEbwY,sBAAsBJ,GAGvB,SAASK,IAGH,IADDC,IAAAA,EAAelY,SAASmY,uBAAuB,eAC1CxU,EAAI,EAAGA,EAAIuU,EAAava,OAAQgG,IACxCuU,EAAavU,GAAGvG,iBAAiB,QAAS,WACpCgb,KAAAA,UAAUC,OAAO,UAClBC,IAAAA,EAAU,KAAKC,mBACW,UAA1BD,EAAQE,MAAMC,QACjBH,EAAQE,MAAMC,QAAU,OAExBH,EAAQE,MAAMC,QAAU,UAM5BR,IAEAD,sBAAsBJ","file":"src.271ea7f2.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1,\r\n\t\tThreat: 2,\r\n\t\tBarrier: 3,\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2,\r\n\t\tGameEnded: 3\r\n    },\r\n\tmoveTypes: {\r\n\t\tinfantry: 0,\r\n\t\tcavalry: 1,\r\n\t\tflyer: 2\r\n\t},\r\n\tunitTypes: {\r\n\t\tunitBase: 0,\r\n\t\t\r\n\t\tpKenshi: 1,\r\n\t\tpTomato: 2,\r\n\t\tpBlueberry: 3,\r\n\t\tpCabbage: 4,\r\n\t\tpKenshiJinlai: 5,\r\n\t\t\r\n\t\teKenshi: 11,\r\n\t\teArcher: 12,\r\n\t\teCavLance: 13,\r\n\t\teCavBow: 14,\r\n\t\teDKAxe: 15\r\n\t},\r\n\tzokusei: {\r\n\t\tnone: 0,\r\n\t\tred: 1,\r\n\t\tgreen: 2,\r\n\t\tblue: 3\r\n\t},\r\n\tmoveAssist: {\r\n\t\treposition: 0,\r\n\t\tdrawBack: 1,\r\n\t\tswap: 2\r\n\t},\r\n\tskills: {\r\n\t\tnone: 0,\r\n\t\textraStamina: 1,\r\n\t},\r\n\tsettings: {\r\n\t\tshowUnitID: true,\r\n\t}\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\nconst CTRL_STATE_MA_TARGET_CHOSEN = 4; // move assist target selected\r\n\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n\tstateSelect(unit) {\r\n\t\t// state change not included here!!\r\n\t\tthis.currentUnit = unit;\r\n        unit.eventSelect();\r\n\t\tthis.hGame.eventSelectUnit(unit); // for UI update\r\n\t}\r\n\r\n    stateDeselect() {\r\n\t\tif (this.currentUnit !== null) {\r\n\t\t\tthis.currentUnit.eventDeselect();\r\n\t\t\tthis.currentUnit = null; \r\n\t\t}\r\n\t\tthis.hGame.eventDeselect(); // for UI update\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\t\r\n\tstateConfirmMATarget(unit) {\r\n        this.ctrlState = CTRL_STATE_MA_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n\t}\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Threat) {\r\n            this.hGame.toggleThreat();\r\n\t\t\treturn true;\r\n        } else if (buttonID === consts.buttons.Barrier) {\r\n            this.hGame.toggleBarrier();\r\n\t\t\treturn true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n\t\t\t//localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.stateSelect(unit);\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.stateSelect(unit);\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n\t\t\t\tthis.stateDeselect();\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n\t\t\t\t\tlocalAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentUnit.gridPos,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\t\r\n\t\t\t\t\tthis.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmMATarget(unit);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n\t\t\t\t// execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\t// target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentDest,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t)  { // Move assist target confirmed\r\n                    this.stateConfirmMATarget(unit);\r\n                    return true;\r\n\t\t\t\t} else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_MA_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute move assist\r\n\t\t\t\tthis.hGame.eventExecuteMoveAssist(this.currentUnit, this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        this.hCanvas.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            this.hCanvas.addEventListener(\"touchmove\", event => {\r\n\t\t\t\tif (event.touches === undefined || event.touches.length === 1)\r\n\t\t\t\t\tevent.preventDefault();\r\n            });\r\n            this.hCanvas.addEventListener(\"touchend\", event => {\r\n\t\t\t\tif (event.touches === undefined || event.touches.length === 1)\r\n\t\t\t\t\tevent.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 22 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","export default class effectGameOver {\r\n    constructor(hGame) {\r\n        this.frame = 1;\r\n        this.maxFrame = 200;\r\n\t\tthis.hCanvas = document.getElementById(\"gameScreen\");\r\n\t\tthis.image = document.getElementById(\"img_effect_gameOver\");\r\n        this.drawX = this.hCanvas.width / 2;\r\n        this.drawY = this.hCanvas.height / 2;\r\n\t\tthis.drawScale = 0.05;\r\n\t\tthis.drawAngle = 0;\r\n\t\tthis.phase = 0;\r\n\t\tthis.phaseLength = [50, 180, this.maxFrame];\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n\t\tif (this.frame >= this.phaseLength[this.phase]) {\r\n\t\t\tthis.phase ++;\r\n\t\t\tif (this.phase === 1) {\r\n\t\t\t\tthis.drawScale = 1;\r\n\t\t\t\tthis.drawAngle = 0;\r\n\t\t\t}\r\n\t\t}\r\n        if (this.phase === 0) {\r\n\t\t\tthis.drawScale += (1 - 0.05) / this.phaseLength[0] * df;\r\n\t\t\tthis.drawAngle += 2 * Math.PI * 5 / this.phaseLength[0] * df;\r\n\t\t}\r\n\t\tif (this.phase === 2) {\r\n\t\t\tthis.drawScale -= df / (this.phaseLength[2] - this.phaseLength[1]);\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame) {\r\n\t\t\tlet trX = this.hCanvas.width/2, trY = this.hCanvas.height/2;\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n            ctx.drawImage(\r\n\t\t\t\tthis.image, \r\n\t\t\t\tthis.drawX - this.image.width * this.drawScale / 2, \r\n\t\t\t\tthis.drawY - this.image.height * this.drawScale / 2, \r\n\t\t\t\tthis.image.width * this.drawScale,\r\n\t\t\t\tthis.image.height * this.drawScale,\r\n\t\t\t);\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(-this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n\t\t}\r\n    }\r\n}\r\n","export default class effectStageClear {\r\n    constructor(hGame) {\r\n        this.frame = 1;\r\n        this.maxFrame = 200;\r\n\t\tthis.hCanvas = document.getElementById(\"gameScreen\");\r\n\t\tthis.image = document.getElementById(\"img_effect_stageClear\");\r\n        this.drawX = this.hCanvas.width / 2;\r\n        this.drawY = this.hCanvas.height / 2;\r\n\t\tthis.drawScale = 0.05;\r\n\t\tthis.drawAngle = 0;\r\n\t\tthis.phase = 0;\r\n\t\tthis.phaseLength = [50, 180, this.maxFrame];\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n\t\tif (this.frame >= this.phaseLength[this.phase]) {\r\n\t\t\tthis.phase ++;\r\n\t\t\tif (this.phase === 1) {\r\n\t\t\t\tthis.drawScale = 1;\r\n\t\t\t\tthis.drawAngle = 0;\r\n\t\t\t}\r\n\t\t}\r\n        if (this.phase === 0) {\r\n\t\t\tthis.drawScale += (1 - 0.05) / this.phaseLength[0] * df;\r\n\t\t\tthis.drawAngle += 2 * Math.PI * 5 / this.phaseLength[0] * df;\r\n\t\t}\r\n\t\tif (this.phase === 2) {\r\n\t\t\tthis.drawScale -= df / (this.phaseLength[2] - this.phaseLength[1]);\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame) {\r\n\t\t\tlet trX = this.hCanvas.width/2, trY = this.hCanvas.height/2;\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n            ctx.drawImage(\r\n\t\t\t\tthis.image, \r\n\t\t\t\tthis.drawX - this.image.width * this.drawScale / 2, \r\n\t\t\t\tthis.drawY - this.image.height * this.drawScale / 2, \r\n\t\t\t\tthis.image.width * this.drawScale,\r\n\t\t\t\tthis.image.height * this.drawScale,\r\n\t\t\t);\r\n\t\t\tctx.translate(trX, trY);\r\n\t\t\tctx.rotate(-this.drawAngle);\r\n\t\t\tctx.translate(-trX, -trY);\r\n\t\t}\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\n// remember to check 1~maxGrid when using this stuff\r\nlet dAtk = [];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000-1;\r\n\r\nlet zoku = consts.zokusei;\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n\t\tthis.maxGrid = this.hGame.maxGrid;\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\t\t\r\n\t\tthis.suPDIR = null; // path data with inf search range\r\n\t\tthis.ouPDIR = null;\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 10;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n\t\tif (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n\t\t\tthis.executeWait(unit);\r\n\t\t\treturn;\r\n\t\t}\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos.x + \", \" + unit.gridPos.y + \" @ \" + dest.x + \", \" + dest.y + \" vs \"+ target.gridPos.x + \", \" + target.gridPos.y);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfindBestAttackPosition(su, target) {\r\n\t\tlet dAttacks = dAtk[su.attackRange];\r\n\t\t\r\n\t\tlet minDist = MAX_DIST;\r\n\t\tlet bestGP = null;\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\tif (this.checkIfGpInMaxGrid(target.gridPos.x + dgp.x, target.gridPos.y + dgp.y) &&\r\n\t\t\t\tsu.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y] < minDist\r\n\t\t\t) {\r\n\t\t\t\tlet newGP = {x : target.gridPos.x+dgp.x,  y : target.gridPos.y+dgp.y};\r\n\t\t\t\tlet unit = this.hGame.findUnitByGridPos(newGP);\r\n\t\t\t\tif (unit === null || unit.unitID === su.unitID) {\r\n\t\t\t\t\tminDist = su.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y];\r\n\t\t\t\t\tbestGP = newGP;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//alert(\"/findBestAttackPosition \" + su.unitID + \",\" + target.unitID +\" @(\" + bestGP.x +\",\"+bestGP.y + \")\");\r\n\t\t\r\n\t\treturn bestGP;\r\n\t}\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\t\tlet flagDone = false;\r\n\t\t\r\n        su.pathData.listAttackable.forEach(gp => {\r\n\t\t\tif (flagDone) return;\r\n\t\t\tlet target = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n\t\t\tif (target !== null) {\r\n\t\t\t\t//alert(\"found target\");\r\n\t\t\t\tlet destGP = this.findBestAttackPosition(su, target);\r\n\t\t\t\tif (destGP !== null) {\r\n\t\t\t\t\tthis.executeMoveAttack(\r\n\t\t\t\t\t\tsu, \r\n\t\t\t\t\t\tdestGP, \r\n\t\t\t\t\t\ttarget\r\n\t\t\t\t\t);\r\n\t\t\t\t\tflagDone = true;\r\n\t\t\t\t\treturn; // you can't just return true here because it's inside a anonymous func\r\n\t\t\t\t\t\t// and you can't assume fOUAA ends here because it's inside a forEach loop!\r\n\t\t\t\t\t\t// the moral is: old for loop RULES\r\n\t\t\t\t}\r\n            }\r\n        });\r\n        return flagDone;\r\n    }\r\n\t\r\n\t//return +1: advantage;  -1: disadvantage;  0: tie or N/A\r\n\tcompareZokusei(su, ou) {\r\n\t\tif (su.params === null || ou.params === null) return 0;\r\n\t\tif (su.params.zokusei === undefined || ou.params.zokusei === undefined) return 0;\r\n\t\tif (su.params.zokusei === zoku.none || ou.params.zokusei === zoku.none) return 0;\r\n\t\tif (su.params.zokusei === zoku.red && ou.params.zokusei === zoku.green ||\r\n\t\t\tsu.params.zokusei === zoku.green && ou.params.zokusei === zoku.blue ||\r\n\t\t\tsu.params.zokusei === zoku.blue && ou.params.zokusei === zoku.red)\r\n\t\t\treturn +1;\r\n\t\tif (ou.params.zokusei === zoku.red && su.params.zokusei === zoku.green ||\r\n\t\t\tou.params.zokusei === zoku.green && su.params.zokusei === zoku.blue ||\r\n\t\t\tou.params.zokusei === zoku.blue && su.params.zokusei === zoku.red)\r\n\t\t\treturn -1;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t// define how zokusei works for deciding chase target\r\n\tzokuseiChasingDistScore(su, ou) {\r\n\t\tlet rate = 1; // replace it when chasing skills are implemented\r\n\t\treturn (-(rate * su.moveDist) - 0.5) * this.compareZokusei(su, ou);\r\n\t}\r\n\r\n\t// for chasing gp tiebreaker\r\n\tgetChasingPosScore(su, gp, target) {\r\n\t\tlet score = 0;\r\n\t\tlet len = this.ouList.length;\r\n\t\tfor (let i = 0; i < len; i ++) {\r\n\t\t\tlet z = this.compareZokusei(su, this.ouList[i]);\r\n\t\t\tscore += 100 * this.ouPDIR[i].dist[gp.x][gp.y] * (-z);\r\n\t\t}\r\n\t\tscore -= Math.abs(\r\n\t\t\tMath.abs(target.gridPos.x - gp.x) - \r\n\t\t\tMath.abs(target.gridPos.y - gp.y)\r\n\t\t);\r\n\t\treturn score;\r\n\t}\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n\t\tlet bestTarget = null;\r\n\t\tlet bestScore = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null &&\r\n\t\t\t\tthis.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== su)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let pdir = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    pdir.dist[target.gridPos.x][target.gridPos.y]\r\n\t\t\t\t\t+ this.zokuseiChasingDistScore(su, target);\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n\t\t\t\t\tbestTarget = target;\r\n\t\t\t\t\tbestScore = this.getChasingPosScore(su, gp, target);\r\n\t\t\t\t\t//alert(target.unitID + \" @ \"+gp.x+\",\"+gp.y+\" : \"+bestScore);\r\n                } else if (distTarget === minDist) {\r\n\t\t\t\t\tlet newScore = this.getChasingPosScore(su, gp, target);\r\n\t\t\t\t\t//alert(target.unitID + \" @ \"+gp.x+\",\"+gp.y+\" : \"+newScore);\r\n\t\t\t\t\tif (newScore > bestScore) {\r\n\t\t\t\t\t\tbestGP = gp;\r\n\t\t\t\t\t\tbestTarget = target;\r\n\t\t\t\t\t\tbestScore = newScore;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n            });\r\n        });\r\n        //alert(minDist + \" @ (\" + bestGP.x + \",\" + bestGP.y + \") -> \" + bestTarget.nameStr);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\t\r\n\tfindClosestUnit() {\r\n\t\tlet minDist = 10000;\r\n\t\tlet closestUnitIdx = null;\r\n\t\t\r\n\t\tlet len = this.suList.length;\r\n        for (let i = 0; i < len; i++) {\r\n\t\t\tlet su = this.suList[i];\r\n\t\t\tif (!su.isActive()) continue;\r\n\t\t\tthis.ouList.forEach(ou => {\r\n\t\t\t\t//let dist = Math.abs(su.gridPos.x - ou.gridPos.x) + Math.abs(su.gridPos.y - ou.gridPos.y);\r\n\t\t\t\tlet dist = this.suPDIR[i].dist[ou.gridPos.x][ou.gridPos.y];\r\n\t\t\t\t//alert(su.unitID+\" -> \"+ou.unitID +\" = \"+ dist);\r\n\t\t\t\tif (dist < minDist) {\r\n\t\t\t\t\tminDist = dist;\r\n\t\t\t\t\tclosestUnitIdx = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn closestUnitIdx;\r\n\t}\r\n\r\n\t// update path data with inf search range\r\n\tupdatePDIR() {\r\n\t\tlet suLen = this.suList.length;\r\n\t\tthis.suPDIR = [];\r\n\t\tfor (let i = 0; i < suLen; i ++) {\r\n\t\t\tthis.suPDIR[i] = this.hGame.pathFinder.floodFill(\r\n\t\t\t\tthis.suList[i], this.suList[i].gridPos, 300, true\r\n\t\t\t);\r\n\t\t}\r\n\t\tlet ouLen = this.ouList.length;\r\n\t\tthis.ouPDIR = [];\r\n\t\tfor (let i = 0; i < ouLen; i ++) {\r\n\t\t\tthis.ouPDIR[i] = this.hGame.pathFinder.floodFill(\r\n\t\t\t\tthis.ouList[i], this.ouList[i].gridPos, 300, true\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n    makeOneMove() {\r\n\t\tthis.updatePDIR();\r\n\t\tlet suIdx = this.findClosestUnit();\r\n\t\tif (suIdx !== null) {\r\n\t\t\tlet res = this.findOppoUnitAndAttack(suIdx);\r\n\t\t\tif (res === false) res = this.tryGetClose(suIdx);\r\n\t\t\tif (res === false) this.executeWait(this.suList[suIdx]);\r\n\t\t}\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nlet dAtk = [];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return an object pathData := {\r\n\t\t\tprev[x][y] := (gp) gp of parent node in the path tree.\r\n\t\t\tdist[x][y] := (int) dist from startGP.\r\n\t\t\tlistPossibleDest := [] of reachable gp. NOTE: MIGHT HAVE OTHER UNITS\r\n\t\t\tattackable[x][y] := (bool) whether that gp can be attacked by the unit.\r\n\t\t\tlistAttackable := [] of attackable gp. NOTE: MIGHT BE BLOCKED BY OTHER UNITS\r\n\t\t}\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [];\r\n        let dist = [];\r\n\t\tlet attackable = [];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [];\r\n            dist[i] = [];\r\n            attackable[i] = [];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n                attackable[i][j] = false;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\t\tlet listAttackable = [];\r\n\t\t\r\n\t\tlet dAttacks = dAtk[unit.attackRange];\r\n\t\tthis.addAttackable(dAttacks, attackable, listAttackable, startGP.x, startGP.y)\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] = dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.addAttackable(dAttacks, attackable, listAttackable, xNew, yNew);\r\n\t\t\t\t\t\t\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        let pathData = { \r\n\t\t\tprev: prev, \r\n\t\t\tdist: dist, \r\n\t\t\tlistPossibleDest: listPossibleDest,\r\n\t\t\tattackable: attackable,\r\n\t\t\tlistAttackable: listAttackable\r\n\t\t};\r\n\t\treturn pathData;\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\t// unused\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n\t\r\n\t// private methods\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\taddAttackable(dAttacks, attackable, listAttackable, xOrigin, yOrigin)\r\n\t{\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\t//alert(dgp.x +\",\"+ dgp.y +\",\"+ xOrigin +\",\"+  yOrigin)\r\n\t\t\tif (this.checkIfGpInMaxGrid(xOrigin + dgp.x, yOrigin + dgp.y) &&\r\n\t\t\t\t!attackable[xOrigin + dgp.x][yOrigin + dgp.y]\r\n\t\t\t) {\r\n\t\t\t\tattackable[xOrigin + dgp.x][yOrigin + dgp.y] = true;\r\n\t\t\t\tlistAttackable.push({\r\n\t\t\t\t\tx : xOrigin + dgp.x, y : yOrigin + dgp.y\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\n/*\r\n\tHow to add button:\r\n\tUsually, you don't need to change this file.\r\n\t(1) Add the button in Game.makeButtons().\r\n\t(2) Add consts.buttons entry.\r\n\t(3) Add button trigger in AbsCon.clickButton().\r\n\t(4) Implement the functionality of button in Game, UnitBase, etc.\r\n*/\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList, nameStr) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\t\tthis.nameStr = nameStr;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"古の「Stage 04」\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavBow,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavLance,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Reinforcement Test\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavLance,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eCavBow,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 8 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 8 },\r\n        appearTurn: 1,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eDKAxe,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    }\r\n];\r\n\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Barrier Test\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\r\n\t// 5\r\n    {\r\n        gridPos: { x: 3, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [5, 7]\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t\tbarrier: [5]\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t\tbarrier: [6, 8]\r\n\t\t}\r\n    }\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-0 初戦\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Wtr, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 5, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    }\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-1 電光石火\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 5, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    }\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-2 分断の術\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 3, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    }\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-3 包囲\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 2, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 2, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-4 狩り人\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 1, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 1, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 2, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-5 分断の術II\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Mnt, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t\r\n\t{\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t\r\n\t\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 0-6 包囲II\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 6, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 3, y: 8 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n    },\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 1-1 バリアー！\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n\t{\r\n\t\tgridPos: { x: 2, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t\tbarrier: [4]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 2, y: 7 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [2]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 6, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n\t},\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 1-2 難敵\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\r\n\t{\r\n\t\tgridPos: { x: 1, y: 1 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t\tbarrier: [3,4,5,6]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 1, y: 5 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 6, y: 5 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 2, y: 8 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 5, y: 8 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n\t},\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 1-3 差し伸べる手\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\r\n\t{\r\n\t\tgridPos: { x: 1, y: 7 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 2, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 6, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 5, y: 7 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 6, y: 7 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 5, y: 8 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t\tbarrier: [5]\r\n\t\t}\r\n\t},\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 1-4 待ち伏せ\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Mnt, T.Mnt],\r\n\t[T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\r\n\t{\r\n\t\tgridPos: { x: 5, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 4, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 3, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 5, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.red,\r\n\t\t\tbarrier: [7]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 3, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eArcher,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 3, y: 6 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue,\r\n\t\t}\r\n\t},\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet nameStr = \"Stage 1-5 分断の術III\";\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Nrm],\r\n\t[T.Nrm, T.Nrm, T.Wtr, T.Wtr, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 3, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.none\r\n\t\t}\r\n    },\r\n\t{\r\n        gridPos: { x: 4, y: 6 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.blue\r\n\t\t}\r\n    },\r\n\r\n\t{\r\n\t\tgridPos: { x: 5, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 4, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [5]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 3, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [8]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 2, y: 3 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [3]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 3, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [6]\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tgridPos: { x: 4, y: 2 },\r\n\t\tappearTurn: 0,\r\n\t\tisEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {\r\n\t\t\tzokusei: consts.zokusei.green,\r\n\t\t\tbarrier: [7]\r\n\t\t}\r\n\t},\r\n];\r\n\r\nexport default {nameStr: nameStr, stageCreator: function () {\r\n\treturn new Stage(maxGrid, terrainMap, unitList, nameStr);\r\n}}\r\n\r\n","import OldStage04 from \"/src/stages/oldStage04\";\r\nimport StageTestReinforcement from \"/src/stages/test_reinforcement\";\r\nimport StageTestBarrier from \"/src/stages/test_barrier\";\r\n\r\nimport Stage0000 from \"/src/stages/stage_0_0\";\r\nimport Stage0001 from \"/src/stages/stage_0_1\";\r\nimport Stage0002 from \"/src/stages/stage_0_2\";\r\nimport Stage0003 from \"/src/stages/stage_0_3\";\r\nimport Stage0004 from \"/src/stages/stage_0_4\";\r\nimport Stage0005 from \"/src/stages/stage_0_5\";\r\nimport Stage0006 from \"/src/stages/stage_0_6\";\r\nimport Stage0101 from \"/src/stages/stage_1_1\";\r\nimport Stage0102 from \"/src/stages/stage_1_2\";\r\nimport Stage0103 from \"/src/stages/stage_1_3_easy\";\r\nimport Stage0104 from \"/src/stages/stage_1_4\";\r\nimport Stage0105 from \"/src/stages/stage_1_5\";\r\n\r\n/*\r\n\tWhen adding a new stage:\r\n\t(1) import it above\r\n\t(2) push it into this.list @ constructor\r\n*/\r\n\r\nexport default class StageList {\r\n\tconstructor () {\r\n\t\tthis.list = [];\r\n\t\tthis.defaultStageIdx = 0;\r\n\t\t\r\n\t\tthis.list.push(Stage0000);\r\n\t\tthis.list.push(Stage0001);\r\n\t\tthis.list.push(Stage0002);\r\n\t\tthis.list.push(Stage0003);\r\n\t\tthis.list.push(Stage0004);\r\n\t\tthis.list.push(Stage0005);\r\n\t\tthis.list.push(Stage0006);\r\n\t\tthis.list.push(Stage0101);\r\n\t\tthis.list.push(Stage0102);\r\n\t\tthis.list.push(Stage0103);\r\n\t\tthis.list.push(Stage0104);\r\n\t\tthis.list.push(Stage0105);\r\n\t\t\r\n\t\tthis.list.push(OldStage04);\r\n\t\tthis.list.push(StageTestBarrier);\r\n\t\tthis.list.push(StageTestReinforcement);\r\n\t}\r\n\t\r\n\tloadStage(idxStr, hGame) {\r\n\t\tlet stage = this.list[parseInt(idxStr)];\r\n\t\t//alert(stageClass + \", \" + \"Stage \"+idxStr);\r\n\t\thGame.stage = stage.stageCreator();\r\n\t}\r\n\t\r\n\tgetStageListStringForMapSelecter() {\r\n\t\tlet str = `\r\n\t\tMap:\r\n\t\t<select id=\"divSelecter_list\">`;\r\n\t\t\r\n\t\tlet len = this.list.length;\r\n\t\tfor (let i = 0; i < len; i ++) {\r\n\t\t\tstr += `<option value=\"`+ i \r\n\t\t\t+ (i === this.defaultStageIdx ? `\" selected` : `\"`)\r\n\t\t\t+`>` + this.list[i].nameStr + `</option>\r\n\t\t\t`;\r\n\t\t}\r\n\t\t\r\n\t\tstr += `</select>\r\n\t\t<button id=\"divSelecter_confirm\">Confirm</button>\r\n\t\t<br />\r\n\t\t`;\r\n\t\treturn str;\r\n\t}\r\n\t\r\n}","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy) {\r\n        this.unitID = unitID;\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n\r\n\t\tthis.nameStr = \"nannhidaman\";\r\n\t\tthis.imageID = \"img_kenshi\";\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.params = null;\r\n\t\tthis.moveType = consts.moveTypes.infantry;\r\n\t\t\r\n        this.pathData = null;\r\n\t\tthis.skillList = [];\r\n    }\r\n\t\r\n\tcreateSkills() {\r\n\t\tif (this.params !== null && \r\n\t\t\ttypeof(this.params.skills) !== \"undefined\" &&\r\n\t\t\tthis.params.skills !== null\r\n\t\t) {\r\n\t\t\tthis.params.skills.forEach(skillLevelPair => {\r\n\t\t\t\tlet newSkill = this.hGame.skillCreator.createSkill(\r\n\t\t\t\t\tthis, \r\n\t\t\t\t\tskillLevelPair.skill,\r\n\t\t\t\t\tskillLevelPair.level,\r\n\t\t\t\t);\r\n\t\t\t\tthis.skillList.push(newSkill);\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\tapplyPassiveSkills() {\r\n\t\tthis.skillList.forEach(skill => {\r\n\t\t\tif (skill.isPassive === true) {\r\n\t\t\t\tskill.applyOnce();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\t// need to be called manually by Game after creation\r\n\tinitAfterCreation() {\r\n\t\tthis.createSkills();\r\n\t\tthis.applyPassiveSkills();\r\n\t\t\r\n\t\tthis.image = document.getElementById(this.imageID);\r\n\t\t\r\n\t\tlet zokuStr = \"img_effect_zoku_grey\";\r\n\t\tif (this.params !== null && this.params.zokusei !== undefined) {\r\n\t\t\tif (this.params.zokusei === consts.zokusei.red) zokuStr = \"img_effect_zoku_red\";\r\n\t\t\tif (this.params.zokusei === consts.zokusei.blue) zokuStr = \"img_effect_zoku_blue\";\r\n\t\t\tif (this.params.zokusei === consts.zokusei.green) zokuStr = \"img_effect_zoku_green\";\r\n\t\t}\r\n\t\tthis.imageZokusei = document.getElementById(zokuStr);\r\n\t\t\r\n\t\tthis.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\t\tthis.stamina = 0;\r\n\t\tthis.moveDist = this.moveDistMax;\r\n\t\t\r\n\t\tthis.updateCoordinate();\r\n\t\t\r\n\t\tthis.resetControlState();\r\n\t\tthis.resetProposal();\r\n\t\t\r\n\t\tif (consts.settings.showUnitID === true) {\r\n\t\t\tthis.nameStr = this.nameStr + \" (\" + this.unitID + \")\";\r\n\t\t}\r\n\t}\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n\tisAlive() {\r\n\t\treturn (this.hp > 0);\r\n\t}\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n    }\r\n\r\n\t// super important stuff\r\n    eventRequirePathUpdate() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n\tcheckTerrain(gridPos) {\r\n\t\tif (this.moveType === consts.moveTypes.flyer) return true;\r\n\t\t\r\n\t\tif (this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        ) \treturn false;\r\n\r\n        return true;\r\n\t}\r\n\r\n\t// for MoveAssist.checkEligibility\r\n\tcheckStopable(gridPos, ignoreUnit) {\r\n\t\tlet unit = this.hGame.findUnitByGridPos(gridPos);\r\n\t\tif (unit !== null && \r\n\t\t\tunit !== ignoreUnit &&\r\n\t\t\tunit !== this\r\n\t\t) return false;\r\n\t\t\r\n\t\treturn this.checkTerrain(gridPos);\r\n\t}\r\n\r\n    checkPassable(gridPos, flagIgnoreEnemyUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (!flagIgnoreEnemyUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\treturn false;\r\n\r\n        return this.checkTerrain(gridPos);\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\t\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n\t// possibly the stupidest thing in this class\r\n\tupdateCoordinate() {\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t}\r\n\r\n    eventExecuteMovement() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.gridPos = this.destProposalGP;\r\n        this.updateCoordinate();\r\n        this.executeAction();\r\n    }\r\n\t\r\n\teventUseMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.updateCoordinate();\r\n\t\tthis.executeAction();\r\n\t}\r\n\t\r\n\teventMovedByMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.updateCoordinate();\r\n\t}\r\n\t\r\n\t// used in e.g. resolving reinforcement conflict\r\n\teventForceMovement(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.updateCoordinate();\r\n\t}\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n\t\tif (this.attackRange === 0) return false;\r\n        if (Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n            Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\treturn true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.updateCoordinate();\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        let flag = (\r\n            this.isEnemy && (this.hGame.currentPhase === this.hGame.PHASE_ENEMY) ||\r\n            !this.isEnemy && (this.hGame.currentPhase === this.hGame.PHASE_PLAYER) \r\n        );\r\n\t\treturn flag;\r\n    }\r\n\r\n    update(df) {}\r\n\t\r\n\tdrawThreat(ctx) {\r\n\t\tif (this.isSelected) {\r\n\t\t\tctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n\t\t\tthis.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tif (!this.hGame.pathFinder.isReachable(this.pathData, gp)) {\r\n\t\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tctx.fillStyle = \"rgba(238,238,255,0.5)\";\r\n\t\t\tthis.pathData.listPossibleDest.forEach(gp => {\r\n\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\tctx.fillRect(\r\n\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n    drawUnitBG(ctx) {\r\n\t\tlet halfscale = 0.47;\r\n\t\t\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * halfscale,\r\n            this.coordinate.y - this.imageSize.y * halfscale,\r\n            this.imageSize.x * 2 * halfscale,\r\n            this.imageSize.y * 2 * halfscale\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * halfscale,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * halfscale,\r\n                        this.imageSize.x * 2 * halfscale,\r\n                        this.imageSize.y * 2 * halfscale\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * halfscale,\r\n                this.destProposalCoord.y - this.imageSize.y * halfscale,\r\n                this.imageSize.x * 2 * halfscale,\r\n                this.imageSize.y * 2 * halfscale\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n\t\tif (this.isAlive()) {\r\n\t\t\tif (this.hasDestProposal) {\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.image,\r\n\t\t\t\t\tthis.destProposalCoord.x -\r\n\t\t\t\t\t\t(this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.destProposalCoord.y -\r\n\t\t\t\t\t\t(this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.imageZokusei,\r\n\t\t\t\t\tthis.destProposalCoord.x -\r\n\t\t\t\t\t\t(this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.destProposalCoord.y -\r\n\t\t\t\t\t\t(this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.image,\r\n\t\t\t\t\tthis.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t\tctx.drawImage(\r\n\t\t\t\t\tthis.imageZokusei,\r\n\t\t\t\t\tthis.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\t\tthis.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.graveImage === undefined) \r\n\t\t\t\tthis.graveImage = document.getElementById(\"img_dead\");\r\n\t\t\t\r\n\t\t\tctx.drawImage(\r\n\t\t\t\tthis.graveImage,\r\n\t\t\t\tthis.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n\t\t\t\tthis.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n\t\t\t\tthis.imageSize.x * this.drawScale,\r\n\t\t\t\tthis.imageSize.y * this.drawScale\r\n\t\t\t);\r\n\t\t}\r\n    }\r\n}\r\n","import UnitBase from \"/src/unitBase\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t}\r\n*/\r\n\r\nexport default class ProtoPlayer extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\t//this.params = params;\r\n\t\tthis.params = JSON.parse(JSON.stringify(params));\r\n\t\tif (this.params.skills === undefined) this.params.skills = [];\r\n\t}\r\n}\r\n","const texts = {\r\n\tunit: {\r\n\t\tunitBase: \"nannhidaman\",\r\n\t\t\r\n\t\tpKenshi: \"剣士\",\r\n\t\t\r\n\t\tpTomato: \"トマト・ジューシー\",\r\n\t\tpBlueberry: \"ブルーベリー・タイニー\",\r\n\t\tpCabbage: \"キャベツ・レタス・ドッチナン\",\r\n\t\tpKenshiJinlai: \"リザルト・ヴォン・ヒ～ダン\",\r\n\t\t\r\n\t\teKenshi: \"剣士\",\r\n\t\teArcher: \"弓兵\",\r\n\t\teCavLance: \"騎士\",\r\n\t\teCavBow: \"弓騎兵\",\r\n\t\teDKAxe: \"竜騎士\"\r\n\t},\r\n\tmoveAssist: {\r\n\t\tnone: \"移動補助なし\",\r\n\t\treposition: \"引き戻し\",\r\n\t\tdrawBack: \"引き寄せ\",\r\n\t\tswap: \"入れ替え\"\r\n\t},\r\n\tskills: {\r\n\t\tnone: \"--\",\r\n\t\textraStamina: \"行動力強化\",\r\n\t},\r\n}\r\n\r\n\r\nexport default texts;","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pKenshi;\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport texts from \"/src/texts/texts_jp\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PKenshiJinlai extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pKenshiJinlai;\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t\tthis.params.skills.push({\r\n\t\t\tskill: \"extraStamina\",\r\n\t\t\tlevel: 1\r\n\t\t});\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PTomato extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pTomato;\r\n\t\tthis.imageID = \"img_tomato\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.drawBack;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PBlueberry extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pBlueberry;\r\n\t\tthis.imageID = \"img_blueberry\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.swap;\r\n\t\t\r\n\t\tthis.params.skills.push({\r\n\t\t\tskill: \"extraStamina\",\r\n\t\t\tlevel: 1\r\n\t\t});\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class PCabbage extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.pCabbage;\r\n\t\tthis.imageID = \"img_cabbage\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\t\r\n\t\tthis.params.moveAssist = consts.moveAssist.reposition;\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\nimport consts from \"/src/consts\";\r\n\r\n/*\r\n\tparams: {\r\n\t\tmoveAssist\r\n\t\tskills: []\r\n\t\tbarrier: [unitIDs].  Note: unitID starts from 1!!!! WTF!!!!\r\n\t}\r\n*/\r\n\r\nexport default class ProtoEnemy extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\t//this.params = params;\r\n\t\tthis.params = JSON.parse(JSON.stringify(params));\r\n\t\tif (this.params.skills === undefined) this.params.skills = [];\r\n\t\tthis.barrierTimer = this.hGame.barrierConnectionTimer;\r\n\t\t//this.initBarrier();   <-- moved to update()\r\n\t}\r\n\t\r\n\tinitBarrier() {\r\n\t\tthis.barrierTotal = 0;\r\n\t\tthis.barrierSourceList = [];\r\n\t\tif (this.params.barrier === undefined) this.params.barrier = null;\r\n\t\tif (this.params.barrier !== null) {\r\n\t\t\tthis.params.barrier.forEach(id => {\r\n\t\t\t\tthis.barrierTotal ++;\r\n\t\t\t\tthis.barrierSourceList.push(\r\n\t\t\t\t\tthis.hGame.findUnitByID(this.isEnemy, id)\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (this.barrierTotal > 0) this.imageZokusei = this.imageBarrier;\r\n\t}\r\n\t\r\n\tinitAfterCreation() {\r\n\t\tsuper.initAfterCreation();\r\n\t\tlet zokuStr = \"img_effect_barrier_grey\";\r\n\t\tif (this.params !== null && this.params.zokusei !== undefined) {\r\n\t\t\tif (this.params.zokusei === consts.zokusei.red) zokuStr = \"img_effect_barrier_red\";\r\n\t\t\tif (this.params.zokusei === consts.zokusei.blue) zokuStr = \"img_effect_barrier_blue\";\r\n\t\t\tif (this.params.zokusei === consts.zokusei.green) zokuStr = \"img_effect_barrier_green\";\r\n\t\t}\r\n\t\tthis.imageBarrier = document.getElementById(zokuStr);\r\n\t\tthis.imageZokuseiReal = this.imageZokusei;\r\n\t\t\r\n\t}\r\n\t\r\n\teventLoseBarrier(unitSource) {\r\n\t\tlet idx = this.params.barrier.indexOf(unitSource.unitID);\r\n\t\tif (idx === -1) return;\r\n\t\t\r\n\t\t/*\r\n\t\tlet idx = this.params.barrier.indexOf(unitSource.unitID);\r\n\t\tif (idx !== -1) {\r\n\t\t\tlet len = this.params.barrier.length;\r\n\t\t\tif (idx !== len-1) {\r\n\t\t\t\tthis.params.barrier[idx] = this.params.barrier.pop();\r\n\t\t\t} else {\r\n\t\t\t\tthis.params.barrier.pop();\r\n\t\t\t}\r\n\t\t}*/\r\n\t\tthis.barrierTotal --;\r\n\t\tremoveObjectFromList(unitSource, this.barrierSourceList);\r\n\t\tif (this.barrierTotal <= 0) {\r\n\t\t\tthis.imageZokusei = this.imageZokuseiReal;\r\n\t\t}\r\n\t}\r\n\t\r\n\teventLoseHP(damage) {\r\n\t\tif (this.barrierTotal > 0) return;\r\n\t\tsuper.eventLoseHP(damage);\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tsuper.update(df);\r\n\t\t\r\n\t\t// this is ugly but it should avoid barrier-lock problems\r\n\t\tif (this.barrierTotal === undefined) this.initBarrier();\r\n\t}\r\n\t\r\n\tdrawBarrierConnection(ctx) {\r\n\t\tif (this.barrierTotal <= 0) return;\r\n\t\tif (this.isInPhase()) return;\r\n\t\tif (this.hGame.flagDrawAllBarrier === false &&\r\n\t\t\tthis.isSelected === false) return;\r\n\t\tif (this.hGame.flagDrawAllBarrier && \r\n\t\t\tthis.hGame.flagUnitSelected &&\r\n\t\t\tthis.isSelected === false) return;\r\n\t\t\r\n\t\tif (this.barrierTimer.timer > 2) return;\r\n\t\t\r\n\t\tctx.lineWidth = 4;\r\n\t\tctx.strokeStyle = \"#0000FF\";\r\n\t\tlet\tx2 = this.hGame.gridPosToPosX(this.gridPos.x), \r\n\t\t\ty2 = this.hGame.gridPosToPosY(this.gridPos.y);\r\n\t\t\t\r\n\t\tthis.barrierSourceList.forEach(unit => {\r\n\t\t\tlet x1 = this.hGame.gridPosToPosX(unit.gridPos.x), \r\n\t\t\t\ty1 = this.hGame.gridPosToPosY(unit.gridPos.y);\r\n\t\t\t\r\n\t\t\tif (this.barrierTimer.timer <= 1) {\r\n\t\t\t\tdrawLine(\r\n\t\t\t\t\tctx, x1, y1, \r\n\t\t\t\t\tx1 + this.barrierTimer.timer * (x2 - x1), \r\n\t\t\t\t\ty1 + this.barrierTimer.timer * (y2 - y1)\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tdrawLine(\r\n\t\t\t\t\tctx, \r\n\t\t\t\t\tx1 + (this.barrierTimer.timer-1) * (x2 - x1), \r\n\t\t\t\t\ty1 + (this.barrierTimer.timer-1) * (y2 - y1), \r\n\t\t\t\t\tx2, y2\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t//drawLine(ctx, x1, y1, x2, y2);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/*\r\n\tdrawUnit(ctx) {\r\n\t\tif (this.barrierTotal > 0) this.drawBarrierConnection(ctx);\r\n\t\tsuper.drawUnit(ctx);\r\n\t}\r\n\t*/\r\n\t\r\n}\r\n\r\nfunction drawLine(ctx, x1, y1, x2, y2) {\r\n\t//alert(ctx +\",\"+ x1 +\",\"+ y1 +\",\"+ x2 +\",\"+ y2);\r\n\tctx.beginPath();\r\n\tctx.moveTo(x1, y1);\r\n\tctx.lineTo(x2, y2);\r\n\tctx.stroke();\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let idx = list.indexOf(object);\r\n    list.splice(idx, 1);\r\n}\r\n","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class EKenshi extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eKenshi;\r\n\t\tthis.imageID = \"img_kenshi2\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class EArcher extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eArcher;\r\n\t\tthis.imageID = \"img_eArcher\";\r\n\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 2;\r\n\t\t\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ECavLance extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eCavLance;\r\n\t\tthis.imageID = \"img_eKibaYari\";\r\n\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ECavBow extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eCavBow;\r\n\t\tthis.imageID = \"img_eKibaYumi\";\r\n\r\n\t\tthis.moveDistMax = 3;\r\n\t\tthis.attackRange = 2;\r\n\t\tthis.moveType = consts.moveTypes.cavalry;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class eDKAxe extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.nameStr = texts.unit.eDKAxe;\r\n\t\tthis.imageID = \"img_eDK\";\r\n\t\t\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.moveType = consts.moveTypes.flyer;\r\n\t}\r\n}","import consts from \"/src/consts\"\r\nimport UnitBase from \"/src/unitBase\";\r\nimport PKenshi from \"/src/units/pKenshi\";\r\nimport PKenshiJinlai from \"/src/units/pKenshiJinlai\";\r\nimport PTomato from \"/src/units/pTomato\";\r\nimport PBlueberry from \"/src/units/pBlueberry\";\r\nimport PCabbage from \"/src/units/pCabbage\";\r\nimport EKenshi from \"/src/units/eKenshi\";\r\nimport EArcher from \"/src/units/eArcher\";\r\nimport ECavLance from \"/src/units/eCavLance\";\r\nimport ECavBow from \"/src/units/eCavBow\";\r\nimport EDKAxe from \"/src/units/eDKAxe\";\r\n\r\n/*\r\n\tWhen adding a new unit:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js\r\n*/\r\nlet uType = consts.unitTypes;\r\n\r\nexport default class UnitCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [];\r\n\t\t\r\n\t\tthis.list[uType.unitBase] = UnitBase;\r\n\t\tthis.list[uType.pKenshi] = PKenshi;\r\n\t\tthis.list[uType.pKenshiJinlai] = PKenshiJinlai;\r\n\t\tthis.list[uType.pTomato] = PTomato;\r\n\t\tthis.list[uType.pBlueberry] = PBlueberry;\r\n\t\tthis.list[uType.pCabbage] = PCabbage;\r\n\t\t\r\n\t\tthis.list[uType.eKenshi] = EKenshi;\r\n\t\tthis.list[uType.eArcher] = EArcher;\r\n\t\tthis.list[uType.eCavLance] = ECavLance;\r\n\t\tthis.list[uType.eCavBow] = ECavBow;\r\n\t\tthis.list[uType.eDKAxe] = EDKAxe;\r\n\t}\r\n\t\r\n\tcreateUnit(unitID, hGame, gridPos, isEnemy, typeID, params) {\r\n\t\t//alert(unitID+\",\"+gridPos.x+\",\"+gridPos.y+\",\"+isEnemy+\",\"+typeID);\r\n\t\tif (typeID === uType.unitBase) {\r\n\t\t\t// this should never happen after units are implemented\r\n\t\t\tlet unit = new this.list[typeID](\r\n\t\t\t\tunitID, hGame, gridPos, isEnemy\r\n\t\t\t);\r\n\t\t\treturn unit;\r\n\t\t}\r\n\t\t\r\n\t\tlet unit = new this.list[typeID](\r\n\t\t\t unitID, hGame, gridPos, isEnemy, params\r\n\t\t);\r\n\t\treturn unit;\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class SkillPassive {\r\n\tconstructor (unit, level) {\r\n\t\tthis.hUnit = unit;\r\n\t\tthis.level = level;\r\n\t\t\r\n\t\tthis.isPassive = true; // important, decides when & how the skill is applied\r\n\t\t// others are like isBuffEveryTurn, isMovementMutator etc. \r\n\t\t\r\n\t\tthis.skillID = consts.skills.none; // set this after super\r\n\t}\r\n\t\r\n\tapplyOnce() {\r\n\t\t// change staminaMax, etc.\r\n\t}\r\n\t\r\n\t// other stuffs... still not sure how to implement stuffs like sendo. sigh...\r\n\t// also there can be skills that apply \"online\" e.g. waves...\r\n\t// well they perhaps should be called active skills so we don't need to worry about them atm lol\r\n}\r\n","import SkillPassive from \"/src/skills/skillPassive\";\r\nimport consts from \"/src/consts\";\r\nimport texts from \"/src/texts/texts_jp\";\r\n\r\nexport default class ExtraStamina extends SkillPassive {\r\n\tconstructor (unit, level) {\r\n\t\tsuper(unit, level);\r\n\t\tthis.skillID = consts.skills.extraStamina;\r\n\t}\r\n\t\r\n\tapplyOnce() {\r\n\t\tthis.hUnit.staminaMax += this.level;\r\n\t\t//alert(this.hUnit.staminaMax);\r\n\t}\r\n}\r\n","import consts from \"/src/consts\";\r\nimport ExtraStamina from \"/src/skills/passive/extraStamina\";\r\n\r\n/*\r\n\tWhen adding a new skill:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js, texts_##.js\r\n*/\r\n\r\nexport default class SkillCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [];\r\n\t\tthis.list[consts.skills.extraStamina] = ExtraStamina;\r\n\t}\r\n\t\r\n\tcreateSkill(unit, skillStr, level) {\r\n\t\t//alert(unit +\", \"+ skillStr +\", \"+ level);\r\n\t\tlet newSkill = new this.list[consts.skills[skillStr]](unit, level);\r\n\t\treturn newSkill;\r\n\t}\r\n\t\r\n}","/* \r\n\tcurrently only support 1-grid MA\r\n\tbut extending to 8 dirs shouldn't be too difficult\r\n*/\r\n\r\nexport default class MoveAssist {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.dUser = []; // [2:{x,y}, 4, 6, 8]\r\n\t\tthis.dTarget = [];\r\n\t\t\r\n\t\tfor (let i = 0; i <= 9; i ++) {\r\n\t\t\tthis.dUser[i] = null;\r\n\t\t\tthis.dTarget[i] = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// super() -> set values to dUser[2] & dTarget[2] -> call this\r\n\tcopyToFourDirs() {\r\n\t\tthis.dUser[8] = {\r\n\t\t\tx: this.dUser[2].x,\r\n\t\t\ty: -this.dUser[2].y\r\n\t\t}\r\n\t\tthis.dUser[6] = {\r\n\t\t\tx: this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dUser[4] = {\r\n\t\t\tx: -this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dTarget[8] = {\r\n\t\t\tx: this.dTarget[2].x,\r\n\t\t\ty: -this.dTarget[2].y\r\n\t\t}\r\n\t\tthis.dTarget[6] = {\r\n\t\t\tx: this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t\tthis.dTarget[4] = {\r\n\t\t\tx: -this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDirection(dest, target) {\r\n\t\tlet dx = target.gridPos.x - dest.x;\r\n\t\tlet dy = target.gridPos.y - dest.y;\r\n\t\tif (dx > 1 || dx < -1 || dy > 1 || dy < -1) return null;\r\n\t\treturn 5 + dx - 3*dy;\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(gp) {\r\n\t\tif (gp.x < 1 || gp.y < 1 || \r\n\t\t\tgp.x > this.hGame.maxGrid.x || \r\n\t\t\tgp.y > this.hGame.maxGrid.y\r\n\t\t) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tcheckEligibility(user, dest, target) {\r\n\t\t//alert(user.unitID + \" @ \" + dest.x + \",\" + dest.y + \" -> \" + target.unitID);\r\n\t\tlet dir = this.getDirection(dest, target);\r\n\t\tif (dir === null) return false;\r\n\t\tif (this.dUser[dir] === null) return false;\r\n\t\t//alert(\"pass 1\");\r\n\t\tlet gpNewUser = {\r\n\t\t\tx: dest.x + this.dUser[dir].x,\r\n\t\t\ty: dest.y + this.dUser[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewUser)) return false;\r\n\t\tif (!user.checkStopable(gpNewUser, target)) return false;\r\n\t\t//alert(\"pass 2\");\r\n\t\tlet gpNewTarget = {\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewTarget)) return false;\r\n\t\tif (!target.checkStopable(gpNewTarget, user)) return false;\r\n\t\t//alert(\"pass 3\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\texecute(user, target) {\r\n\t\t/* \tcorrent logic is: \r\n\t\t\tUB.eventUseMoveAssist ->\r\n\t\t\tUB.executeAction -> \r\n\t\t\tGame.eventActionExecuted ->\r\n\t\t\tGame.requirePathUpdate ->\r\n\t\t\tUB.eventRequirePathUpdate.\r\n\t\t\t\r\n\t\t\tTo avoid pathData problem, always call in the order of:\r\n\t\t\t(1) eventMovedByMoveAssist\r\n\t\t\t(2) eventUseMoveAssist.\r\n\t\t*/\r\n\t\tlet dir = this.getDirection(user.destProposalGP, target);\r\n\t\ttarget.eventMovedByMoveAssist({\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t});\r\n\t\tuser.eventUseMoveAssist({\r\n\t\t\tx: user.destProposalGP.x + this.dUser[dir].x,\r\n\t\t\ty: user.destProposalGP.y + this.dUser[dir].y\r\n\t\t});\r\n\t}\r\n\t\r\n}","import MoveAssist from \"/src/skills/moveAssist\";\r\nimport consts from \"/src/consts\"\r\nimport texts from \"/src/texts/texts_jp\"\r\n\r\n/* \r\n\tto add: change constructor, consts, texts.\r\n*/\r\n\r\nexport default class MoveAssistList {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.list = [];\r\n\t\tthis.names = [];\r\n\t\t\r\n\t\tlet repo = new MoveAssist(hGame);\r\n\t\trepo.dUser[2] = \t{x: 0, y: 0};\r\n\t\trepo.dTarget[2] = \t{x: 0, y: -2};\r\n\t\trepo.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.reposition] = repo;\r\n\t\t\r\n\t\tlet drawBack = new MoveAssist(hGame);\r\n\t\tdrawBack.dUser[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.drawBack] = drawBack;\r\n\t\t\r\n\t\tlet swap = new MoveAssist(hGame);\r\n\t\tswap.dUser[2] = \t{x: 0, y: +1};\r\n\t\tswap.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tswap.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.swap] = swap;\r\n\t\t\r\n\t\tfor (const [key, value] of Object.entries(consts.moveAssist)) {\r\n\t\t\tthis.names[value] = texts.moveAssist[key];\r\n\t\t}\r\n\t\t//alert(this.names);\r\n\t}\r\n\t\r\n\tcheckEligibility(maID, user, dest, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\treturn this.list[maID].checkEligibility(user, dest, target);\r\n\t}\r\n\t\r\n\texecute(maID, user, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\t// assume checkEligibility is already passed\r\n\t\tthis.list[maID].execute(user, target);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\n\r\nexport default class ThreatMap {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.maxGrid = hGame.maxGrid;\r\n\t\t\r\n\t\tthis.flagShowThreat = false;\r\n\t\t\r\n\t\tthis.threatMap = [];\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tthis.threatMap[x] = [];\r\n\t\t}\r\n\t\t\r\n\t\tthis.thickness = 2;\r\n\t\tthis.drawOffsetX = [\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawOffsetY = [\r\n\t\t\tthis.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness,\r\n\t\t\t-this.hGame.gridSize / 2 - this.thickness\r\n\t\t];\r\n\t\tthis.drawDX = [\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t];\r\n\t\tthis.drawDY = [\r\n\t\t\t2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\tthis.hGame.gridSize + 2*this.thickness,\r\n\t\t\t2*this.thickness,\r\n\t\t];\r\n\t}\r\n\t\r\n\tupdateThreatMap() {\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tthis.threatMap[x][y] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.hGame.enemyUnitList.forEach(unit => {\r\n\t\t\tunit.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tthis.threatMap[gp.x][gp.y] = true;\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.flagShowThreat = !this.flagShowThreat;\r\n\t\t//alert(this.flagShowThreat);\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tif (!this.flagShowThreat) return;\r\n\t\tfor (let x = 1; x <= this.maxGrid.x; x++) {\r\n\t\t\tfor (let y = 1; y <= this.maxGrid.y; y++) {\r\n\t\t\t\tif (this.threatMap[x][y]) {\r\n\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,0.1)\";\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) - this.hGame.gridSize * 0.5,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1,\r\n\t\t\t\t\t\tthis.hGame.gridSize * 1\r\n\t\t\t\t\t);\r\n\t\t\t\t\tfor (let k = 0; k < 4; k ++) {\r\n\t\t\t\t\t\tif (! this.checkIfGpInMaxGrid(x + dx[k], y + dy[k])) continue;\r\n\t\t\t\t\t\tif (! this.threatMap[x + dx[k]][y + dy[k]]) {\r\n\t\t\t\t\t\t\tctx.fillStyle = \"rgba(255,50,50,1)\";\r\n\t\t\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosX(x) + this.drawOffsetX[k],\r\n\t\t\t\t\t\t\t\tthis.hGame.gridPosToPosY(y) + this.drawOffsetY[k],\r\n\t\t\t\t\t\t\t\tthis.drawDX[k],\r\n\t\t\t\t\t\t\t\tthis.drawDY[k]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import texts from \"/src/texts/texts_jp\"\r\n\r\nconst sx = [2.3, 2.3, 2.3, 4.3, 4.3, 4.3];\r\nconst sy = [1.1, 1.4, 1.7, 1.1, 1.4, 1.7];\r\n\r\nexport default class StatusPanel {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.currentUnit = null;\r\n\t\t\r\n\t\tthis.skillCounter = 0;\r\n\t}\r\n\t\r\n\teventSelectUnit (unit) {\r\n\t\t//alert(\"select\");\r\n\t\tthis.currentUnit = unit;\r\n\t}\r\n\t\r\n\teventDeselect () {\r\n\t\tthis.currentUnit = null;\r\n\t}\r\n\t\r\n\tdrawSkillText(ctx, str) {\r\n\t\tctx.fillText(\r\n\t\t\tstr,\r\n\t\t\tthis.hGame.gridSize * sx[this.skillCounter],\r\n\t\t\tthis.hGame.gridSize * (this.hGame.maxGrid.y + sy[this.skillCounter])\r\n\t\t);\r\n\t\tthis.skillCounter ++;\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tif (this.currentUnit !== null) {\r\n\t\t\t//alert(\"draw\");\r\n\t\t\tctx.drawImage(\r\n                this.currentUnit.image,\r\n                0,\r\n                this.hGame.gridSize * (this.hGame.maxGrid.y+0.2),\r\n                this.hGame.gridSize*2,\r\n                this.hGame.gridSize*2\r\n            );\r\n\t\t\tctx.fillStyle = \"#000\";\r\n\t\t\tctx.font = \"18px serif\";\r\n\t\t\tctx.fillText(\r\n\t\t\t\tthis.currentUnit.nameStr,\r\n\t\t\t\tthis.hGame.gridSize * 2.3,\r\n\t\t\t\tthis.hGame.gridSize * (this.hGame.maxGrid.y+0.6)\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tthis.skillCounter = 0;\r\n\t\t\tlet cUP = this.currentUnit.params;\r\n\t\t\tif (this.currentUnit.params !== null) {\r\n\t\t\t\tctx.font = \"14px serif\";\r\n\t\t\t\tif (cUP.moveAssist !== undefined) {\r\n\t\t\t\t\tthis.drawSkillText(ctx,\r\n\t\t\t\t\t\tthis.hGame.moveAssistList.names[cUP.moveAssist]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tif (cUP.skills !== undefined) {\r\n\t\t\t\t\tcUP.skills.forEach(skillLvPair => {\r\n\t\t\t\t\t\tthis.drawSkillText(ctx, \r\n\t\t\t\t\t\t\ttexts.skills[skillLvPair.skill]+skillLvPair.level\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","/* \r\n\tbehaviour: see update()\r\n*/\r\n\r\nexport default class GeneralTimer {\r\n\tconstructor (hGame, dfRate, maxValue) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.maxValue = maxValue;\r\n\t\tthis.dfRate = dfRate;\r\n\t\tthis.timer = 0;\r\n\t}\r\n\t\r\n\tresetTimer() {\r\n\t\tthis.timer = 0;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tthis.timer += df * this.dfRate;\r\n\t\tif (this.timer > this.maxValue) this.timer = 0; \r\n\t}\r\n}","//import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EffectGameOver from \"/src/effects/effectGameOver\";\r\nimport EffectStageClear from \"/src/effects/effectStageClear\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\nimport StageList from \"/src/stages/stageList\";\r\nimport UnitCreator from \"/src/units/unitCreator\";\r\nimport SkillCreator from \"/src/skills/skillCreator\";\r\nimport MoveAssistList from \"/src/skills/moveAssistList\";\r\nimport ThreatMap from \"/src/ui/threatMap\";\r\nimport StatusPanel from \"/src/ui/statusPanel\";\r\nimport GeneralTimer from \"/src/ui/generalTimer\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\t\t\r\n\t\tthis.stageList = new StageList();\r\n\t\tthis.unitCreator = new UnitCreator();\r\n\t\tthis.moveAssistList = new MoveAssistList(this);\r\n\t\tthis.skillCreator = new SkillCreator();\r\n\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n\t\t\r\n\t\tthis.resetGameState();\r\n    }\r\n\t\r\n\tresetGameState() {\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\t\tthis.timerList = [];\r\n\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\t\r\n\t\t\r\n\t\tthis.threatMap = new ThreatMap(this);\r\n\t\tthis.statusPanel = new StatusPanel(this);\r\n\t\t\r\n\t\tthis.flagDrawAllBarrier = false;\r\n\t\tthis.flagUnitSelected = false;\r\n\t\tthis.barrierConnectionTimer = new GeneralTimer(this, 0.04, 3);\r\n\t\tthis.timerList.push(this.barrierConnectionTimer);\r\n\t}\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t\t\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_threat\", consts.buttons.Threat, {x:7, y:8}\r\n\t\t));\r\n\t\t\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_barrier\", consts.buttons.Barrier, {x:7, y:7}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, typeID, params) {\r\n        this.unitID++;\r\n\t\t\r\n\t\tlet flagConflict = false;\r\n\t\tif (this.findUnitByGridPos(gridPos) !== null) {\r\n\t\t\tflagConflict = true;\r\n\t\t\t//alert(\"unit placement conflict detected\");\r\n\t\t}\r\n\t\t\r\n\t\tlet list = isEnemy ? this.enemyUnitList : this.playerUnitList;\r\n\t\tlet newUnit = this.unitCreator.createUnit(\r\n\t\t\tthis.unitID, this, gridPos, isEnemy, typeID, params\r\n\t\t);\r\n\t\tlist.push(newUnit);\r\n\t\tnewUnit.initAfterCreation();\r\n\t\t\r\n\t\tif (flagConflict) this.resolveNewUnitConflict(newUnit);\r\n\t\t\r\n\t\t//alert(\"unit created with ID = \" + this.unitID);\r\n    }\r\n\t\r\n\tresolveNewUnitConflict(unit) {\r\n\t\tlet pdir = this.pathFinder.floodFill(unit, unit.gridPos, 300, true);\r\n\t\tlet len = pdir.listPossibleDest.length;\r\n\t\tfor (let i = 0; i < len; i ++) {\r\n\t\t\tif (this.findUnitByGridPos(pdir.listPossibleDest[i]) === null) {\r\n\t\t\t\tunit.eventForceMovement(pdir.listPossibleDest[i]);\r\n\t\t\t\t//alert(\"Replace new unit to \"+unit.gridPos.x+\",\"+unit.gridPos.y);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tstartDefaultStage() {\r\n\t\tthis.start(this.stageList.defaultStageIdx);\r\n\t}\r\n\r\n    start(stageIdxStr) {\r\n\t\t//alert(\"start\")\r\n\t\tthis.resetGameState();\r\n\t\t\r\n\t\tthis.stageList.loadStage(stageIdxStr, this);\r\n\t\t\t\t\r\n        this.stage.initStage(this);\r\n\t\t\r\n        this.playerPhase();\r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\trequirePathUpdate() {\r\n\t\tthis.playerUnitList.forEach(object => object.eventRequirePathUpdate());\r\n        this.enemyUnitList.forEach(object => object.eventRequirePathUpdate());\r\n\t\t\r\n\t\tthis.updateThreatMap();\r\n\t}\r\n\r\n\tupdateThreatMap() {\r\n\t\tthis.threatMap.updateThreatMap();\r\n\t}\r\n\t\r\n\ttoggleThreat() {\r\n\t\tthis.threatMap.toggleThreat();\r\n\t}\r\n\t\r\n\ttoggleBarrier() {\r\n\t\tthis.flagDrawAllBarrier = !this.flagDrawAllBarrier;\r\n\t\tthis.barrierConnectionTimer.resetTimer();\r\n\t}\r\n\r\n\tcountActiveUnits() {\r\n\t\tlet count = 0;\r\n\t\tlet list = null;\r\n\t\tif (this.currentPhase === this.PHASE_PLAYER) list = this.playerUnitList;\r\n\t\tif (this.currentPhase === this.PHASE_ENEMY) list = this.enemyUnitList;\r\n\t\tif (list === null) return 0;\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) count ++;\r\n\t\t});\r\n\t\treturn count;\r\n\t}\r\n\r\n    eventActionExecuted() {\r\n        if (this.countActiveUnits() === 0) {\r\n            this.endPhase();\r\n        }\r\n        \r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n\teventSelectUnit(unit) {\r\n\t\tthis.statusPanel.eventSelectUnit(unit);\r\n\t\tthis.flagUnitSelected = true;\r\n\t\tthis.barrierConnectionTimer.resetTimer();\r\n\t}\r\n\t\r\n\teventDeselect() {\r\n\t\tthis.statusPanel.eventDeselect();\r\n\t\tthis.flagUnitSelected = false;\r\n\t\tthis.barrierConnectionTimer.resetTimer();\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n\taddNewEffect(effect) {\r\n\t\tthis.effectList.push(effect);\r\n\t}\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.addNewEffect(new EffectStartPhase(this, true));\r\n        } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n            this.addNewEffect(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindUnitByID(isEnemy, id) {\r\n\t\t//alert(id);\r\n\t\tlet unit = this.enemyUnitList.find(function (unit) {return unit.unitID === id;});\r\n\t\t//let unit = null;\r\n\t\t//this.enemyUnitList.forEach(u => {if (u.unitID === id) unit = u;})\r\n\t\t//alert(unit);\r\n\t\treturn unit;\r\n\t\t//if (isEnemy) return ;\r\n\t\t//else return this.playerUnitList.find(unit => unit.unitID === id);\r\n\t}\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n\t\tif (unit.isEnemy) {\r\n\t\t\tthis.enemyUnitList.forEach(eu => {\r\n\t\t\t\tif (eu.barrierTotal !== null && eu.barrierTotal > 0) {\r\n\t\t\t\t\teu.eventLoseBarrier(unit);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else { \r\n\t\t\t//removeObjectFromList(unit, this.playerUnitList); // to draw the grave\r\n\t\t\tthis.gameResult = consts.gameResult.Lose;\r\n\t\t}\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\tcheckMoveAssist(user, dest, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.checkEligibility(user.params.moveAssist, user, dest, target);\r\n\t}\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\teventExecuteMoveAssist(user, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.execute(user.params.moveAssist, user, target);\r\n\t}\r\n\r\n\tgameEnds() {\r\n\t\tif (this.gameResult === consts.gameResult.Win) {\r\n\t\t\tthis.addNewEffect(new EffectStageClear(this));\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t\t//this.currentPhase = this.PHASE_NONE;\r\n\t\t}\r\n\t\tif (this.gameResult === consts.gameResult.Lose) {\r\n\t\t\t//alert(\"GAME OVER\");\r\n\t\t\tthis.addNewEffect(new EffectGameOver(this));\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t\t//this.currentPhase = this.PHASE_NONE;\r\n\t\t}\r\n\t}\r\n\r\n    update(df) {\r\n\t\tif (this.gameResult !== consts.gameResult.None) {\r\n\t\t\tthis.gameEnds();\r\n\t\t\t// return;\r\n\t\t}\r\n\t\t\r\n\t\tthis.timerList.forEach(object => object.update(df));\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n\t\tif (this.gameResult === consts.gameResult.None) {\r\n\t\t\tif (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n\t\t\tif (this.currentPhase === this.PHASE_PLAYER) this.playerInputHandler.update(df);\r\n\t\t}\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\tthis.statusPanel.draw(ctx);\r\n\t\t\r\n\t\tthis.playerUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\t\t\r\n\t\tthis.enemyUnitList.forEach(object => {\r\n\t\t\tif (object.drawBarrierConnection !== undefined) \r\n\t\t\t\tobject.drawBarrierConnection(ctx);\r\n\t\t});\r\n\t\t\r\n\t\tthis.threatMap.draw(ctx);\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\t\r\n\t// if making too many {} is really a problem then use this\r\n\tgridPosToPosX(gpx) {\r\n\t\treturn gpx * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\t\r\n\tgridPosToPosY(gpy) {\r\n\t\treturn gpy * this.gridSize - this.gridSize / 2;\r\n\t}\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","export default class MapSelecter {\r\n\tconstructor (hGame) {\r\n\t\tlet divSelecter = document.getElementById(\"mapSelecter\");\r\n\t\tdivSelecter.innerHTML = hGame.stageList.getStageListStringForMapSelecter();\r\n\t\t\r\n\t\tlet button = document.getElementById(\"divSelecter_confirm\");\r\n\t\tbutton.addEventListener(\"click\", event => {\r\n\t\t\tvar e = document.getElementById(\"divSelecter_list\");\r\n\t\t\tvar result = e.options[e.selectedIndex].value;\r\n\t\t\t//alert(\"confirmed \" + result);\r\n\t\t\thGame.start(result);\r\n\t\t});\r\n\r\n\t}\r\n}","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport MapSelecter from \"/src/mapSelecter\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\nlet mapSelecter = new MapSelecter(game);\n\ngame.startDefaultStage();\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n\trequestAnimationFrame(gameLoop);\n}\n\nfunction scriptCollapsibles() {\n\t// https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapsible\n\tlet collapsibles = document.getElementsByClassName(\"collapsible\");\n\tfor (let i = 0; i < collapsibles.length; i++) {\n\t\tcollapsibles[i].addEventListener(\"click\", function() {\n\t\t\tthis.classList.toggle(\"active\");\n\t\t\tlet content = this.nextElementSibling; // wtf this is handy\n\t\t\tif (content.style.display === \"block\") {\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t}\n\t\t});\n\t}\n}\n\nscriptCollapsibles() ;\n\nrequestAnimationFrame(gameLoop);\n"]}