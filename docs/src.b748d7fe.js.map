{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/grid.js","src/effects/effectStartPhase.js","src/enemyAI.js","src/pathFinder.js","src/button.js","src/stage.js","src/stages/stage0.js","src/stages/stage1.js","src/stages/stage2.js","src/stages/stage3.js","src/stages/stageList.js","src/unitBase.js","src/units/protoPlayer.js","src/units/pKenshi.js","src/units/pKenshiJinlai.js","src/units/pTomato.js","src/units/pBlueberry.js","src/units/pCabbage.js","src/units/protoEnemy.js","src/units/eKenshi.js","src/units/unitCreator.js","src/skills/moveAssist.js","src/skills/moveAssistList.js","src/game.js","src/mapSelecter.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","gameResult","None","Win","Lose","GameEnded","unitTypes","unitBase","pKenshi","pTomato","pBlueberry","pCabbage","pKenshiJinlai","eKenshi","moveAssist","reposition","drawBack","swap","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","CTRL_STATE_MA_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","unit","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","x","maxGrid","y","findSelfUnitByGridPos","isActive","eventSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","unitID","checkMoveAssist","stateConfirmMATarget","eventExecuteMovement","eventExecuteAttack","eventExecuteMoveAssist","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","length","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","Grid","gridSize","xMax","yMax","lineHalfWidth","ctx","fillStyle","fillRect","effectStartPhase","isEnemyPhase","frame","maxFrame","image","document","getElementById","drawX","drawY","eventEffectEnd","drawImage","dAtk","MAX_DIST","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","target","su","dAttacks","attackRange","minDist","bestGP","forEach","dgp","checkIfGpInMaxGrid","pathData","dist","newGP","suIdx","flagDone","listAttackable","destGP","findBestAttackPosition","executeMoveAttack","listPossibleDest","wideSearch","pathFinder","floodFill","distTarget","executeMove","i","len","stamina","res","findOppoUnitAndAttack","tryGetClose","executeWait","makeOneMove","dx","dy","PathFinder","eList","pList","hStage","stage","visited","path","startGP","searchRange","flagIgnoreUnit","prev","attackable","j","queue","head","tail","addAttackable","xNew","yNew","gpNew","checkPassable","goalGP","moveDist","retrievePath","xOrigin","yOrigin","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","gridPosToPos","drawScale","drawScaleMax","Math","min","T","Stage","terrainMap","unitList","imageCache","appearTurn","eventPlaceUnit","typeID","params","turn","PHASE_ENEMY","getTerrain","U","createStage","StageList","list","Stage0","Stage1","Stage2","Stage3","idxStr","stageClass","parseInt","UnitBase","coordinate","imageID","imageSize","staminaMax","moveDistMax","hp","attack","alive","resetControlState","resetProposal","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","ignoreUnit","checkTerrain","abs","isReachable","acceptPath","eventActionExecuted","executeAction","eventBattle","damage","eventUnitDeath","isInPhase","ProtoPlayer","PKenshi","PTomato","PBlueberry","PCabbage","ProtoEnemy","EKenshi","uType","UnitCreator","PKenshiJinlai","MoveAssist","dUser","dTarget","user","dir","getDirection","gpNewUser","checkStopable","gpNewTarget","eventMovedByMoveAssist","eventUseMoveAssist","MoveAssistList","repo","copyToFourDirs","maID","checkEligibility","execute","Game","canvas","PHASE_NONE","grid","stageList","unitCreator","moveAssistList","buttonList","makeButtons","resetGameState","effectList","framesBeforeChangePhase","enemyAI","inputHandler","playerInputHandler","newUnit","createUnit","initAfterCreation","stageIdxStr","loadStage","initStage","playerPhase","requirePathUpdate","object","eventRequirePathUpdate","count","countActiveUnits","endPhase","eventNewTurn","endTurn","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","result","button","checkClick","eventClick","attacker","eventLoseHP","removeObjectFromList","effect","update","procChangePhase","alert","draw","drawThreat","drawUnitBG","drawUnit","floor","splice","MapSelecter","innerHTML","getStageListStringForMapSelecter","e","options","selectedIndex","value","start","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","mapSelecter","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","scriptCollapsibles","collapsibles","getElementsByClassName","classList","toggle","content","nextElementSibling","style","display"],"mappings":"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","file":"src.b748d7fe.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2,\r\n\t\tGameEnded: 3\r\n    },\r\n\tunitTypes: {\r\n\t\tunitBase: 0,\r\n\t\t\r\n\t\tpKenshi: 1,\r\n\t\tpTomato: 2,\r\n\t\tpBlueberry: 3,\r\n\t\tpCabbage: 4,\r\n\t\tpKenshiJinlai: 5,\r\n\t\t\r\n\t\teKenshi: 11\r\n\t},\r\n\tmoveAssist: {\r\n\t\treposition: 0,\r\n\t\tdrawBack: 1,\r\n\t\tswap: 2\r\n\t}\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\nconst CTRL_STATE_MA_TARGET_CHOSEN = 4; // move assist target selected\r\n\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n    stateDeselect() {\r\n        this.currentUnit.eventDeselect();\r\n        this.currentUnit = null;\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\t\r\n\tstateConfirmMATarget(unit) {\r\n        this.ctrlState = CTRL_STATE_MA_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n\t}\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n\t\t\t//localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.currentUnit = unit;\r\n                unit.eventSelect();\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.currentUnit = unit;\r\n                    unit.eventSelect();\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n\t\t\t\t\tlocalAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentUnit.gridPos,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\t\r\n\t\t\t\t\tthis.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmMATarget(unit);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n\t\t\t\t// execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\t// target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else if (unit !== null &&\r\n\t\t\t\t\tunit.unitID !== this.currentUnit.unitID &&\r\n                    unit.isEnemy === this.isEnemy &&\r\n                    this.hGame.checkMoveAssist(\r\n\t\t\t\t\t\tthis.currentUnit, \r\n\t\t\t\t\t\tthis.currentDest,\r\n\t\t\t\t\t\tunit\r\n\t\t\t\t\t)\r\n\t\t\t\t)  { // Move assist target confirmed\r\n                    this.stateConfirmMATarget(unit);\r\n                    return true;\r\n\t\t\t\t} else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_MA_TARGET_CHOSEN) {\r\n            if (gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute move assist\r\n\t\t\t\tthis.hGame.eventExecuteMoveAssist(this.currentUnit, this.currentTarget);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        this.hCanvas.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            this.hCanvas.addEventListener(\"touchmove\", event => {\r\n                event.preventDefault();\r\n            });\r\n            this.hCanvas.addEventListener(\"touchend\", event => {\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 22 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\n// remember to check 1~maxGrid when using this stuff\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n\t\tthis.maxGrid = this.hGame.maxGrid;\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 5;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos.x + \", \" + unit.gridPos.y + \" @ \" + dest.x + \", \" + dest.y + \" vs \"+ target.gridPos.x + \", \" + target.gridPos.y);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfindBestAttackPosition(su, target) {\r\n\t\tlet dAttacks = dAtk[su.attackRange];\r\n\t\t\r\n\t\tlet minDist = MAX_DIST;\r\n\t\tlet bestGP = null;\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\tif (this.checkIfGpInMaxGrid(target.gridPos.x + dgp.x, target.gridPos.y + dgp.y) &&\r\n\t\t\t\tsu.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y] < minDist\r\n\t\t\t) {\r\n\t\t\t\tlet newGP = {x : target.gridPos.x+dgp.x,  y : target.gridPos.y+dgp.y};\r\n\t\t\t\tlet unit = this.hGame.findUnitByGridPos(newGP);\r\n\t\t\t\tif (unit === null || unit.unitID === su.unitID) {\r\n\t\t\t\t\tminDist = su.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y];\r\n\t\t\t\t\tbestGP = newGP;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//alert(\"/findBestAttackPosition \" + su.unitID + \",\" + target.unitID +\" @(\" + bestGP.x +\",\"+bestGP.y + \")\");\r\n\t\t\r\n\t\treturn bestGP;\r\n\t}\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\t\tlet flagDone = false;\r\n\t\t\r\n        su.pathData.listAttackable.forEach(gp => {\r\n\t\t\tif (flagDone) return;\r\n\t\t\tlet target = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n\t\t\tif (target !== null) {\r\n\t\t\t\t//alert(\"found target\");\r\n\t\t\t\tlet destGP = this.findBestAttackPosition(su, target);\r\n\t\t\t\tif (destGP !== null) {\r\n\t\t\t\t\tthis.executeMoveAttack(\r\n\t\t\t\t\t\tsu, \r\n\t\t\t\t\t\tdestGP, \r\n\t\t\t\t\t\ttarget\r\n\t\t\t\t\t);\r\n\t\t\t\t\tflagDone = true;\r\n\t\t\t\t\treturn; // you can't just return true here because it's inside a anonymous func\r\n\t\t\t\t\t\t// and you can't assume fOUAA ends here because it's inside a forEach loop!\r\n\t\t\t\t\t\t// the moral is: old for loop RULES\r\n\t\t\t\t}\r\n            }\r\n        });\r\n        return flagDone;\r\n    }\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let wideSearch = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    wideSearch.dist[target.gridPos.x][target.gridPos.y];\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n                }\r\n            });\r\n        });\r\n        //alert(minDist + \", \" + bestGP);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    makeOneMove() {\r\n        let i = 0,\r\n            len = this.suList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (this.suList[i].stamina > 0) {\r\n                let res = this.findOppoUnitAndAttack(i);\r\n                if (res === false) res = this.tryGetClose(i);\r\n                if (res === false) this.executeWait(this.suList[i]);\r\n\t\t\t\t\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nlet dAtk = [3];\r\ndAtk[0] = [];\r\ndAtk[1] = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\ndAtk[2] = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return an object pathData := {\r\n\t\t\tprev[x][y] := (gp) gp of parent node in the path tree.\r\n\t\t\tdist[x][y] := (int) dist from startGP.\r\n\t\t\tlistPossibleDest := [] of reachable gp. NOTE: MIGHT HAVE OTHER UNITS\r\n\t\t\tattackable[x][y] := (bool) whether that gp can be attacked by the unit.\r\n\t\t\tlistAttackable := [] of attackable gp. NOTE: MIGHT BE BLOCKED BY OTHER UNITS\r\n\t\t}\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [this.maxGrid.x + 1];\r\n        let dist = [this.maxGrid.x + 1];\r\n\t\tlet attackable = [this.maxGrid.x + 1];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [this.maxGrid.y + 1];\r\n            dist[i] = [this.maxGrid.y + 1];\r\n            attackable[i] = [this.maxGrid.y + 1];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n                attackable[i][j] = false;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\t\tlet listAttackable = [];\r\n\t\t\r\n\t\tlet dAttacks = dAtk[unit.attackRange];\r\n\t\tthis.addAttackable(dAttacks, attackable, listAttackable, startGP.x, startGP.y)\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] = dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.addAttackable(dAttacks, attackable, listAttackable, xNew, yNew);\r\n\t\t\t\t\t\t\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        let pathData = { \r\n\t\t\tprev: prev, \r\n\t\t\tdist: dist, \r\n\t\t\tlistPossibleDest: listPossibleDest,\r\n\t\t\tattackable: attackable,\r\n\t\t\tlistAttackable: listAttackable\r\n\t\t};\r\n\t\treturn pathData;\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [dist];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\t// unused\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n\t\r\n\t// private methods\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\taddAttackable(dAttacks, attackable, listAttackable, xOrigin, yOrigin)\r\n\t{\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\t//alert(dgp.x +\",\"+ dgp.y +\",\"+ xOrigin +\",\"+  yOrigin)\r\n\t\t\tif (this.checkIfGpInMaxGrid(xOrigin + dgp.x, yOrigin + dgp.y) &&\r\n\t\t\t\t!attackable[xOrigin + dgp.x][yOrigin + dgp.y]\r\n\t\t\t) {\r\n\t\t\t\tattackable[xOrigin + dgp.x][yOrigin + dgp.y] = true;\r\n\t\t\t\tlistAttackable.push({\r\n\t\t\t\t\tx : xOrigin + dgp.x, y : yOrigin + dgp.y\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pTomato,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshiJinlai,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pBlueberry,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pCabbage,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 1, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 6, y: 5 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n\t{\r\n        gridPos: { x: 6, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage0 from \"/src/stages/stage0\";\r\nimport Stage1 from \"/src/stages/stage1\";\r\nimport Stage2 from \"/src/stages/stage2\";\r\nimport Stage3 from \"/src/stages/stage3\";\r\n\r\n/*\r\n\tWhen adding a new stage:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update the str @ getStageListStringForMapSelecter()\r\n\t\r\n\tthe good side of this stupid implementation:\r\n\t\tnow you can use any name for stage files and imported modules.\r\n*/\r\n\r\nexport default class StageList {\r\n\tconstructor () {\r\n\t\tthis.list = [100];\r\n\t\t\r\n\t\tthis.list[0] = Stage0;\r\n\t\tthis.list[1] = Stage1;\r\n\t\tthis.list[2] = Stage2;\r\n\t\tthis.list[3] = Stage3;\r\n\t}\r\n\t\r\n\tloadStage(idxStr, hGame) {\r\n\t\tlet stageClass = this.list[parseInt(idxStr)];\r\n\t\t//alert(stageClass + \", \" + \"Stage \"+idxStr);\r\n\t\thGame.stage = stageClass();\r\n\t}\r\n\t\r\n\tgetStageListStringForMapSelecter() {\r\n\t\tlet str = `\r\n\t\tMap:\r\n\t\t<select id=\"divSelecter_list\">\r\n\t\t\t<option value=\"0\" selected>Stage 00</option>\r\n\t\t\t<option value=\"1\">Stage 01</option>\r\n\t\t\t<option value=\"2\">Stage 02</option>\r\n\t\t\t<option value=\"3\">Stage 03</option>\r\n\t\t</select>\r\n\t\t<button id=\"divSelecter_confirm\">Confirm</button>\r\n\t\t<br />\r\n\t\t`;\r\n\t\treturn str;\r\n\t}\r\n\t\r\n}","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy) {\r\n        this.unitID = unitID;\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n        this.coordinate = hGame.gridPosToPos(gridPos);\r\n\r\n\t\tthis.imageID = \"img_kenshi\";\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\tthis.params = null;\r\n\t\t\r\n        this.pathData = null;\r\n    }\r\n\t\r\n\tinitAfterCreation() {\r\n\t\tthis.image = document.getElementById(this.imageID);\r\n\t\tthis.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\t\tthis.stamina = 0;\r\n\t\tthis.moveDist = this.moveDistMax;\r\n\t\t\r\n\t\tthis.resetControlState();\r\n\t\tthis.resetProposal();\r\n\t}\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n    }\r\n\r\n\t// super important stuff\r\n    eventRequirePathUpdate() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n\tcheckTerrain(gridPos) {\r\n\t\tif (this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        ) \treturn false;\r\n\r\n        return true;\r\n\t}\r\n\r\n\t// for MoveAssist.checkEligibility\r\n\tcheckStopable(gridPos, ignoreUnit) {\r\n\t\tlet unit = this.hGame.findUnitByGridPos(gridPos);\r\n\t\tif (unit !== null && \r\n\t\t\tunit !== ignoreUnit &&\r\n\t\t\tunit !== this\r\n\t\t) return false;\r\n\t\t\r\n\t\treturn this.checkTerrain(gridPos);\r\n\t}\r\n\r\n    checkPassable(gridPos, flagIgnoreEnemyUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (!flagIgnoreEnemyUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\treturn false;\r\n\r\n        return this.checkTerrain(gridPos);\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\t\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [path.length];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n    eventExecuteMovement() {\r\n\t\tthis.stamina = 1; // to make sure it becomes 0 after executeAction\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.executeAction();\r\n    }\r\n\t\r\n\teventUseMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t\tthis.executeAction();\r\n\t}\r\n\t\r\n\teventMovedByMoveAssist(gpNew) {\r\n\t\tthis.gridPos = gpNew;\r\n\t\tthis.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n\t}\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n\t\tif (this.attackRange === 0) return false;\r\n        if (Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n            Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\treturn true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        return (\r\n            this.isEnemy ===\r\n            (this.hGame.currentPhase === this.hGame.PHASE_ENEMY)\r\n        );\r\n    }\r\n\r\n    update(df) {}\r\n\t\r\n\tdrawThreat(ctx) {\r\n\t\tif (this.isSelected) {\r\n\t\t\tctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n\t\t\tthis.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tif (!this.hGame.pathFinder.isReachable(this.pathData, gp)) {\r\n\t\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tctx.fillStyle = \"rgba(238,238,255,0.5)\";\r\n\t\t\tthis.pathData.listPossibleDest.forEach(gp => {\r\n\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\tctx.fillRect(\r\n\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n    drawUnitBG(ctx) {\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * 0.45,\r\n            this.coordinate.y - this.imageSize.y * 0.45,\r\n            this.imageSize.x * 0.9,\r\n            this.imageSize.y * 0.9\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * 0.45,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * 0.45,\r\n                        this.imageSize.x * 0.9,\r\n                        this.imageSize.y * 0.9\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * 0.45,\r\n                this.destProposalCoord.y - this.imageSize.y * 0.45,\r\n                this.imageSize.x * 0.9,\r\n                this.imageSize.y * 0.9\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n        if (this.hasDestProposal) {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.destProposalCoord.x -\r\n                    (this.imageSize.x * this.drawScale) / 2,\r\n                this.destProposalCoord.y -\r\n                    (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        } else {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n                this.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        }\r\n    }\r\n}\r\n","import UnitBase from \"/src/unitBase\";\r\n\r\nexport default class ProtoPlayer extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}\r\n","import ProtoPlayer from \"/src/units/protoPlayer\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\tthis.staminaMax = 2;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PTomato extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_tomato\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.drawBack;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PBlueberry extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_blueberry\";\r\n\t\tthis.staminaMax = 2;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.swap;\r\n\t}\r\n}","import ProtoPlayer from \"/src/units/protoPlayer\";\r\nimport consts from \"/src/consts\";\r\n\r\nexport default class PCabbage extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_cabbage\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 0;\r\n\t\tthis.params.moveAssist = consts.moveAssist.reposition;\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\n\r\nexport default class ProtoEnemy extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\n\r\nexport default class EKenshi extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi2\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t}\r\n}","import consts from \"/src/consts\"\r\nimport UnitBase from \"/src/unitBase\";\r\nimport PKenshi from \"/src/units/pKenshi\";\r\nimport PKenshiJinlai from \"/src/units/pKenshiJinlai\";\r\nimport PTomato from \"/src/units/pTomato\";\r\nimport PBlueberry from \"/src/units/pBlueberry\";\r\nimport PCabbage from \"/src/units/pCabbage\";\r\nimport EKenshi from \"/src/units/eKenshi\";\r\n\r\n/*\r\n\tWhen adding a new unit:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js\r\n*/\r\nlet uType = consts.unitTypes;\r\n\r\nexport default class UnitCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [60];\r\n\t\t\r\n\t\tthis.list[uType.unitBase] = UnitBase;\r\n\t\tthis.list[uType.pKenshi] = PKenshi;\r\n\t\tthis.list[uType.pKenshiJinlai] = PKenshiJinlai;\r\n\t\tthis.list[uType.pTomato] = PTomato;\r\n\t\tthis.list[uType.pBlueberry] = PBlueberry;\r\n\t\tthis.list[uType.pCabbage] = PCabbage;\r\n\t\t\r\n\t\tthis.list[uType.eKenshi] = EKenshi;\r\n\t}\r\n\t\r\n\tcreateUnit(unitID, hGame, gridPos, isEnemy, typeID, params) {\r\n\t\t//alert(unitID+\",\"+gridPos.x+\",\"+gridPos.y+\",\"+isEnemy+\",\"+typeID);\r\n\t\tif (typeID === uType.unitBase) {\r\n\t\t\t// this should never happen after units are implemented\r\n\t\t\tlet unit = new this.list[typeID](\r\n\t\t\t\tunitID, hGame, gridPos, isEnemy\r\n\t\t\t);\r\n\t\t\treturn unit;\r\n\t\t}\r\n\t\t\r\n\t\tlet unit = new this.list[typeID](\r\n\t\t\t unitID, hGame, gridPos, isEnemy, params\r\n\t\t);\r\n\t\treturn unit;\r\n\t}\r\n}","/* \r\n\tcurrently only support 1-grid MA\r\n\tbut extending to 8 dirs shouldn't be too difficult\r\n*/\r\n\r\nexport default class MoveAssist {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\t\r\n\t\tthis.dUser = [10]; // [2:{x,y}, 4, 6, 8]\r\n\t\tthis.dTarget = [10];\r\n\t\t\r\n\t\tfor (let i = 0; i <= 9; i ++) {\r\n\t\t\tthis.dUser[i] = null;\r\n\t\t\tthis.dTarget[i] = null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// super() -> set values to dUser[2] & dTarget[2] -> call this\r\n\tcopyToFourDirs() {\r\n\t\tthis.dUser[8] = {\r\n\t\t\tx: this.dUser[2].x,\r\n\t\t\ty: -this.dUser[2].y\r\n\t\t}\r\n\t\tthis.dUser[6] = {\r\n\t\t\tx: this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dUser[4] = {\r\n\t\t\tx: -this.dUser[2].y,\r\n\t\t\ty: this.dUser[2].x\r\n\t\t}\r\n\t\tthis.dTarget[8] = {\r\n\t\t\tx: this.dTarget[2].x,\r\n\t\t\ty: -this.dTarget[2].y\r\n\t\t}\r\n\t\tthis.dTarget[6] = {\r\n\t\t\tx: this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t\tthis.dTarget[4] = {\r\n\t\t\tx: -this.dTarget[2].y,\r\n\t\t\ty: this.dTarget[2].x\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetDirection(dest, target) {\r\n\t\tlet dx = target.gridPos.x - dest.x;\r\n\t\tlet dy = target.gridPos.y - dest.y;\r\n\t\tif (dx > 1 || dx < -1 || dy > 1 || dy < -1) return null;\r\n\t\treturn 5 + dx - 3*dy;\r\n\t}\r\n\t\r\n\tcheckIfGpInMaxGrid(gp) {\r\n\t\tif (gp.x < 1 || gp.y < 1 || \r\n\t\t\tgp.x > this.hGame.maxGrid.x || \r\n\t\t\tgp.y > this.hGame.maxGrid.y\r\n\t\t) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tcheckEligibility(user, dest, target) {\r\n\t\t//alert(user.unitID + \" @ \" + dest.x + \",\" + dest.y + \" -> \" + target.unitID);\r\n\t\tlet dir = this.getDirection(dest, target);\r\n\t\tif (dir === null) return false;\r\n\t\tif (this.dUser[dir] === null) return false;\r\n\t\t//alert(\"pass 1\");\r\n\t\tlet gpNewUser = {\r\n\t\t\tx: dest.x + this.dUser[dir].x,\r\n\t\t\ty: dest.y + this.dUser[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewUser)) return false;\r\n\t\tif (!user.checkStopable(gpNewUser, target)) return false;\r\n\t\t//alert(\"pass 2\");\r\n\t\tlet gpNewTarget = {\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t};\r\n\t\tif (!this.checkIfGpInMaxGrid(gpNewTarget)) return false;\r\n\t\tif (!target.checkStopable(gpNewTarget, user)) return false;\r\n\t\t//alert(\"pass 3\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\texecute(user, target) {\r\n\t\t/* \tcorrent logic is: \r\n\t\t\tUB.eventUseMoveAssist ->\r\n\t\t\tUB.executeAction -> \r\n\t\t\tGame.eventActionExecuted ->\r\n\t\t\tGame.requirePathUpdate ->\r\n\t\t\tUB.eventRequirePathUpdate.\r\n\t\t\t\r\n\t\t\tTo avoid pathData problem, always call in the order of:\r\n\t\t\t(1) eventMovedByMoveAssist\r\n\t\t\t(2) eventUseMoveAssist.\r\n\t\t*/\r\n\t\tlet dir = this.getDirection(user.destProposalGP, target);\r\n\t\ttarget.eventMovedByMoveAssist({\r\n\t\t\tx: target.gridPos.x + this.dTarget[dir].x,\r\n\t\t\ty: target.gridPos.y + this.dTarget[dir].y\r\n\t\t});\r\n\t\tuser.eventUseMoveAssist({\r\n\t\t\tx: user.destProposalGP.x + this.dUser[dir].x,\r\n\t\t\ty: user.destProposalGP.y + this.dUser[dir].y\r\n\t\t});\r\n\t}\r\n\t\r\n}","import MoveAssist from \"/src/skills/moveAssist\";\r\nimport consts from \"/src/consts\"\r\n\r\nexport default class MoveAssistList {\r\n\tconstructor (hGame) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.list = [10];\r\n\t\t\r\n\t\tlet repo = new MoveAssist(hGame);\r\n\t\trepo.dUser[2] = \t{x: 0, y: 0};\r\n\t\trepo.dTarget[2] = \t{x: 0, y: -2};\r\n\t\trepo.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.reposition] = repo;\r\n\t\t\r\n\t\tlet drawBack = new MoveAssist(hGame);\r\n\t\tdrawBack.dUser[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tdrawBack.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.drawBack] = drawBack;\r\n\t\t\r\n\t\tlet swap = new MoveAssist(hGame);\r\n\t\tswap.dUser[2] = \t{x: 0, y: +1};\r\n\t\tswap.dTarget[2] = \t{x: 0, y: -1};\r\n\t\tswap.copyToFourDirs();\r\n\t\tthis.list[consts.moveAssist.swap] = swap;\r\n\r\n\t}\r\n\t\r\n\tcheckEligibility(maID, user, dest, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\treturn this.list[maID].checkEligibility(user, dest, target);\r\n\t}\r\n\t\r\n\texecute(maID, user, target) {\r\n\t\tif (this.list[maID] === null) return false;\r\n\t\t// assume checkEligibility is already passed\r\n\t\tthis.list[maID].execute(user, target);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}","//import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\nimport StageList from \"/src/stages/stageList\";\r\nimport UnitCreator from \"/src/units/unitCreator\";\r\nimport MoveAssistList from \"/src/skills/moveAssistList\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\t\t\r\n\t\tthis.stageList = new StageList();\r\n\t\tthis.unitCreator = new UnitCreator();\r\n\t\tthis.moveAssistList = new MoveAssistList(this);\r\n\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n\t\t\r\n\t\tthis.resetGameState();\r\n    }\r\n\t\r\n\tresetGameState() {\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\t\r\n\t}\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, typeID, params) {\r\n        this.unitID++;\r\n\t\t\r\n\t\t// WARNING: hasn't check the position yet!!!\r\n\t\t// need to implement check before using reinforcements!\r\n\t\t\r\n\t\tlet list = isEnemy ? this.enemyUnitList : this.playerUnitList;\r\n\t\tlet newUnit = this.unitCreator.createUnit(\r\n\t\t\tthis.unitID, this, gridPos, isEnemy, typeID, params\r\n\t\t);\r\n\t\tlist.push(newUnit);\r\n\t\tnewUnit.initAfterCreation();\r\n    }\r\n\r\n    start(stageIdxStr) {\r\n\t\t//alert(\"start\")\r\n\t\tthis.resetGameState();\r\n\t\t\r\n\t\tthis.stageList.loadStage(stageIdxStr, this);\r\n\t\t\t\t\r\n        this.stage.initStage(this);\r\n\t\t\r\n        this.playerPhase();\r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\trequirePathUpdate() {\r\n\t\tthis.playerUnitList.forEach(object => object.eventRequirePathUpdate());\r\n        this.enemyUnitList.forEach(object => object.eventRequirePathUpdate());\r\n\t}\r\n\r\n\tcountActiveUnits() {\r\n\t\tlet count = 0;\r\n\t\tlet list = null;\r\n\t\tif (this.currentPhase === this.PHASE_PLAYER) list = this.playerUnitList;\r\n\t\tif (this.currentPhase === this.PHASE_ENEMY) list = this.enemyUnitList;\r\n\t\tif (list === null) return 0;\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) count ++;\r\n\t\t});\r\n\t\treturn count;\r\n\t}\r\n\r\n    eventActionExecuted() {\r\n        if (this.countActiveUnits() === 0) {\r\n            this.endPhase();\r\n        }\r\n        \r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.effectList.push(new EffectStartPhase(this, true));\r\n        } else {\r\n            this.effectList.push(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else removeObjectFromList(unit, this.playerUnitList);\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n        else if (this.playerUnitList.length <= 0) {\r\n            this.gameResult = consts.gameResult.Lose;\r\n        }\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\tcheckMoveAssist(user, dest, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.checkEligibility(user.params.moveAssist, user, dest, target);\r\n\t}\r\n\r\n\t// called by abstractController, pass to this.moveAssistList\r\n\teventExecuteMoveAssist(user, target) {\r\n\t\tif (user.params === null || \r\n\t\t\ttypeof(user.params.moveAssist) === \"undefined\" ||\r\n\t\t\tuser.params.moveAssist === null\r\n\t\t) return false;\r\n\t\treturn this.moveAssistList.execute(user.params.moveAssist, user, target);\r\n\t}\r\n\r\n    update(df) {\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n        if (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n        this.playerInputHandler.update(df);\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n\t\t\r\n\t\tif (this.gameResult === consts.gameResult.Win) {\r\n\t\t\talert(\"You win!\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\t\tif (this.gameResult === consts.gameResult.Lose) {\r\n\t\t\talert(\"GAME OVER\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\t\r\n\t\tthis.playerUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n        if (this.gameResult !== consts.gameResult.None) {\r\n            //alert(\"oxoxoxox\");\r\n        }\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","export default class MapSelecter {\r\n\tconstructor (hGame) {\r\n\t\tlet divSelecter = document.getElementById(\"mapSelecter\");\r\n\t\tdivSelecter.innerHTML = hGame.stageList.getStageListStringForMapSelecter();\r\n\t\t\r\n\t\tlet button = document.getElementById(\"divSelecter_confirm\");\r\n\t\tbutton.addEventListener(\"click\", event => {\r\n\t\t\tvar e = document.getElementById(\"divSelecter_list\");\r\n\t\t\tvar result = e.options[e.selectedIndex].value;\r\n\t\t\t//alert(\"confirmed \" + result);\r\n\t\t\thGame.start(result);\r\n\t\t});\r\n\r\n\t}\r\n}","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport MapSelecter from \"/src/mapSelecter\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\nlet mapSelecter = new MapSelecter(game);\n\ngame.start(\"0\");\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n\trequestAnimationFrame(gameLoop);\n}\n\nfunction scriptCollapsibles() {\n\t// https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapsible\n\tlet collapsibles = document.getElementsByClassName(\"collapsible\");\n\tfor (let i = 0; i < collapsibles.length; i++) {\n\t\tcollapsibles[i].addEventListener(\"click\", function() {\n\t\t\tthis.classList.toggle(\"active\");\n\t\t\tlet content = this.nextElementSibling; // wtf this is handy\n\t\t\tif (content.style.display === \"block\") {\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t}\n\t\t});\n\t}\n}\n\nscriptCollapsibles() ;\n\nrequestAnimationFrame(gameLoop);\n"]}