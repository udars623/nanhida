{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/unitBase.js","src/grid.js","src/effects/effectStartPhase.js","src/enemyAI.js","src/pathFinder.js","src/stage.js","src/stages/stage01.js","src/button.js","src/game.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","gameResult","None","Win","Lose","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","unit","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","x","maxGrid","y","findSelfUnitByGridPos","isActive","eventSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","eventExecuteMovement","eventExecuteAttack","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","document","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","length","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","UnitBase","unitID","imageId","image","getElementById","coordinate","gridPosToPos","imageSize","gridSize","hp","attack","alive","stamina","staminaMax","moveDist","moveDistMax","attackRange","pathData","resetControlState","resetProposal","drawScale","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","pathFinder","floodFill","stage","getTerrain","Math","abs","isReachable","path","len","i","destGP","acceptPath","retrievePath","eventActionExecuted","executeAction","eventBattle","damage","eventUnitDeath","PHASE_ENEMY","ctx","fillStyle","isInPhase","fillRect","drawImage","Grid","xMax","yMax","lineHalfWidth","effectStartPhase","isEnemyPhase","frame","maxFrame","drawX","drawY","eventEffectEnd","dx","dy","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","target","suIdx","su","listPossibleDest","forEach","executeMoveAttack","minDist","bestGP","wideSearch","distTarget","dist","executeMove","res","findOppoUnitAndAttack","tryGetClose","executeWait","makeOneMove","MAX_DIST","PathFinder","eList","pList","hStage","visited","startGP","searchRange","flagIgnoreUnit","prev","j","queue","head","tail","xNew","yNew","gpNew","checkPassable","goalGP","T","Stage","terrainMap","unitList","imageCache","appearTurn","eventPlaceUnit","turn","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","drawScaleMax","min","Game","canvas","PHASE_NONE","grid","effectList","totalActiveStamina","framesBeforeChangePhase","enemyAI","buttonList","makeButtons","inputHandler","playerInputHandler","Stage01","initStage","playerPhase","endPhase","object","eventSenjoUpdated","eventNewTurn","endTurn","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","result","button","checkClick","eventClick","attacker","eventLoseHP","removeObjectFromList","effect","update","procChangePhase","draw","drawUnitBG","drawUnit","floor","list","splice","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","start","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","alert"],"mappings":"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","file":"src.8bb233fb.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2\r\n    }\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n    stateDeselect() {\r\n        this.currentUnit.eventDeselect();\r\n        this.currentUnit = null;\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (\r\n            gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n            //localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.currentUnit = unit;\r\n                unit.eventSelect();\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.currentUnit = unit;\r\n                    unit.eventSelect();\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (\r\n                    unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n                    localAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (\r\n                unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n                // execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (\r\n                    unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\r\n                    // target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (\r\n                gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                //this.currentTarget.eventStopBeingTargeted();\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                //this.currentTarget.eventStopBeingTargeted();\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        document.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            document.addEventListener(\"touchmove\", event => {\r\n                event.preventDefault();\r\n            });\r\n            document.addEventListener(\"touchend\", event => {\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy, imageId) {\r\n        this.unitID = unitID;\r\n\r\n        this.image = document.getElementById(imageId);\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n        this.coordinate = hGame.gridPosToPos(gridPos);\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\r\n        this.isEnemy = isEnemy;\r\n\r\n        this.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\r\n        this.stamina = 0;\r\n        this.staminaMax = 1;\r\n\r\n        this.moveDist = 0;\r\n        this.moveDistMax = 2;\r\n        this.attackRange = 1;\r\n\r\n        this.pathData = null;\r\n\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n\r\n        // update path stuffs\r\n        this.updatePathData();\r\n    }\r\n\r\n    eventSenjoUpdated() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n    checkPassable(gridPos, flagIgnoreUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (\r\n            !flagIgnoreUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\r\n            return false;\r\n\r\n        if (\r\n            this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        )\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [path.length];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n    eventExecuteMovement() {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.executeAction();\r\n    }\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n        if (\r\n            Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n                Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        return (\r\n            this.isEnemy ===\r\n            (this.hGame.currentPhase === this.hGame.PHASE_ENEMY)\r\n        );\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    drawUnitBG(ctx) {\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * 0.45,\r\n            this.coordinate.y - this.imageSize.y * 0.45,\r\n            this.imageSize.x * 0.9,\r\n            this.imageSize.y * 0.9\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * 0.45,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * 0.45,\r\n                        this.imageSize.x * 0.9,\r\n                        this.imageSize.y * 0.9\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * 0.45,\r\n                this.destProposalCoord.y - this.imageSize.y * 0.45,\r\n                this.imageSize.x * 0.9,\r\n                this.imageSize.y * 0.9\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n        if (this.hasDestProposal) {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.destProposalCoord.x -\r\n                    (this.imageSize.x * this.drawScale) / 2,\r\n                this.destProposalCoord.y -\r\n                    (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        } else {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n                this.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 18.75 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\nconst dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 5;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos + \", \" + dest.gridPos + \", \" + target.gridPos);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            //alert(\"123\");\r\n            this.absCon.clickGP(target.gridPos);\r\n            //alert(\"123\");\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            for (let i = 0; i < 4; i++) {\r\n                let target = this.hGame.findOppoUnitByGridPos(this.isEnemy, {\r\n                    x: gp.x + dx[i],\r\n                    y: gp.y + dy[i]\r\n                });\r\n                if (target !== null) {\r\n                    //alert(\"found target\");\r\n                    this.executeMoveAttack(su, gp, target);\r\n                    return true;\r\n                }\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let wideSearch = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    wideSearch.dist[target.gridPos.x][target.gridPos.y];\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n                }\r\n            });\r\n        });\r\n        //alert(minDist + \", \" + bestGP);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    makeOneMove() {\r\n        let i = 0,\r\n            len = this.suList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (this.suList[i].stamina > 0) {\r\n                let res = this.findOppoUnitAndAttack(i);\r\n                if (res === false) res = this.tryGetClose(i);\r\n                if (res === false) this.executeWait(this.suList[i]);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return a pathData = {prev, dist, listPossibleDest}.\r\n        prev[x][y] := gp of parent node in the path tree.\r\n        dist[x][y] := dist from startGP.\r\n        listPossibleDest := [] of reachable positions.\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [this.maxGrid.x + 1];\r\n        let dist = [this.maxGrid.x + 1];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [this.maxGrid.y + 1];\r\n            dist[i] = [this.maxGrid.y + 1];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] =\r\n                            dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        return { prev: prev, dist: dist, listPossibleDest: listPossibleDest };\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [dist];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n}\r\n","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(unit.gridPos, unit.isEnemy, unit.image);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(unit.gridPos, unit.isEnemy, unit.image);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n        image: \"img_kenshi\"\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n        image: \"img_kenshi\"\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n        image: \"img_kenshi\"\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n        image: \"img_kenshi\"\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n        image: \"img_kenshi2\"\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n        image: \"img_kenshi2\"\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n        image: \"img_kenshi2\"\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n        image: \"img_kenshi2\"\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n        image: \"img_kenshi2\"\r\n    }\r\n];\r\n\r\nexport default new Stage(maxGrid, terrainMap, unitList);\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport Stage01 from \"/src/stages/stage01\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\r\n        this.totalActiveStamina = 0;\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\r\n\t\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n    }\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, image) {\r\n        this.unitID++;\r\n        if (isEnemy)\r\n            this.enemyUnitList.push(\r\n                new UnitBase(this.unitID, this, gridPos, isEnemy, image)\r\n            );\r\n        else\r\n            this.playerUnitList.push(\r\n                new UnitBase(this.unitID, this, gridPos, isEnemy, image)\r\n            );\r\n    }\r\n\r\n    start() {\r\n        this.stage = Stage01;\r\n        this.stage.initStage(this);\r\n\r\n        this.playerPhase();\r\n    }\r\n\r\n    eventActionExecuted() {\r\n        this.totalActiveStamina--;\r\n        if (this.totalActiveStamina <= 0) {\r\n            this.endPhase();\r\n        }\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.playerUnitList.forEach(object => object.eventSenjoUpdated());\r\n        } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n            this.enemyUnitList.forEach(object => object.eventSenjoUpdated());\r\n        }\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.totalActiveStamina = 0;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n            this.totalActiveStamina += object.stamina;\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.totalActiveStamina = 0;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n            this.totalActiveStamina += object.stamina;\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.effectList.push(new EffectStartPhase(this, true));\r\n        } else {\r\n            this.effectList.push(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else removeObjectFromList(unit, this.playerUnitList);\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n        else if (this.playerUnitList.length <= 0) {\r\n            this.gameResult = consts.gameResult.Lose;\r\n        }\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n    update(df) {\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n        if (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n        this.playerInputHandler.update(df);\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\t\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n        if (this.gameResult !== consts.gameResult.None) {\r\n            //alert(\"oxoxoxox\");\r\n        }\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\ngame.start();\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n    if (game.gameResult === consts.gameResult.None) {\n        requestAnimationFrame(gameLoop);\n    } else if (game.gameResult === consts.gameResult.Win) alert(\"You win!\");\n    else if (game.gameResult === consts.gameResult.Lose) alert(\"GAME OVER\");\n}\n\nrequestAnimationFrame(gameLoop);\n"]}