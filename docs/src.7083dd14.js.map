{"version":3,"sources":["src/consts.js","src/abstractController.js","src/inputHandler.js","src/grid.js","src/effects/effectStartPhase.js","src/enemyAI.js","src/pathFinder.js","src/button.js","src/stage.js","src/stages/stage0.js","src/stages/stage1.js","src/stages/stage2.js","src/stages/stageList.js","src/unitBase.js","src/units/protoPlayer.js","src/units/pKenshi.js","src/units/protoEnemy.js","src/units/eKenshi.js","src/units/unitCreator.js","src/game.js","src/mapSelecter.js","src/index.js"],"names":["consts","terrainTypes","Nrm","Mnt","Wtr","Wll","buttons","TurnEnd","Wait","gameResult","None","Win","Lose","GameEnded","unitTypes","unitBase","pKenshi","pTomato","pBlueberry","pCabbage","eKenshi","CTRL_STATE_NONE","CTRL_STATE_SELECTED","CTRL_STATE_DEST_CHOSEN","CTRL_STATE_TARGET_CHOSEN","AbstractController","game","isEnemy","hGame","ctrlState","currentButtonID","currentUnit","currentDest","currentTarget","eventDeselect","eventStopBeingTargeted","gp","eventProposeDestination","unit","eventProposeTarget","eventBeTargeted","buttonID","stateDeselect","eventButtonTurnEnd","stateClearButton","eventExecuteWait","x","maxGrid","y","findSelfUnitByGridPos","isActive","eventSelect","findOppoUnitByGridPos","findUnitByGridPos","checkMoveDestination","stateConfirmDestination","checkAttackTarget","gridPos","localAlert","stateConfirmTarget","eventExecuteMovement","eventExecuteAttack","str","InputHandler","hCanvas","abstractController","clickPosQueue","isMobile","test","navigator","userAgent","isApple","touchEvent","addEventListener","event","mouseClick","getMousePosWithinCanvas","preventDefault","undefined","touches","rect","getBoundingClientRect","clientX","left","right","width","clientY","top","bottom","height","pos","isPhaseBlocked","currentPhase","PHASE_PLAYER","push","df","length","shift","gameWidth","gameHeight","clickGP","posToGridPos","clickButton","findButton","Grid","gridSize","xMax","yMax","lineHalfWidth","ctx","fillStyle","fillRect","effectStartPhase","isEnemyPhase","frame","maxFrame","image","document","getElementById","drawX","drawY","eventEffectEnd","drawImage","d1","d2","MAX_DIST","EnemyAI","suList","enemyUnitList","ouList","playerUnitList","absCon","blockFrameRemain","blockFramePerAttack","blockFramePerMove","blockFramePerWait","dest","target","su","dAttacks","attackRange","minDist","bestGP","forEach","dgp","checkIfGpInMaxGrid","pathData","dist","newGP","unitID","suIdx","flagDone","listAttackable","destGP","findBestAttackPosition","executeMoveAttack","listPossibleDest","wideSearch","pathFinder","floodFill","distTarget","executeMove","i","len","stamina","res","findOppoUnitAndAttack","tryGetClose","executeWait","makeOneMove","dx","dy","PathFinder","eList","pList","hStage","stage","visited","path","startGP","searchRange","flagIgnoreUnit","prev","attackable","j","queue","head","tail","addAttackable","xNew","yNew","gpNew","checkPassable","goalGP","moveDist","retrievePath","xOrigin","yOrigin","BUTTON_OFFSET_X","Button","imgString","id","drawGP","img","gridPosToPos","drawScale","drawScaleMax","Math","min","T","Stage","terrainMap","unitList","imageCache","appearTurn","eventPlaceUnit","typeID","params","turn","PHASE_ENEMY","getTerrain","U","createStage","StageList","list","Stage0","Stage1","Stage2","idxStr","stageClass","parseInt","UnitBase","coordinate","imageID","imageSize","staminaMax","moveDistMax","hp","attack","alive","resetControlState","resetProposal","isSelected","isTargeted","hasDestProposal","destProposalGP","destProposalCoord","pathToDestProposal","pathToDestProposalCoord","hasTargetProposal","targetProposal","updatePathData","abs","isReachable","acceptPath","eventActionExecuted","executeAction","eventBattle","damage","eventUnitDeath","isInPhase","ProtoPlayer","PKenshi","ProtoEnemy","EKenshi","uType","UnitCreator","Game","canvas","PHASE_NONE","grid","stageList","unitCreator","buttonList","makeButtons","resetGameState","effectList","totalActiveStamina","framesBeforeChangePhase","enemyAI","inputHandler","playerInputHandler","newUnit","createUnit","initAfterCreation","stageIdxStr","loadStage","initStage","playerPhase","requirePathUpdate","object","eventRequirePathUpdate","endPhase","eventNewTurn","endTurn","EffectStartPhase","enemyPhase","findUnitInListByGridPos","findEnemyUnitByGridPos","findPlayerUnitByGridPos","result","button","checkClick","eventClick","attacker","eventLoseHP","removeObjectFromList","effect","update","procChangePhase","alert","draw","drawThreat","drawUnitBG","drawUnit","floor","splice","MapSelecter","innerHTML","getStageListStringForMapSelecter","e","options","selectedIndex","value","start","getContext","GAME_WIDTH","GAME_HEIGHT","DRAW_WIDTH","DRAW_HEIGHT","bindPlayerInputHandler","mapSelecter","lastTime","gameLoop","timestamp","dt","clearRect","requestAnimationFrame","scriptCollapsibles","collapsibles","getElementsByClassName","classList","toggle","content","nextElementSibling","style","display"],"mappings":"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","file":"src.7083dd14.js","sourceRoot":"..","sourcesContent":["const consts = {\r\n    terrainTypes: {\r\n        Nrm: 0, // normal\r\n        Mnt: 1, // mountain\r\n        Wtr: 2, // water\r\n        Wll: 3 // wall\r\n    },\r\n    buttons: {\r\n        TurnEnd: 0,\r\n        Wait: 1\r\n    },\r\n    gameResult: {\r\n        None: 0,\r\n        Win: 1,\r\n        Lose: 2,\r\n\t\tGameEnded: 3\r\n    },\r\n\tunitTypes: {\r\n\t\tunitBase: 0,\r\n\t\t\r\n\t\tpKenshi: 1,\r\n\t\tpTomato: 2,\r\n\t\tpBlueberry: 3,\r\n\t\tpCabbage: 4,\r\n\t\t\r\n\t\teKenshi: 11\r\n\t}\r\n};\r\nexport default consts;\r\n","import consts from \"/src/consts\";\r\n\r\nconst CTRL_STATE_NONE = 0; // no player unit selected (can have enemy unit selected)\r\nconst CTRL_STATE_SELECTED = 1; // player unit selected\r\nconst CTRL_STATE_DEST_CHOSEN = 2; // move pos selected\r\nconst CTRL_STATE_TARGET_CHOSEN = 3; // attack target selected, one more click to execute\r\n//const CTRL_STATE_BUTTON = 4; // clicked some button.\r\n\r\n\r\n// this stuff will be used by both player and AI\r\n// AI use it by faking clicks. It'll be a longer seq of codes for AI scripts but it will make sure consistency.\r\n// under such framework, AI should never call unit's event methods.\r\n\r\n// The main reason we have this stuff is because I wrongly \r\n// made it possible for controllers to change unit states directly.\r\n// The more proper way to do this is that the controller tells the game\r\n// and then the game changes unit states.\r\n\r\n// but yeah now I think this stuff might be good for making replays consistent.\r\n\r\nexport default class AbstractController {\r\n    constructor(game, isEnemy) {\r\n        this.hGame = game;\r\n        this.isEnemy = isEnemy;\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n\t\tthis.currentButtonID = null;\r\n        this.currentUnit = null;\r\n        this.currentDest = null;\r\n        this.currentTarget = null;\r\n    }\r\n\r\n    stateDeselect() {\r\n        this.currentUnit.eventDeselect();\r\n        this.currentUnit = null;\r\n\t\tif (this.currentTarget !== null) {\r\n\t\t\tthis.currentTarget.eventStopBeingTargeted();\r\n\t\t\tthis.currentTarget = null;\r\n\t\t}\r\n        this.ctrlState = CTRL_STATE_NONE;\r\n    }\r\n\r\n    stateConfirmDestination(gp) {\r\n        this.currentDest = gp;\r\n        this.ctrlState = CTRL_STATE_DEST_CHOSEN;\r\n        this.currentUnit.eventProposeDestination(gp);\r\n    }\r\n\t\r\n\tstateClearButton() {\r\n\t\tthis.currentButtonID = null;\r\n\t}\r\n\r\n    stateConfirmTarget(unit) {\r\n        this.ctrlState = CTRL_STATE_TARGET_CHOSEN;\r\n        this.currentTarget = unit;\r\n        this.currentUnit.eventProposeTarget(unit);\r\n        unit.eventBeTargeted(); // this doesn't seem right here, should be in Game or at least another class\r\n    }\r\n\r\n    clickButton(buttonID) {\r\n        if (buttonID === consts.buttons.TurnEnd) {\r\n            if (this.ctrlState === CTRL_STATE_NONE \r\n\t\t\t\t|| this.ctrlState === CTRL_STATE_SELECTED) \r\n\t\t\t{\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\tif (this.currentUnit !== null) this.stateDeselect();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.TurnEnd) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.hGame.eventButtonTurnEnd();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        } else if (buttonID === consts.buttons.Wait) {\r\n            if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n\t\t\t\tif (this.currentButtonID === null) {\r\n\t\t\t\t\t// first time clicked\r\n\t\t\t\t\tthis.currentButtonID = buttonID;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else if (this.currentButtonID === consts.buttons.Wait) {\r\n\t\t\t\t\t// second time: execute\r\n\t\t\t\t\tthis.currentUnit.eventExecuteWait();\r\n\t\t\t\t\tthis.stateDeselect();\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// wrong button\r\n\t\t\t\t\tthis.stateClearButton();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateClearButton();\r\n\t\t\t}\r\n        }\r\n        return false;\r\n    }\r\n\r\n    clickGP(gp) {\r\n        if (\r\n            gp.x < 1 ||\r\n            gp.x > this.hGame.maxGrid.x ||\r\n            gp.y < 1 ||\r\n            gp.y > this.hGame.maxGrid.y\r\n        ) {\r\n            //localAlert(\"the selected position is out of bound\");\r\n            return false;\r\n        }\r\n\t\t\r\n\t\tthis.stateClearButton();\r\n\r\n        if (this.ctrlState === CTRL_STATE_NONE) {\r\n            // no player unit selected before, check which unit to select now\r\n            if (this.currentUnit !== null) {\r\n                this.currentUnit.eventDeselect();\r\n                this.currentUnit = null;\r\n            }\r\n            let unit = this.hGame.findSelfUnitByGridPos(this.isEnemy, gp);\r\n            if (unit !== null) {\r\n                if (unit.isActive()) this.ctrlState = CTRL_STATE_SELECTED;\r\n                this.currentUnit = unit;\r\n                unit.eventSelect();\r\n            } else {\r\n                unit = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n                if (unit !== null) {\r\n                    this.currentUnit = unit;\r\n                    unit.eventSelect();\r\n                }\r\n            }\r\n            if (unit === null) {\r\n                //localAlert(\"No unit found\");\r\n                this.ctrlState = CTRL_STATE_NONE;\r\n                return false;\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_SELECTED) {\r\n            // player unit selected, check where to move now\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (unit === null && this.currentUnit.checkMoveDestination(gp)) {\r\n                this.stateConfirmDestination(gp);\r\n                return true;\r\n            } else {\r\n                if (\r\n                    unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(\r\n                        unit,\r\n                        this.currentUnit.gridPos\r\n                    )\r\n                ) {\r\n                    localAlert(\r\n                        \"selected an eligible target during dest proposition\"\r\n                    );\r\n                    this.stateConfirmDestination(this.currentUnit.gridPos);\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else {\r\n                    localAlert(\"invalid destination\");\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_DEST_CHOSEN) {\r\n            // destination chosen, execute movement or find attack target.\r\n            let unit = this.hGame.findUnitByGridPos(gp);\r\n            if (\r\n                unit === null &&\r\n                gp.x === this.currentDest.x &&\r\n                gp.y === this.currentDest.y\r\n            ) {\r\n                // execute movement\r\n                this.currentUnit.eventExecuteMovement(gp);\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                if (\r\n                    unit !== null &&\r\n                    unit.isEnemy !== this.isEnemy &&\r\n                    this.currentUnit.checkAttackTarget(unit, this.currentDest)\r\n                ) {\r\n                    // target confirmed\r\n                    this.stateConfirmTarget(unit);\r\n                    return true;\r\n                } else {\r\n                    // invalid target\r\n                    this.stateDeselect();\r\n                    return false;\r\n                }\r\n            }\r\n        } else if (this.ctrlState === CTRL_STATE_TARGET_CHOSEN) {\r\n            if (\r\n                gp.x === this.currentTarget.gridPos.x &&\r\n                gp.y === this.currentTarget.gridPos.y\r\n            ) {\r\n                // execute attack\r\n                this.currentUnit.eventExecuteAttack(this.currentTarget);\r\n                //this.currentTarget.eventStopBeingTargeted();\r\n                this.stateDeselect();\r\n                return true;\r\n            } else {\r\n                // not the same gridpos as proposed target, forfeit\r\n                //this.currentTarget.eventStopBeingTargeted();\r\n                this.stateDeselect();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        localAlert(\r\n            \"this alert should not happen due to returns. x: \" +\r\n                gp.x +\r\n                \", y: \" +\r\n                gp.y +\r\n                \";  ctrl state: \" +\r\n                this.ctrlState\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction localAlert(str) {\r\n    // not sure if it really localise or is still global...\r\n    //alert(str);\r\n}\r\n","import AbstractController from \"./abstractController\";\r\n\r\nexport default class InputHandler {\r\n    constructor(game) {\r\n        this.hGame = game;\r\n        this.hCanvas = game.hCanvas;\r\n        this.abstractController = new AbstractController(game, false);\r\n        this.clickPosQueue = [];\r\n\r\n        // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\r\n        this.isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        this.isApple = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        let touchEvent = this.isMobile ? \"touchstart\" : \"click\";\r\n\r\n        this.hCanvas.addEventListener(touchEvent, event => {\r\n            this.mouseClick(this.getMousePosWithinCanvas(event));\r\n            if (this.isMobile) event.preventDefault();\r\n        });\r\n\r\n        if (this.isMobile) {\r\n            this.hCanvas.addEventListener(\"touchmove\", event => {\r\n                event.preventDefault();\r\n            });\r\n            this.hCanvas.addEventListener(\"touchend\", event => {\r\n                event.preventDefault();\r\n            });\r\n        }\r\n    }\r\n\r\n    getMousePosWithinCanvas(event) {\r\n        // https://stackoverflow.com/questions/9585487/cant-get-coordinates-of-touchevents-in-javascript-on-android-devices\r\n        // holy crap so if it's a TouchEvent then it can capture more than one touch and store them into an array\r\n        // ah yeah so that's probably how multi-touch works. make sense\r\n        if (event.touches !== undefined) event = event.touches[0];\r\n\r\n        // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\r\n        let rect = this.hCanvas.getBoundingClientRect();\r\n        return {\r\n            x:\r\n                ((event.clientX - rect.left) / (rect.right - rect.left)) *\r\n                this.hCanvas.width,\r\n            y:\r\n                ((event.clientY - rect.top) / (rect.bottom - rect.top)) *\r\n                this.hCanvas.height\r\n        };\r\n    }\r\n\r\n    mouseClick(pos) {\r\n        if (this.hGame.isPhaseBlocked) return;\r\n        if (this.hGame.currentPhase !== this.hGame.PHASE_PLAYER) return;\r\n        this.clickPosQueue.push(pos);\r\n    }\r\n\r\n    update(df) {\r\n        while (df > 0 && this.clickPosQueue.length > 0) {\r\n            df--;\r\n\t\t\tlet pos = this.clickPosQueue.shift();\r\n\t\t\tif (pos.x <= this.hGame.gameWidth && pos.y <= this.hGame.gameHeight) {\r\n\t\t\t\tthis.abstractController.clickGP(this.hGame.posToGridPos(pos));\r\n\t\t\t} else {\r\n\t\t\t\tthis.abstractController.clickButton(this.hGame.findButton(pos));\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n","export default class Grid {\r\n    constructor(gridSize, maxGrid) {\r\n        this.gridSize = gridSize;\r\n        this.xMax = maxGrid.x;\r\n        this.yMax = maxGrid.y;\r\n\r\n        this.lineHalfWidth = 1;\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.fillStyle = \"#03f\";\r\n        for (let x = 0; x <= this.xMax; x++) {\r\n            ctx.fillRect(\r\n                x * this.gridSize - this.lineHalfWidth,\r\n                0 - this.lineHalfWidth,\r\n                2 * this.lineHalfWidth,\r\n                this.yMax * this.gridSize + 2 * this.lineHalfWidth\r\n            );\r\n        }\r\n\r\n        for (let y = 0; y <= this.yMax; y++) {\r\n            ctx.fillRect(\r\n                0 - this.lineHalfWidth,\r\n                y * this.gridSize - this.lineHalfWidth,\r\n                this.xMax * this.gridSize + 2 * this.lineHalfWidth,\r\n                2 * this.lineHalfWidth\r\n            );\r\n        }\r\n    }\r\n}\r\n","export default class effectStartPhase {\r\n    constructor(hGame, isEnemyPhase) {\r\n        this.frame = 1;\r\n        this.maxFrame = 100;\r\n        this.isEnemyPhase = isEnemyPhase;\r\n        if (isEnemyPhase) this.image = document.getElementById(\"img_effect_EP\");\r\n        else this.image = document.getElementById(\"img_effect_PP\");\r\n        this.drawX = hGame.gameWidth + hGame.gridSize + 20;\r\n        this.drawY =\r\n            (hGame.gridSize * hGame.maxGrid.y) / 2 - this.image.height / 2;\r\n        this.hGame = hGame;\r\n    }\r\n\r\n    update(df) {\r\n        this.frame += df;\r\n        this.drawX -= 22 * df;\r\n        if (this.frame > this.maxFrame) this.hGame.eventEffectEnd(this);\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.frame <= this.maxFrame)\r\n            ctx.drawImage(this.image, this.drawX, this.drawY);\r\n    }\r\n}\r\n","import AbstractController from \"/src/abstractController\";\r\nimport consts from \"/src/consts\";\r\n\r\n// remember to check 1~maxGrid when using this stuff\r\nconst d1 = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\nconst d2 = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class EnemyAI {\r\n    constructor(hGame, isEnemy) {\r\n        this.hGame = hGame;\r\n\t\tthis.maxGrid = this.hGame.maxGrid;\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n        if (this.isEnemy) {\r\n            this.suList = hGame.enemyUnitList;\r\n            this.ouList = hGame.playerUnitList;\r\n        } else {\r\n            this.suList = hGame.playerUnitList;\r\n            this.ouList = hGame.enemyUnitList;\r\n        }\r\n\r\n        this.absCon = new AbstractController(this.hGame, isEnemy);\r\n\r\n        this.blockFrameRemain = 0;\r\n        this.blockFramePerAttack = 18;\r\n        this.blockFramePerMove = 18;\r\n        this.blockFramePerWait = 5;\r\n    }\r\n\r\n    executeWait(unit) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickButton(consts.buttons.Wait);\r\n\t\tthis.absCon.clickButton(consts.buttons.Wait);\r\n        this.blockFrameRemain = this.blockFramePerWait;\r\n    }\r\n\r\n    executeMove(unit, dest) {\r\n        this.absCon.clickGP(unit.gridPos);\r\n        this.absCon.clickGP(dest);\r\n        this.absCon.clickGP(dest);\r\n        this.blockFrameRemain = this.blockFramePerMove;\r\n    }\r\n\r\n    executeMoveAttack(unit, dest, target) {\r\n        //alert(unit.gridPos.x + \", \" + unit.gridPos.y + \" @ \" + dest.x + \", \" + dest.y + \" vs \"+ target.gridPos.x + \", \" + target.gridPos.y);\r\n        this.absCon.clickGP(unit.gridPos);\r\n        if (dest.x === unit.gridPos.x && dest.y === unit.gridPos.y) {\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        } else {\r\n            this.absCon.clickGP(dest);\r\n            this.absCon.clickGP(target.gridPos);\r\n            this.absCon.clickGP(target.gridPos);\r\n        }\r\n        this.blockFrameRemain = this.blockFramePerAttack;\r\n    }\r\n\t\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfindBestAttackPosition(su, target) {\r\n\t\tlet dAttacks = (su.attackRange === 1) ? d1 : d2;\r\n\t\t\r\n\t\tlet minDist = MAX_DIST;\r\n\t\tlet bestGP = null;\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\tif (this.checkIfGpInMaxGrid(target.gridPos.x + dgp.x, target.gridPos.y + dgp.y) &&\r\n\t\t\t\tsu.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y] < minDist\r\n\t\t\t) {\r\n\t\t\t\tlet newGP = {x : target.gridPos.x+dgp.x,  y : target.gridPos.y+dgp.y};\r\n\t\t\t\tlet unit = this.hGame.findUnitByGridPos(newGP);\r\n\t\t\t\tif (unit === null || unit.unitID === su.unitID) {\r\n\t\t\t\t\tminDist = su.pathData.dist[target.gridPos.x + dgp.x][target.gridPos.y + dgp.y];\r\n\t\t\t\t\tbestGP = newGP;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t//alert(\"/findBestAttackPosition \" + su.unitID + \",\" + target.unitID +\" @(\" + bestGP.x +\",\"+bestGP.y + \")\");\r\n\t\t\r\n\t\treturn bestGP;\r\n\t}\r\n\r\n    findOppoUnitAndAttack(suIdx) {\r\n        let su = this.suList[suIdx];\r\n\t\tlet flagDone = false;\r\n\t\t\r\n        su.pathData.listAttackable.forEach(gp => {\r\n\t\t\tif (flagDone) return;\r\n\t\t\tlet target = this.hGame.findOppoUnitByGridPos(this.isEnemy, gp);\r\n\t\t\tif (target !== null) {\r\n\t\t\t\t//alert(\"found target\");\r\n\t\t\t\tlet destGP = this.findBestAttackPosition(su, target);\r\n\t\t\t\tif (destGP !== null) {\r\n\t\t\t\t\tthis.executeMoveAttack(\r\n\t\t\t\t\t\tsu, \r\n\t\t\t\t\t\tdestGP, \r\n\t\t\t\t\t\ttarget\r\n\t\t\t\t\t);\r\n\t\t\t\t\tflagDone = true;\r\n\t\t\t\t\treturn; // you can't just return true here because it's inside a anonymous func\r\n\t\t\t\t\t\t// and you can't assume fOUAA ends here because it's inside a forEach loop!\r\n\t\t\t\t\t\t// the moral is: old for loop RULES\r\n\t\t\t\t}\r\n            }\r\n        });\r\n        return flagDone;\r\n    }\r\n\r\n    tryGetClose(suIdx) {\r\n        let su = this.suList[suIdx];\r\n        if (su.pathData.listPossibleDest.length === 0) return false;\r\n\r\n        let minDist = 10000;\r\n        let bestGP = null;\r\n        su.pathData.listPossibleDest.forEach(gp => {\r\n            if (this.hGame.findSelfUnitByGridPos(this.isEnemy, gp) !== null)\r\n                return;\r\n            //alert(\"gp: \" + gp.x + \",\" + gp.y);\r\n            let wideSearch = this.hGame.pathFinder.floodFill(su, gp, 300, true);\r\n            this.ouList.forEach(target => {\r\n                let distTarget =\r\n                    wideSearch.dist[target.gridPos.x][target.gridPos.y];\r\n                //alert(target.unitID + \",\" + distTarget);\r\n                if (distTarget < minDist) {\r\n                    minDist = distTarget;\r\n                    bestGP = gp;\r\n                }\r\n            });\r\n        });\r\n        //alert(minDist + \", \" + bestGP);\r\n        if (bestGP !== null) {\r\n            this.executeMove(su, bestGP);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    makeOneMove() {\r\n        let i = 0,\r\n            len = this.suList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (this.suList[i].stamina > 0) {\r\n                let res = this.findOppoUnitAndAttack(i);\r\n                if (res === false) res = this.tryGetClose(i);\r\n                if (res === false) this.executeWait(this.suList[i]);\r\n\t\t\t\t\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(df) {\r\n        this.blockFrameRemain -= df;\r\n        if (this.blockFrameRemain <= 0) {\r\n            this.makeOneMove();\r\n        }\r\n    }\r\n}\r\n","const dx = [0, -1, +1, 0];\r\nconst dy = [+1, 0, 0, -1];\r\nconst d1 = [{x:0, y:+1}, {x:-1, y:0}, {x:+1, y:0}, {x:0, y:-1} ];\r\nconst d2 = [{x:0, y:+2}, {x:-1, y:+1}, {x:+1, y:+1}, {x:-2, y:0},\r\n\t\t\t{x:+2, y:0}, {x:-1, y:-1}, {x:+1, y:-1}, {x:0, y:-2}];\r\nconst MAX_DIST = 100000;\r\n\r\nexport default class PathFinder {\r\n    constructor(hGame) {\r\n        this.hGame = hGame;\r\n        this.maxGrid = hGame.maxGrid;\r\n        this.eList = hGame.enemyUnitList;\r\n        this.pList = hGame.playerUnitList;\r\n        this.hStage = hGame.stage;\r\n\r\n        this.visited = null;\r\n        this.path = null;\r\n    }\r\n\r\n    /* \r\n        Main service of PathFinder.\r\n        return an object pathData := {\r\n\t\t\tprev[x][y] := (gp) gp of parent node in the path tree.\r\n\t\t\tdist[x][y] := (int) dist from startGP.\r\n\t\t\tlistPossibleDest := [] of reachable gp.\r\n\t\t\tattackable[x][y] := (bool) whether that gp can be attacked by the unit.\r\n\t\t\tlistAttackable := [] of attackable gp.\r\n\t\t}\r\n    */\r\n    floodFill(unit, startGP, searchRange, flagIgnoreUnit = false) {\r\n        let prev = [this.maxGrid.x + 1];\r\n        let dist = [this.maxGrid.x + 1];\r\n\t\tlet attackable = [this.maxGrid.x + 1];\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            prev[i] = [this.maxGrid.y + 1];\r\n            dist[i] = [this.maxGrid.y + 1];\r\n            attackable[i] = [this.maxGrid.y + 1];\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                dist[i][j] = MAX_DIST;\r\n                prev[i][j] = null;\r\n                attackable[i][j] = false;\r\n            }\r\n        }\r\n\r\n        let queue = [];\r\n        let head = 1,\r\n            tail = 0;\r\n        queue[head] = startGP;\r\n        prev[startGP.x][startGP.y] = startGP;\r\n        dist[startGP.x][startGP.y] = 0;\r\n        let listPossibleDest = [];\r\n        listPossibleDest.push(startGP);\r\n\t\tlet listAttackable = [];\r\n\t\t\r\n\t\tlet dAttacks = (unit.attackRange === 1) ? d1 : d2;\r\n\t\tthis.addAttackable(dAttacks, attackable, listAttackable, startGP.x, startGP.y)\r\n\r\n        while (head > tail) {\r\n            tail++;\r\n            if (dist[queue[tail].x][queue[tail].y] >= searchRange) continue;\r\n            for (let i = 0; i < 4; i++) {\r\n                let xNew = queue[tail].x + dx[i];\r\n                let yNew = queue[tail].y + dy[i];\r\n                if (\r\n                    xNew >= 1 &&\r\n                    xNew <= this.maxGrid.x &&\r\n                    yNew >= 1 &&\r\n                    yNew <= this.maxGrid.y &&\r\n                    dist[xNew][yNew] === MAX_DIST\r\n                ) {\r\n                    let gpNew = { x: xNew, y: yNew };\r\n                    if (unit.checkPassable(gpNew, flagIgnoreUnit)) {\r\n                        head++;\r\n                        queue[head] = gpNew;\r\n                        dist[xNew][yNew] = dist[queue[tail].x][queue[tail].y] + 1;\r\n                        prev[xNew][yNew] = queue[tail];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis.addAttackable(dAttacks, attackable, listAttackable, xNew, yNew);\r\n\t\t\t\t\t\t\r\n                        listPossibleDest.push(gpNew);\r\n                    }\r\n                    //alert(xNew + \",\" + yNew + \",\" + dist[xNew][yNew]);\r\n                }\r\n            }\r\n        }\r\n        let pathData = { \r\n\t\t\tprev: prev, \r\n\t\t\tdist: dist, \r\n\t\t\tlistPossibleDest: listPossibleDest,\r\n\t\t\tattackable: attackable,\r\n\t\t\tlistAttackable: listAttackable\r\n\t\t};\r\n\t\treturn pathData;\r\n    }\r\n\r\n    /*\r\n        Minor service. Tells from pathData whether goalGP is reachable.\r\n    */\r\n    isReachable(pathData, goalGP) {\r\n        return pathData.dist[goalGP.x][goalGP.y] !== MAX_DIST;\r\n    }\r\n\r\n    /*\r\n        Main service. Extract the path starting from startGP to goalGP\r\n        from pathData. \r\n        path[0] should always be startGP if done correctly.\r\n        goalGP is NOT included in the path.\r\n    */\r\n    retrievePath(pathData, startGP, goalGP) {\r\n        let prev = pathData.prev;\r\n        if (prev[goalGP.x][goalGP.y] !== null) {\r\n            let x = goalGP.x,\r\n                y = goalGP.y;\r\n            let dist = 0;\r\n            //alert(x + \",\" + y);\r\n            while (x !== startGP.x || y !== startGP.y) {\r\n                dist++;\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n                //alert(x + \",\" + y);\r\n            }\r\n            let path = [dist];\r\n            x = goalGP.x;\r\n            y = goalGP.y;\r\n            for (let i = 0; i < dist; i++) {\r\n                path[dist - i - 1] = prev[x][y];\r\n                let xNew = prev[x][y].x;\r\n                y = prev[x][y].y;\r\n                x = xNew;\r\n            }\r\n            return path;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\t// unused\r\n    findPath(unit, startGP, goalGP) {\r\n        let pathData = this.floodFill(unit, startGP, unit.moveDist);\r\n        //alert(startGP.x + \",\" + startGP.y + \",\" + goalGP.x + \",\" + goalGP.y);\r\n        return this.retrievePath(pathData, startGP, goalGP);\r\n    }\r\n\t\r\n\t// private methods\r\n\tcheckIfGpInMaxGrid(x, y) {\r\n\t\tif (x < 1 || y < 1 || x > this.maxGrid.x || y > this.maxGrid.y) return false;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\taddAttackable(dAttacks, attackable, listAttackable, xOrigin, yOrigin)\r\n\t{\r\n\t\tdAttacks.forEach(dgp => {\r\n\t\t\t//alert(dgp.x +\",\"+ dgp.y +\",\"+ xOrigin +\",\"+  yOrigin)\r\n\t\t\tif (this.checkIfGpInMaxGrid(xOrigin + dgp.x, yOrigin + dgp.y) &&\r\n\t\t\t\t!attackable[xOrigin + dgp.x][yOrigin + dgp.y]\r\n\t\t\t) {\r\n\t\t\t\tattackable[xOrigin + dgp.x][yOrigin + dgp.y] = true;\r\n\t\t\t\tlistAttackable.push({\r\n\t\t\t\t\tx : xOrigin + dgp.x, y : yOrigin + dgp.y\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","let BUTTON_OFFSET_X = 10;\r\n\r\nexport default class Button {\r\n\tconstructor (hGame, imgString, id, drawGP) {\r\n\t\tthis.hGame = hGame;\r\n\t\tthis.img = document.getElementById(imgString);\r\n\t\t\r\n\t\tthis.buttonID = id;\r\n\t\tthis.drawGP = drawGP;\r\n\t\t\r\n\t\tthis.pos = this.hGame.gridPosToPos(drawGP);\r\n\t\t//alert(this.pos.x + \", \" +this.pos.y);\r\n\t\t\r\n\t\tthis.drawScale = 1;\r\n\t\tthis.drawScaleMax = 1;\r\n\t\t\r\n\t}\r\n\t\r\n\tcheckClick(pos) {\r\n\t\tif (pos.x >= BUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y >= this.pos.y - this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.x <= BUTTON_OFFSET_X + this.pos.x + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t\t&& pos.y <= this.pos.y + this.hGame.gridSize * this.drawScale * 0.5\r\n\t\t)\treturn true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\teventClick() {\r\n\t\tthis.drawScale = 0.7;\r\n\t}\r\n\t\r\n\tupdate(df) {\r\n\t\tif (this.drawScale < this.drawScaleMax)\r\n\t\t\tthis.drawScale = Math.min(this.drawScale + df * 0.02, this.drawScaleMax);\r\n\t}\r\n\t\r\n\tdraw(ctx) {\r\n\t\tctx.drawImage(\r\n\t\t\tthis.img, \r\n\t\t\tBUTTON_OFFSET_X + this.pos.x - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.pos.y - this.hGame.gridSize * this.drawScale * 0.5, \r\n\t\t\tthis.hGame.gridSize*this.drawScale,\r\n\t\t\tthis.hGame.gridSize*this.drawScale\r\n\t\t);\r\n\t}\r\n}","import consts from \"/src/consts\";\r\nlet T = consts.terrainTypes;\r\n\r\nexport default class Stage {\r\n    constructor(maxGrid, terrainMap, unitList) {\r\n        this.maxGrid = maxGrid;\r\n        this.terrainMap = terrainMap; // NOTE: use it as [y-1][x-1] !! or getTerrain(x,y)\r\n        this.unitList = unitList;\r\n\r\n        this.imageCache = [];\r\n        this.hGame = null; // should not be initialised in constructor because it's called by stage scripts rather than game\r\n    }\r\n\r\n    initStage(hGame) {\r\n        this.hGame = hGame;\r\n        // push stuffs into game by calling events\r\n        this.unitList.forEach(unit => {\r\n            if (unit.appearTurn === 0)\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n\r\n        this.imageCache[T.Nrm] = document.getElementById(\"img_terrain_grass\");\r\n        this.imageCache[T.Mnt] = document.getElementById(\"img_terrain_yama\");\r\n        this.imageCache[T.Wtr] = document.getElementById(\"img_terrain_kawa\");\r\n    }\r\n\r\n    endTurn(hGame) {\r\n        this.unitList.forEach(unit => {\r\n            if (\r\n                unit.appearTurn === hGame.turn &&\r\n                unit.isEnemy === (hGame.currentPhase === hGame.PHASE_ENEMY)\r\n            )\r\n                hGame.eventPlaceUnit(\r\n\t\t\t\t\tunit.gridPos, unit.isEnemy, unit.typeID, unit.params\r\n\t\t\t\t);\r\n        });\r\n    }\r\n\r\n    getTerrain(x, y) {\r\n        return this.terrainMap[y - 1][x - 1];\r\n    }\r\n\r\n    update(df) {}\r\n\r\n    draw(ctx) {\r\n        for (let i = 1; i <= this.maxGrid.x; i++) {\r\n            for (let j = 1; j <= this.maxGrid.y; j++) {\r\n                let pos = this.hGame.gridPosToPos({ x: i, y: j });\r\n                //alert(i + \",\" + j + \", \" + [this.terrainMap[j][i]]);\r\n                ctx.drawImage(\r\n                    this.imageCache[this.getTerrain(i, j)],\r\n                    pos.x - this.hGame.gridSize / 2,\r\n                    pos.y - this.hGame.gridSize / 2,\r\n                    this.hGame.gridSize,\r\n                    this.hGame.gridSize\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Mnt],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt],\r\n    [T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Mnt],\r\n    [T.Wtr, T.Wtr, T.Wtr, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Wtr],\r\n    [T.Mnt, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Mnt, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Wtr],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Wtr, T.Nrm, T.Mnt],\r\n    [T.Nrm, T.Wtr, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 1, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 4 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage from \"/src/stage\";\r\nimport consts from \"/src/consts\";\r\n\r\nlet T = consts.terrainTypes;\r\nlet U = consts.unitTypes;\r\n\r\nlet maxGrid = { x: 6, y: 8 };\r\nlet terrainMap = [\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Mnt, T.Nrm, T.Nrm, T.Mnt, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Mnt, T.Mnt, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm],\r\n    [T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm, T.Nrm]\r\n];\r\n\r\nlet unitList = [\r\n    {\r\n        gridPos: { x: 2, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 7 },\r\n        appearTurn: 0,\r\n        isEnemy: false,\r\n\t\ttypeID: U.pKenshi,\r\n\t\tparams: {}\r\n    },\r\n\r\n    {\r\n        gridPos: { x: 3, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 3, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 2, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 2 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 4, y: 3 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    },\r\n    {\r\n        gridPos: { x: 5, y: 1 },\r\n        appearTurn: 0,\r\n        isEnemy: true,\r\n\t\ttypeID: U.eKenshi,\r\n\t\tparams: {}\r\n    }\r\n];\r\n\r\nexport default function createStage()\t{\r\n\treturn new Stage(maxGrid, terrainMap, unitList);\r\n}\r\n","import Stage0 from \"/src/stages/stage0\";\r\nimport Stage1 from \"/src/stages/stage1\";\r\nimport Stage2 from \"/src/stages/stage2\";\r\n\r\n/*\r\n\tWhen adding a new stage:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update the str @ getStageListStringForMapSelecter()\r\n\t\r\n\tthe good side of this stupid implementation:\r\n\t\tnow you can use any name for stage files and imported modules.\r\n*/\r\n\r\nexport default class StageList {\r\n\tconstructor () {\r\n\t\tthis.list = [100];\r\n\t\t\r\n\t\tthis.list[0] = Stage0;\r\n\t\tthis.list[1] = Stage1;\r\n\t\tthis.list[2] = Stage2;\r\n\t}\r\n\t\r\n\tloadStage(idxStr, hGame) {\r\n\t\tlet stageClass = this.list[parseInt(idxStr)];\r\n\t\t//alert(stageClass + \", \" + \"Stage \"+idxStr);\r\n\t\thGame.stage = stageClass();\r\n\t}\r\n\t\r\n\tgetStageListStringForMapSelecter() {\r\n\t\tlet str = `\r\n\t\tMap:\r\n\t\t<select id=\"divSelecter_list\">\r\n\t\t\t<option value=\"0\" selected>Stage 00</option>\r\n\t\t\t<option value=\"1\">Stage 01</option>\r\n\t\t\t<option value=\"2\">Stage 02</option>\r\n\t\t</select>\r\n\t\t<button id=\"divSelecter_confirm\">Confirm</button>\r\n\t\t`;\r\n\t\treturn str;\r\n\t}\r\n\t\r\n}","import consts from \"/src/consts\";\r\n\r\nlet terrainTypes = consts.terrainTypes;\r\n\r\nexport default class UnitBase {\r\n    constructor(unitID, hGame, gridPos, isEnemy) {\r\n        this.unitID = unitID;\r\n        this.hGame = hGame;\r\n        this.gridPos = gridPos;\r\n        this.coordinate = hGame.gridPosToPos(gridPos);\r\n\r\n\t\tthis.imageID = \"img_kenshi\";\r\n        this.imageSize = {\r\n            x: hGame.gridSize,\r\n            y: hGame.gridSize\r\n        };\r\n\t\t\r\n        this.isEnemy = isEnemy;\r\n\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\r\n        this.pathData = null;\r\n    }\r\n\t\r\n\tinitAfterCreation() {\r\n\t\tthis.image = document.getElementById(this.imageID);\r\n\t\tthis.hp = 1;\r\n        this.attack = 255;\r\n        this.alive = true;\r\n\t\tthis.stamina = 0;\r\n\t\tthis.moveDist = this.moveDistMax;\r\n\t\t\r\n\t\tthis.resetControlState();\r\n\t\tthis.resetProposal();\r\n\t}\r\n\r\n    resetControlState() {\r\n        this.drawScale = 1;\r\n        this.isSelected = false;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    resetProposal() {\r\n        this.hasDestProposal = false;\r\n        this.destProposalGP = null;\r\n        this.destProposalCoord = null;\r\n        this.pathToDestProposal = null;\r\n        this.pathToDestProposalCoord = null;\r\n        this.hasTargetProposal = false;\r\n        this.targetProposal = null;\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    isActive() {\r\n        if (this.stamina <= 0) return false;\r\n        return true;\r\n    }\r\n\r\n    eventNewTurn() {\r\n        // reset stamina\r\n        this.stamina = this.staminaMax;\r\n\r\n        // reset buffs & debuffs?\r\n        this.moveDist = this.moveDistMax;\r\n    }\r\n\r\n\t// super important stuff\r\n    eventRequirePathUpdate() {\r\n        this.updatePathData();\r\n    }\r\n\r\n    updatePathData() {\r\n        this.pathData = this.hGame.pathFinder.floodFill(\r\n            this,\r\n            this.gridPos,\r\n            this.moveDist\r\n        );\r\n    }\r\n\r\n    eventSelect() {\r\n        this.isSelected = true;\r\n        this.drawScale = 1.15;\r\n    }\r\n\r\n    eventDeselect() {\r\n        this.resetControlState();\r\n        this.resetProposal();\r\n    }\r\n\r\n    checkPassable(gridPos, flagIgnoreUnit = false) {\r\n        // movement types vs terrains, pass skill vs enemy etc.\r\n        if (\r\n            !flagIgnoreUnit &&\r\n            this.hGame.findOppoUnitByGridPos(this.isEnemy, gridPos) !== null\r\n        )\r\n            return false;\r\n\r\n        if (\r\n            this.hGame.stage.getTerrain(gridPos.x, gridPos.y) !==\r\n            terrainTypes.Nrm\r\n        )\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    checkMoveDestination(gridPos) {\r\n        if (\r\n            Math.abs(gridPos.x - this.gridPos.x) +\r\n                Math.abs(gridPos.y - this.gridPos.y) >\r\n            this.moveDistMax\r\n        )\r\n            return false;\r\n\r\n        if (this.hGame.pathFinder.isReachable(this.pathData, gridPos)) {\r\n            //this.acceptPath(path);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    acceptPath(path) {\r\n        this.pathToDestProposal = path;\r\n        this.pathToDestProposalCoord = [path.length];\r\n        let len = path.length;\r\n        for (let i = 0; i < len; i++) {\r\n            //alert(i + \",\" + path[i].x + \",\" + path[i].y);\r\n            this.pathToDestProposalCoord[i] = this.hGame.gridPosToPos(path[i]);\r\n        }\r\n    }\r\n\r\n    eventProposeDestination(destGP) {\r\n        this.hasDestProposal = true;\r\n        this.destProposalGP = destGP;\r\n        this.destProposalCoord = this.hGame.gridPosToPos(destGP);\r\n        this.acceptPath(\r\n            this.hGame.pathFinder.retrievePath(\r\n                this.pathData,\r\n                this.gridPos,\r\n                destGP\r\n            )\r\n        );\r\n    }\r\n\r\n    executeAction() {\r\n        this.stamina--;\r\n        this.resetProposal();\r\n        this.hGame.eventActionExecuted();\r\n    }\r\n\r\n    eventExecuteMovement() {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.executeAction();\r\n    }\r\n\r\n    checkAttackTarget(unit, destProposalGP) {\r\n        if (\r\n            Math.abs(unit.gridPos.x - destProposalGP.x) +\r\n                Math.abs(unit.gridPos.y - destProposalGP.y) ===\r\n            this.attackRange\r\n        )\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    eventProposeTarget(unit) {\r\n        this.targetProposal = unit;\r\n        this.hasTargetProposal = true;\r\n    }\r\n\r\n    eventBeTargeted() {\r\n        this.isTargeted = true;\r\n    }\r\n\r\n    eventStopBeingTargeted() {\r\n        this.isTargeted = false;\r\n    }\r\n\r\n    eventExecuteAttack(unit) {\r\n        this.gridPos = this.destProposalGP;\r\n        this.coordinate = this.hGame.gridPosToPos(this.gridPos);\r\n        this.hGame.eventBattle(this, unit);\r\n        this.executeAction();\r\n    }\r\n\r\n    eventExecuteWait() {\r\n        this.executeAction();\r\n    }\r\n\r\n    eventLoseHP(damage) {\r\n        this.hp -= damage;\r\n        if (this.hp <= 0) {\r\n            this.alive = false;\r\n            this.hGame.eventUnitDeath(this);\r\n        }\r\n    }\r\n\r\n    isInPhase() {\r\n        return (\r\n            this.isEnemy ===\r\n            (this.hGame.currentPhase === this.hGame.PHASE_ENEMY)\r\n        );\r\n    }\r\n\r\n    update(df) {}\r\n\t\r\n\tdrawThreat(ctx) {\r\n\t\tif (this.isSelected) {\r\n\t\t\tctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n\t\t\tthis.pathData.listAttackable.forEach(gp => {\r\n\t\t\t\tif (!this.hGame.pathFinder.isReachable(this.pathData, gp)) {\r\n\t\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\t\tctx.fillRect(\r\n\t\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tctx.fillStyle = \"rgba(238,238,255,0.5)\";\r\n\t\t\tthis.pathData.listPossibleDest.forEach(gp => {\r\n\t\t\t\tlet pos = this.hGame.gridPosToPos(gp);\r\n\t\t\t\tctx.fillRect(\r\n\t\t\t\t\tpos.x - this.imageSize.x * 0.45,\r\n\t\t\t\t\tpos.y - this.imageSize.y * 0.45,\r\n\t\t\t\t\tthis.imageSize.x * 0.9,\r\n\t\t\t\t\tthis.imageSize.y * 0.9\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n    drawUnitBG(ctx) {\r\n        if (this.isSelected || this.isTargeted) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,85,85,0.9)\";\r\n            else ctx.fillStyle = \"rgba(136,136,238,0.9)\";\r\n        } else if (this.isActive() || !this.isInPhase()) {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,140,140,0.8)\";\r\n            else ctx.fillStyle = \"rgba(170,170,255,0.8)\";\r\n        } else {\r\n            if (this.isEnemy) ctx.fillStyle = \"rgba(255,238,238,0.8)\";\r\n            else ctx.fillStyle = \"rgba(238,238,255,0.8)\";\r\n        }\r\n        ctx.fillRect(\r\n            this.coordinate.x - this.imageSize.x * 0.45,\r\n            this.coordinate.y - this.imageSize.y * 0.45,\r\n            this.imageSize.x * 0.9,\r\n            this.imageSize.y * 0.9\r\n        );\r\n\r\n        if (this.hasDestProposal) {\r\n            if (this.pathToDestProposal !== null) {\r\n                if (this.isEnemy) ctx.fillStyle = \"rgba(255,170,170,0.7)\";\r\n                else ctx.fillStyle = \"rgba(170,204,255,0.7)\";\r\n                let len = this.pathToDestProposal.length;\r\n                for (let i = 1; i < len; i++) {\r\n                    ctx.fillRect(\r\n                        this.pathToDestProposalCoord[i].x -\r\n                            this.imageSize.x * 0.45,\r\n                        this.pathToDestProposalCoord[i].y -\r\n                            this.imageSize.y * 0.45,\r\n                        this.imageSize.x * 0.9,\r\n                        this.imageSize.y * 0.9\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (this.isEnemy) ctx.fillStyle = \"#e88\";\r\n            else ctx.fillStyle = \"#88e\";\r\n            ctx.fillRect(\r\n                this.destProposalCoord.x - this.imageSize.x * 0.45,\r\n                this.destProposalCoord.y - this.imageSize.y * 0.45,\r\n                this.imageSize.x * 0.9,\r\n                this.imageSize.y * 0.9\r\n            );\r\n        }\r\n    }\r\n\r\n    drawUnit(ctx) {\r\n        if (this.hasDestProposal) {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.destProposalCoord.x -\r\n                    (this.imageSize.x * this.drawScale) / 2,\r\n                this.destProposalCoord.y -\r\n                    (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        } else {\r\n            ctx.drawImage(\r\n                this.image,\r\n                this.coordinate.x - (this.imageSize.x * this.drawScale) / 2,\r\n                this.coordinate.y - (this.imageSize.y * this.drawScale) / 2,\r\n                this.imageSize.x * this.drawScale,\r\n                this.imageSize.y * this.drawScale\r\n            );\r\n        }\r\n    }\r\n}\r\n","import UnitBase from \"/src/unitBase\";\r\n\r\nexport default class ProtoPlayer extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}\r\n","import ProtoPlayer from \"/src/units/protoPlayer\";\r\n\r\nexport default class PKenshi extends ProtoPlayer {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t}\r\n}","import UnitBase from \"/src/unitBase\";\r\n\r\nexport default class ProtoEnemy extends UnitBase {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy);\r\n\t\tthis.params = params;\r\n\t}\r\n}","import ProtoEnemy from \"/src/units/protoEnemy\";\r\n\r\nexport default class EKenshi extends ProtoEnemy {\r\n\tconstructor(unitID, hGame, gridPos, isEnemy, params) {\r\n\t\tsuper(unitID, hGame, gridPos, isEnemy, params);\r\n\t\tthis.imageID = \"img_kenshi2\";\r\n\t\tthis.staminaMax = 1;\r\n\t\tthis.moveDistMax = 2;\r\n\t\tthis.attackRange = 1;\r\n\t\t\r\n\t}\r\n}","import consts from \"/src/consts\"\r\nimport UnitBase from \"/src/unitBase\";\r\nimport PKenshi from \"/src/units/pKenshi\";\r\nimport EKenshi from \"/src/units/eKenshi\";\r\n\r\n/*\r\n\tWhen adding a new unit:\r\n\t(1) import it above\r\n\t(2) add it into this.list @ constructor. Just use [x], forget about push\r\n\t(3) update consts.js\r\n*/\r\nlet uType = consts.unitTypes;\r\n\r\nexport default class UnitCreator {\r\n\tconstructor () {\r\n\t\tthis.list = [60];\r\n\t\t\r\n\t\tthis.list[uType.unitBase] = UnitBase;\r\n\t\tthis.list[uType.pKenshi] = PKenshi;\r\n\t\tthis.list[uType.eKenshi] = EKenshi;\r\n\t}\r\n\t\r\n\tcreateUnit(unitID, hGame, gridPos, isEnemy, typeID, params) {\r\n\t\t//alert(unitID+\",\"+gridPos.x+\",\"+gridPos.y+\",\"+isEnemy+\",\"+typeID);\r\n\t\tif (typeID === uType.unitBase) {\r\n\t\t\t// this should never happen after units are implemented\r\n\t\t\tlet unit = new this.list[typeID](\r\n\t\t\t\tunitID, hGame, gridPos, isEnemy\r\n\t\t\t);\r\n\t\t\treturn unit;\r\n\t\t}\r\n\t\t\r\n\t\tlet unit = new this.list[typeID](\r\n\t\t\t unitID, hGame, gridPos, isEnemy, params\r\n\t\t);\r\n\t\treturn unit;\r\n\t}\r\n}","//import UnitBase from \"/src/unitBase\";\r\nimport Grid from \"/src/grid\";\r\nimport EffectStartPhase from \"/src/effects/effectStartPhase\";\r\nimport EnemyAI from \"/src/enemyAI\";\r\nimport PathFinder from \"/src/pathFinder\";\r\nimport consts from \"/src/consts\";\r\nimport Button from \"/src/button\";\r\nimport StageList from \"/src/stages/stageList\";\r\nimport UnitCreator from \"/src/units/unitCreator\";\r\n\r\nexport default class Game {\r\n    constructor(gameWidth, gameHeight, canvas) {\r\n        this.PHASE_NONE = 0;\r\n        this.PHASE_PLAYER = 1;\r\n        this.PHASE_ENEMY = 2;\r\n\r\n        this.gameWidth = gameWidth;\r\n        this.gameHeight = gameHeight;\r\n        this.hCanvas = canvas;\r\n\r\n        this.maxGrid = { x: 6, y: 8 };\r\n\r\n        this.gridSize = gameWidth / this.maxGrid.x;\r\n        this.grid = new Grid(this.gridSize, this.maxGrid);\r\n\t\t\r\n\t\tthis.stageList = new StageList();\r\n\t\tthis.unitCreator = new UnitCreator();\r\n\t\r\n\t\tthis.buttonList = [];\r\n\t\tthis.makeButtons();\r\n\t\t\r\n\t\tthis.resetGameState()\r\n    }\r\n\t\r\n\tresetGameState() {\r\n        this.playerUnitList = [];\r\n        this.enemyUnitList = [];\r\n        this.unitID = 0;\r\n\r\n        this.effectList = [];\r\n\r\n        this.totalActiveStamina = 0;\r\n        this.currentPhase = this.PHASE_NONE;\r\n        this.isPhaseBlocked = false;\r\n        this.framesBeforeChangePhase = 0;\r\n\r\n        this.turn = 0;\r\n        this.stage = null;\r\n        this.enemyAI = new EnemyAI(this, true);\r\n        this.pathFinder = new PathFinder(this);\r\n\r\n        this.gameResult = consts.gameResult.None;\t\r\n\t}\r\n\t\r\n\tmakeButtons() {\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_wait\", consts.buttons.Wait, {x:7, y:1}\r\n\t\t));\r\n\t\tthis.buttonList.push(new Button(\r\n\t\t\tthis, \"img_button_turn_end\", consts.buttons.TurnEnd, {x:7, y:2}\r\n\t\t));\r\n\t}\r\n\r\n    bindPlayerInputHandler(inputHandler) {\r\n        this.playerInputHandler = inputHandler;\r\n    }\r\n\r\n    eventPlaceUnit(gridPos, isEnemy, typeID, params) {\r\n        this.unitID++;\r\n\t\t\r\n\t\t// WARNING: hasn't check the position yet!!!\r\n\t\t// need to implement check before using reinforcements!\r\n\t\t\r\n\t\tlet list = isEnemy ? this.enemyUnitList : this.playerUnitList;\r\n\t\tlet newUnit = this.unitCreator.createUnit(\r\n\t\t\tthis.unitID, this, gridPos, isEnemy, typeID, params\r\n\t\t);\r\n\t\tlist.push(newUnit);\r\n\t\tnewUnit.initAfterCreation();\r\n    }\r\n\r\n    start(stageIdxStr) {\r\n\t\t//alert(\"start\")\r\n\t\tthis.resetGameState();\r\n\t\t\r\n\t\tthis.stageList.loadStage(stageIdxStr, this);\r\n\t\t\t\t\r\n        this.stage.initStage(this);\r\n\t\t\r\n        this.playerPhase();\r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\trequirePathUpdate() {\r\n\t\tthis.playerUnitList.forEach(object => object.eventRequirePathUpdate());\r\n        this.enemyUnitList.forEach(object => object.eventRequirePathUpdate());\r\n\t}\r\n\r\n    eventActionExecuted() {\r\n        this.totalActiveStamina--;\r\n        if (this.totalActiveStamina <= 0) {\r\n            this.endPhase();\r\n        }\r\n        \r\n\t\tthis.requirePathUpdate();\r\n    }\r\n\r\n\teventButtonTurnEnd() {\r\n\t\tlet list = (this.currentPhase === this.PHASE_PLAYER) ? \r\n\t\t\tthis.playerUnitList : this.enemyUnitList;\r\n\t\t\r\n\t\tlist.forEach(unit => {\r\n\t\t\tif (unit.isActive()) unit.eventExecuteWait();\r\n\t\t});\r\n\r\n\t}\r\n\r\n    playerPhase() {\r\n        //alert(\"Player Phase\");\r\n        this.turn++;\r\n        this.currentPhase = this.PHASE_PLAYER;\r\n        this.totalActiveStamina = 0;\r\n        this.playerUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n            this.totalActiveStamina += object.stamina;\r\n        });\r\n    }\r\n\r\n    enemyPhase() {\r\n        //alert(\"Enemy Phase\");\r\n        this.currentPhase = this.PHASE_ENEMY;\r\n        this.totalActiveStamina = 0;\r\n        this.enemyUnitList.forEach(object => {\r\n            object.eventNewTurn();\r\n            this.totalActiveStamina += object.stamina;\r\n        });\r\n        //this.endPhase();\r\n    }\r\n\r\n    endPhase() {\r\n        this.stage.endTurn(this);\r\n        this.framesBeforeChangePhase = 80;\r\n        this.isPhaseBlocked = true;\r\n        if (this.currentPhase === this.PHASE_PLAYER) {\r\n            this.effectList.push(new EffectStartPhase(this, true));\r\n        } else {\r\n            this.effectList.push(new EffectStartPhase(this, false));\r\n        }\r\n    }\r\n\r\n    procChangePhase(df) {\r\n        this.framesBeforeChangePhase -= df;\r\n        if (this.framesBeforeChangePhase <= 0) {\r\n            this.isPhaseBlocked = false;\r\n            if (this.currentPhase === this.PHASE_PLAYER) {\r\n                this.enemyPhase();\r\n            } else if (this.currentPhase === this.PHASE_ENEMY) {\r\n                this.playerPhase();\r\n            }\r\n        }\r\n    }\r\n\r\n    findUnitInListByGridPos(unitList, gridPos) {\r\n        let len = unitList.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (\r\n                unitList[i].gridPos.x === gridPos.x &&\r\n                unitList[i].gridPos.y === gridPos.y\r\n            ) {\r\n                return unitList[i]; // only one unit should be triggered\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    findPlayerUnitByGridPos(gridPos) {\r\n        //alert(gridPos.x + \", \" + gridPos.y);\r\n        return this.findUnitInListByGridPos(this.playerUnitList, gridPos);\r\n    }\r\n\r\n    findEnemyUnitByGridPos(gridPos) {\r\n        return this.findUnitInListByGridPos(this.enemyUnitList, gridPos);\r\n    }\r\n\r\n    findSelfUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findEnemyUnitByGridPos(gridPos);\r\n        else return this.findPlayerUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findOppoUnitByGridPos(isEnemy, gridPos) {\r\n        if (isEnemy) return this.findPlayerUnitByGridPos(gridPos);\r\n        else return this.findEnemyUnitByGridPos(gridPos);\r\n    }\r\n\r\n    findUnitByGridPos(gridPos) {\r\n        let unit = this.findPlayerUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        unit = this.findEnemyUnitByGridPos(gridPos);\r\n        if (unit !== null) return unit;\r\n        return null;\r\n    }\r\n\r\n\tfindButton(pos) {\r\n\t\tlet result = null;\r\n\t\tthis.buttonList.forEach(button => {\r\n\t\t\tif (button.checkClick(pos)) {\r\n\t\t\t\tresult = button.buttonID;\r\n\t\t\t\tbutton.eventClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n    mouseClick(pos) {\r\n        // do nothing\r\n    }\r\n\r\n    eventBattle(attacker, target) {\r\n        target.eventLoseHP(attacker.attack);\r\n    }\r\n\r\n    eventUnitDeath(unit) {\r\n        if (unit.isEnemy) removeObjectFromList(unit, this.enemyUnitList);\r\n        else removeObjectFromList(unit, this.playerUnitList);\r\n\r\n        if (this.enemyUnitList.length <= 0)\r\n            this.gameResult = consts.gameResult.Win;\r\n        else if (this.playerUnitList.length <= 0) {\r\n            this.gameResult = consts.gameResult.Lose;\r\n        }\r\n    }\r\n\r\n    eventEffectEnd(effect) {\r\n        removeObjectFromList(effect, this.effectList);\r\n    }\r\n\r\n    update(df) {\r\n\t\tthis.buttonList.forEach(object => object.update(df));\r\n\t\t\r\n        if (this.framesBeforeChangePhase > 0) this.procChangePhase(df);\r\n        if (this.currentPhase === this.PHASE_ENEMY) this.enemyAI.update(df);\r\n        this.playerInputHandler.update(df);\r\n\r\n        this.playerUnitList.forEach(object => object.update(df));\r\n        this.enemyUnitList.forEach(object => object.update(df));\r\n\t\t\r\n        this.effectList.forEach(object => object.update(df));\r\n\t\t\r\n\t\tif (this.gameResult === consts.gameResult.Win) {\r\n\t\t\talert(\"You win!\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\t\tif (this.gameResult === consts.gameResult.Lose) {\r\n\t\t\talert(\"GAME OVER\");\r\n\t\t\tthis.gameResult = consts.gameResult.GameEnded;\r\n\t\t}\r\n\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.stage.draw(ctx);\r\n\t\tthis.buttonList.forEach(object => object.draw(ctx));\r\n        this.grid.draw(ctx);\r\n\t\t\r\n\t\tthis.playerUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawThreat(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnitBG(ctx));\r\n        this.playerUnitList.forEach(object => object.drawUnit(ctx));\r\n        this.enemyUnitList.forEach(object => object.drawUnit(ctx));\r\n\r\n        this.effectList.forEach(object => object.draw(ctx));\r\n\r\n        if (this.gameResult !== consts.gameResult.None) {\r\n            //alert(\"oxoxoxox\");\r\n        }\r\n    }\r\n\r\n    gridPosToPos(gridPos) {\r\n        return {\r\n            x: gridPos.x * this.gridSize - this.gridSize / 2,\r\n            y: gridPos.y * this.gridSize - this.gridSize / 2\r\n        };\r\n    }\r\n\r\n    posToGridPos(pos) {\r\n        return {\r\n            x: Math.floor(pos.x / this.gridSize) + 1,\r\n            y: Math.floor(pos.y / this.gridSize) + 1\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeObjectFromList(object, list) {\r\n    let len = list.length,\r\n        i = 0;\r\n    for (i = 0; i < len; i++) {\r\n        if (list[i] === object) break;\r\n    }\r\n    list.splice(i, 1);\r\n}\r\n","export default class MapSelecter {\r\n\tconstructor (hGame) {\r\n\t\tlet divSelecter = document.getElementById(\"mapSelecter\");\r\n\t\tdivSelecter.innerHTML = hGame.stageList.getStageListStringForMapSelecter();\r\n\t\t\r\n\t\tlet button = document.getElementById(\"divSelecter_confirm\");\r\n\t\tbutton.addEventListener(\"click\", event => {\r\n\t\t\tvar e = document.getElementById(\"divSelecter_list\");\r\n\t\t\tvar result = e.options[e.selectedIndex].value;\r\n\t\t\t//alert(\"confirmed \" + result);\r\n\t\t\thGame.start(result);\r\n\t\t});\r\n\r\n\t}\r\n}","import InputHandler from \"/src/inputHandler\";\nimport Game from \"/src/game\";\nimport MapSelecter from \"/src/mapSelecter\";\nimport consts from \"/src/consts\";\n\nlet canvas = document.getElementById(\"gameScreen\");\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 360;\nconst GAME_HEIGHT = 640;\nconst DRAW_WIDTH = 430;\nconst DRAW_HEIGHT = 640;\n\n//let paddle = new Paddle(GAME_WIDTH, GAME_HEIGHT);\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT, canvas);\nlet playerInputHandler = new InputHandler(game);\ngame.bindPlayerInputHandler(playerInputHandler);\n\nlet mapSelecter = new MapSelecter(game);\n\ngame.start(\"0\");\n\nlet lastTime = 0;\nfunction gameLoop(timestamp) {\n    let dt = timestamp - lastTime;\n    lastTime = timestamp;\n    let df = dt / 16; // assume 16 ms per frame\n\n    ctx.clearRect(0, 0, DRAW_WIDTH, DRAW_HEIGHT);\n    game.update(df);\n    game.draw(ctx);\n\n\trequestAnimationFrame(gameLoop);\n}\n\nfunction scriptCollapsibles() {\n\t// https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_collapsible\n\tlet collapsibles = document.getElementsByClassName(\"collapsible\");\n\tfor (let i = 0; i < collapsibles.length; i++) {\n\t\tcollapsibles[i].addEventListener(\"click\", function() {\n\t\t\tthis.classList.toggle(\"active\");\n\t\t\tlet content = this.nextElementSibling; // wtf this is handy\n\t\t\tif (content.style.display === \"block\") {\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t}\n\t\t});\n\t}\n}\n\nscriptCollapsibles() ;\n\nrequestAnimationFrame(gameLoop);\n"]}